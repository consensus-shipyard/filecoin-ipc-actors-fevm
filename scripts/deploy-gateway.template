/* global ethers */
/* eslint prefer-const: "off" */

import hre, { ethers } from "hardhat";
import {deployContractWithDeployer, getTransactionFees} from './util';

const { getSelectors, FacetCutAction } = require('./js/diamond.js')

export async function deploy(libs: { [key in string]: string }) {
    if (!libs || Object.keys(libs).length === 0) throw new Error(`Libraries are missing`);

    // choose chain ID according to the network in
    // environmental variable
    let chainId = 31415926;
    if (process.env.NETWORK == "calibrationnet") {
        chainId = 314159;
    } else if (process.env.NETWORK == "mainnet") {
        chainId = 314;
    } else if (process.env.NETWORK == "auto") {
        chainId = parseInt(process.env.CHAIN_ID!, 16);
    }

    await hre.run('compile');

    const [deployer] = await ethers.getSigners();
    const balance = await ethers.provider.getBalance(deployer.address);
    console.log("Deploying gateway with the account:", deployer.address, ' balance:', ethers.utils.formatEther(balance));

    const txArgs = await getTransactionFees();

    const FacetNames = [
        'GatewayGetterFacet',
        'GatewayManagerFacet',
        'GatewayRouterFacet',
        'GatewayMessengerFacet'
    ]

    const facetCuts = []

    type Libraries = {
        [libraryName: string]: string;
    }

    // ----

    const getterFacetLibs: Libraries = {
        "SubnetIDHelper": libs["SubnetIDHelper"]
    }

    let getterFacet = await deployContractWithDeployer(
        deployer,
        "GatewayGetterFacet",
        getterFacetLibs, txArgs
    );
    await getterFacet.deployed();

    facetCuts.push({
        facetAddress: getterFacet.address,
        action: FacetCutAction.Add,
        functionSelectors: getSelectors(getterFacet)
    })

    // ----

    let diamondCutFacet = await deployContractWithDeployer(
        deployer,
        "DiamondCutFacet",
        {}, txArgs
    );
    await diamondCutFacet.deployed();

    facetCuts.push({
        facetAddress: diamondCutFacet.address,
        action: FacetCutAction.Add,
        functionSelectors: getSelectors(diamondCutFacet)
    })


    // ----

    const managerFacetLibs: Libraries = {
        "CrossMsgHelper": libs["CrossMsgHelper"],
        "SubnetIDHelper": libs["SubnetIDHelper"]
    }

    const managerFacet = await deployContractWithDeployer(
        deployer,
        "GatewayManagerFacet",
        managerFacetLibs,
        txArgs
    );

    facetCuts.push({
        facetAddress: managerFacet.address,
        action: FacetCutAction.Add,
        functionSelectors: getSelectors(managerFacet)
    })

    // ----

        const messengerFacetLibs: Libraries = {
            "SubnetIDHelper": libs["SubnetIDHelper"],
            "StorableMsgHelper": libs["StorableMsgHelper"]
        }

        const messengerFacet = await deployContractWithDeployer(
            deployer,
            "GatewayMessengerFacet",
            messengerFacetLibs,
            txArgs
        );

        facetCuts.push({
            facetAddress: messengerFacet.address,
            action: FacetCutAction.Add,
            functionSelectors: getSelectors(messengerFacet)
        })

    // ----

    const routerFacetLibs: Libraries = {
        "CrossMsgHelper": libs["CrossMsgHelper"],
        "SubnetIDHelper": libs["SubnetIDHelper"],
        "AccountHelper": libs["AccountHelper"],
        "CheckpointHelper": libs["CheckpointHelper"],
        "StorableMsgHelper": libs["StorableMsgHelper"]
    }

    const routerFacet = await deployContractWithDeployer(
        deployer,
        "GatewayRouterFacet",
        routerFacetLibs,
        txArgs
    );

    facetCuts.push({
        facetAddress: routerFacet.address,
        action: FacetCutAction.Add,
        functionSelectors: getSelectors(routerFacet)
    })

    const gatewayConstructorParams = {
        networkName: {
            root: chainId,
            route: []
        },
        bottomUpCheckPeriod: 10,
        minCollateral: 1000,
        msgFee: ethers.utils.parseUnits("10", "gwei"),
        majorityPercentage: 66,
        genesisValidators: [],
        activeValidatorsLimit: 100,
    }

    const diamondLibs: Libraries = {
    }

    // deploy Diamond
    const { address: gatewayAddress } = await deployContractWithDeployer(
        deployer,
        "GatewayDiamond",
        diamondLibs,
        facetCuts, gatewayConstructorParams,
        txArgs
    );

    // returning the address of the diamond
    return {
        "ChainID": chainId,
        "Gateway": gatewayAddress
    }
}