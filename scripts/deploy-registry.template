import { ethers } from 'hardhat';
import { deployContractWithDeployer, getTransactionFees } from './util';

const { getSelectors } = require('./js/diamond.js')

const GATEWAY = '0x4A04DDb64568C5721f6387a6e85FE1585cF7AB9e';
const LIBMAP = {
  AccountHelper: '0x66678Fc409698D82b3e410fd7DA2c66D7c3519Ad',
  CheckpointHelper: '0xA09a74EbE98A67a8EB7bdA5ed7723Dd4c7E0A738',
  EpochVoteSubmissionHelper: '0xBe824993678eF316eB3572CcAcDc9bD25138952D',
  ExecutableQueueHelper: '0x5B3C5AE1dFEa8D6E2cDE31D3C26dEFbB27e4E2A9',
  SubnetIDHelper: '0x9cd4b43C82bcC717b88e3D85F53B71c2947357A2',
  CrossMsgHelper: '0xefAdA657fE12557Ab515625b4b39C6797df2c843',
};

async function main() {
  try {
    const [deployer] = await ethers.getSigners();
    const balance = await deployer.getBalance();

    console.log(`Deploying contracts with account: ${deployer.address} and balance: ${balance.toString()}`);

    const gatewayAddress = GATEWAY;
    const txArgs = await getTransactionFees();

    // deploy
    const getterFacet = await deployContractWithDeployer(
      deployer,
      "SubnetActorGetterFacet",
      {},
      txArgs
    );
    const getterSelectors = getSelectors(getterFacet);
    console.log("getter address:", getterFacet.address, "selectors:", getSelectors);

    const managerFacet = await deployContractWithDeployer(
      deployer,
      "SubnetActorManagerFacet",
      LIBMAP,
      txArgs
    );
    const managerSelectors = getSelectors(managerFacet);
    console.log("manager address:", managerFacet.address, "selectors:", managerSelectors);

    const registry = await ethers.getContractFactory('SubnetRegistry', { signer: deployer, libraries: {
      "SubnetIDHelper": LIBMAP["SubnetIDHelper"]
    }});

    const contract = await registry.deploy(
      gatewayAddress, 
      getterFacet.address,
      managerFacet.address,
      getterSelectors,
      managerSelectors, 
      txArgs
    );

    // FEVM: 
    console.log(`registry contract deployed to: ${contract.address}`);

    process.exit(0);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

main();
