import { ethers } from 'hardhat';
import { deployContractWithDeployer, getTransactionFees } from './util';

const { getSelectors } = require('./js/diamond.js')

async function main() {
  try {
    const [deployer] = await ethers.getSigners();
    const balance = await deployer.getBalance();

    console.log(`Deploying contracts with account: ${deployer.address} and balance: ${balance.toString()}`);

    const gatewayAddress = GATEWAY.Gateway;
    const txArgs = await getTransactionFees();

    // deploy
    const getterFacet = await deployContractWithDeployer(
      deployer,
      "SubnetActorGetterFacet",
      {
        CheckpointHelper: LIBMAP['CheckpointHelper'],
        SubnetIDHelper: LIBMAP['SubnetIDHelper'],
      },
      txArgs
    );
    const getterSelectors = getSelectors(getterFacet);
    // console.log("getter address:", getterFacet.address);

    const managerFacet = await deployContractWithDeployer(
      deployer,
      "SubnetActorManagerFacet",
      {
        "CrossMsgHelper": LIBMAP["CrossMsgHelper"],
        "SubnetIDHelper": LIBMAP["SubnetIDHelper"],
        "CheckpointHelper": LIBMAP["CheckpointHelper"]
      },
      txArgs
    );
    const managerSelectors = getSelectors(managerFacet);
    // console.log("manager address:", managerFacet.address);

    const registry = await ethers.getContractFactory('SubnetRegistry', { signer: deployer, libraries: {
      "SubnetIDHelper": LIBMAP["SubnetIDHelper"]
    }});

    const contract = await registry.deploy(
      gatewayAddress, 
      getterFacet.address,
      managerFacet.address,
      getterSelectors,
      managerSelectors, 
      txArgs
    );

    // FEVM: 
    console.log(`registry contract deployed to: ${contract.address}`);

    process.exit(0);
  } catch (error) {
    console.error(error);
    process.exit(1);
  }
}

main();
