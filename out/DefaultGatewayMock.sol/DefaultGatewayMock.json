{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "root",
                  "type": "uint64"
                },
                {
                  "internalType": "address[]",
                  "name": "route",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SubnetID",
              "name": "subnetID",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "blockHeight",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nextConfigurationNumber",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "crossMessagesHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BottomUpCheckpoint",
          "name": "bottomUpCheckpoint",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "from",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "to",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes4",
                  "name": "method",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "fee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorableMsg",
              "name": "message",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "wrapped",
              "type": "bool"
            }
          ],
          "internalType": "struct CrossMsg[]",
          "name": "messages",
          "type": "tuple[]"
        }
      ],
      "name": "commitBottomUpCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ParentFinality",
          "name": "finality",
          "type": "tuple"
        }
      ],
      "name": "commitParentFinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "root",
                  "type": "uint64"
                },
                {
                  "internalType": "address[]",
                  "name": "route",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SubnetID",
              "name": "subnetID",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "blockHeight",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nextConfigurationNumber",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "crossMessagesHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BottomUpCheckpoint",
          "name": "checkpoint",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "membershipRootHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "membershipWeight",
          "type": "uint256"
        }
      ],
      "name": "createBottomUpCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "root",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "route",
              "type": "address[]"
            }
          ],
          "internalType": "struct SubnetID",
          "name": "subnetId",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "addrType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct FvmAddress",
          "name": "to",
          "type": "tuple"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "msgCid",
          "type": "bytes32"
        }
      ],
      "name": "propagate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_genesisCircSupply",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "addrType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct FvmAddress",
          "name": "to",
          "type": "tuple"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseRewardForRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "from",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "to",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes4",
                  "name": "method",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "fee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorableMsg",
              "name": "message",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "wrapped",
              "type": "bool"
            }
          ],
          "internalType": "struct CrossMsg",
          "name": "crossMsg",
          "type": "tuple"
        }
      ],
      "name": "sendCrossMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x608060405234801561001057600080fd5b506108f1806100206000396000f3fe6080604052600436106100a75760003560e01c80636b2c1eef116100645780636b2c1eef14610157578063a656ca5b14610165578063c13175ef14610192578063d8e25572146101a0578063f207564e146101bb578063f456b39e146101e757600080fd5b806311196974146100ac57806318f44b70146100d957806325bf0db6146100f857806341c0e1b51461010657806345f54485146101255780635a627dbc14610145575b600080fd5b3480156100b857600080fd5b506100d76100c73660046102e5565b506000805460ff19166001179055565b005b6100d76100e7366004610308565b50506000805460ff19166001179055565b6100d76100c736600461036c565b34801561011257600080fd5b506100d76000805460ff19166001179055565b34801561013157600080fd5b506100d761014036600461036c565b610202565b6100d76000805460ff19166001179055565b6100d76100c7366004610385565b34801561017157600080fd5b506100d76101803660046103d4565b50506000805460ff1916600117905550565b6100d76100c73660046106f7565b3480156101ac57600080fd5b506100d76100c736600461036c565b6100d76101c936600461036c565b506000805433610100026001600160a81b0319909116176001179055565b3480156101f357600080fd5b506100d7610180366004610821565b6000805460ff19166001179081905561022a906001600160a01b03610100909104168261022d565b50565b804710156102545760405163cd78605960e01b815230600482015260240160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146102a1576040519150601f19603f3d011682016040523d82523d6000602084013e6102a6565b606091505b50509050806102c857604051630a12f52160e11b815260040160405180910390fd5b505050565b6000604082840312156102df57600080fd5b50919050565b6000604082840312156102f757600080fd5b61030183836102cd565b9392505050565b6000806040838503121561031b57600080fd5b823567ffffffffffffffff8082111561033357600080fd5b61033f868387016102cd565b9350602085013591508082111561035557600080fd5b50610362858286016102cd565b9150509250929050565b60006020828403121561037e57600080fd5b5035919050565b60006020828403121561039757600080fd5b813567ffffffffffffffff8111156103ae57600080fd5b6103ba848285016102cd565b949350505050565b600060a082840312156102df57600080fd5b6000806000606084860312156103e957600080fd5b833567ffffffffffffffff81111561040057600080fd5b61040c868287016103c2565b9660208601359650604090950135949350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561045b5761045b610422565b60405290565b60405160e0810167ffffffffffffffff8111828210171561045b5761045b610422565b604051601f8201601f1916810167ffffffffffffffff811182821017156104ad576104ad610422565b604052919050565b803567ffffffffffffffff811681146104cd57600080fd5b919050565b600082601f8301126104e357600080fd5b813567ffffffffffffffff8111156104fd576104fd610422565b610510601f8201601f1916602001610484565b81815284602083860101111561052557600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561055457600080fd5b61055c610438565b9050813560ff8116811461056f57600080fd5b8152602082013567ffffffffffffffff81111561058b57600080fd5b610597848285016104d2565b60208301525092915050565b6000604082840312156105b557600080fd5b6105bd610438565b9050813567ffffffffffffffff808211156105d757600080fd5b90830190604082860312156105eb57600080fd5b6105f3610438565b6105fc836104b5565b81526020808401358381111561061157600080fd5b80850194505086601f85011261062657600080fd5b83358381111561063857610638610422565b8060051b610647838201610484565b918252858101830191838101908a84111561066157600080fd5b968401965b8388101561069857873592506001600160a01b03831683146106885760008081fd5b8282529684019690840190610666565b85850152505050818552858101359350828411156106b557600080fd5b6106c187858801610542565b818601525050505092915050565b80356001600160e01b0319811681146104cd57600080fd5b803580151581146104cd57600080fd5b60006020828403121561070957600080fd5b813567ffffffffffffffff8082111561072157600080fd5b908301906040828603121561073557600080fd5b61073d610438565b82358281111561074c57600080fd5b830160e0818803121561075e57600080fd5b610766610461565b81358481111561077557600080fd5b610781898285016105a3565b82525060208201358481111561079657600080fd5b6107a2898285016105a3565b602083015250604082013560408201526107be606083016104b5565b60608201526107cf608083016106cf565b608082015260a0820135848111156107e657600080fd5b6107f2898285016104d2565b60a08301525060c082013560c08201528083525050610813602084016106e7565b602082015295945050505050565b60008060006040848603121561083657600080fd5b833567ffffffffffffffff8082111561084e57600080fd5b61085a878388016103c2565b9450602086013591508082111561087057600080fd5b818601915086601f83011261088457600080fd5b81358181111561089357600080fd5b8760208260051b85010111156108a857600080fd5b602083019450809350505050925092509256fea26469706673582212200cf2549e05f619299969deef4202ccf6c18345c4ea378b29f4ff7fdafcabbbbf64736f6c63430008130033",
    "sourceMap": "409:2707:88:-:0;;;;;;;;;;;;;;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x6080604052600436106100a75760003560e01c80636b2c1eef116100645780636b2c1eef14610157578063a656ca5b14610165578063c13175ef14610192578063d8e25572146101a0578063f207564e146101bb578063f456b39e146101e757600080fd5b806311196974146100ac57806318f44b70146100d957806325bf0db6146100f857806341c0e1b51461010657806345f54485146101255780635a627dbc14610145575b600080fd5b3480156100b857600080fd5b506100d76100c73660046102e5565b506000805460ff19166001179055565b005b6100d76100e7366004610308565b50506000805460ff19166001179055565b6100d76100c736600461036c565b34801561011257600080fd5b506100d76000805460ff19166001179055565b34801561013157600080fd5b506100d761014036600461036c565b610202565b6100d76000805460ff19166001179055565b6100d76100c7366004610385565b34801561017157600080fd5b506100d76101803660046103d4565b50506000805460ff1916600117905550565b6100d76100c73660046106f7565b3480156101ac57600080fd5b506100d76100c736600461036c565b6100d76101c936600461036c565b506000805433610100026001600160a81b0319909116176001179055565b3480156101f357600080fd5b506100d7610180366004610821565b6000805460ff19166001179081905561022a906001600160a01b03610100909104168261022d565b50565b804710156102545760405163cd78605960e01b815230600482015260240160405180910390fd5b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146102a1576040519150601f19603f3d011682016040523d82523d6000602084013e6102a6565b606091505b50509050806102c857604051630a12f52160e11b815260040160405180910390fd5b505050565b6000604082840312156102df57600080fd5b50919050565b6000604082840312156102f757600080fd5b61030183836102cd565b9392505050565b6000806040838503121561031b57600080fd5b823567ffffffffffffffff8082111561033357600080fd5b61033f868387016102cd565b9350602085013591508082111561035557600080fd5b50610362858286016102cd565b9150509250929050565b60006020828403121561037e57600080fd5b5035919050565b60006020828403121561039757600080fd5b813567ffffffffffffffff8111156103ae57600080fd5b6103ba848285016102cd565b949350505050565b600060a082840312156102df57600080fd5b6000806000606084860312156103e957600080fd5b833567ffffffffffffffff81111561040057600080fd5b61040c868287016103c2565b9660208601359650604090950135949350505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561045b5761045b610422565b60405290565b60405160e0810167ffffffffffffffff8111828210171561045b5761045b610422565b604051601f8201601f1916810167ffffffffffffffff811182821017156104ad576104ad610422565b604052919050565b803567ffffffffffffffff811681146104cd57600080fd5b919050565b600082601f8301126104e357600080fd5b813567ffffffffffffffff8111156104fd576104fd610422565b610510601f8201601f1916602001610484565b81815284602083860101111561052557600080fd5b816020850160208301376000918101602001919091529392505050565b60006040828403121561055457600080fd5b61055c610438565b9050813560ff8116811461056f57600080fd5b8152602082013567ffffffffffffffff81111561058b57600080fd5b610597848285016104d2565b60208301525092915050565b6000604082840312156105b557600080fd5b6105bd610438565b9050813567ffffffffffffffff808211156105d757600080fd5b90830190604082860312156105eb57600080fd5b6105f3610438565b6105fc836104b5565b81526020808401358381111561061157600080fd5b80850194505086601f85011261062657600080fd5b83358381111561063857610638610422565b8060051b610647838201610484565b918252858101830191838101908a84111561066157600080fd5b968401965b8388101561069857873592506001600160a01b03831683146106885760008081fd5b8282529684019690840190610666565b85850152505050818552858101359350828411156106b557600080fd5b6106c187858801610542565b818601525050505092915050565b80356001600160e01b0319811681146104cd57600080fd5b803580151581146104cd57600080fd5b60006020828403121561070957600080fd5b813567ffffffffffffffff8082111561072157600080fd5b908301906040828603121561073557600080fd5b61073d610438565b82358281111561074c57600080fd5b830160e0818803121561075e57600080fd5b610766610461565b81358481111561077557600080fd5b610781898285016105a3565b82525060208201358481111561079657600080fd5b6107a2898285016105a3565b602083015250604082013560408201526107be606083016104b5565b60608201526107cf608083016106cf565b608082015260a0820135848111156107e657600080fd5b6107f2898285016104d2565b60a08301525060c082013560c08201528083525050610813602084016106e7565b602082015295945050505050565b60008060006040848603121561083657600080fd5b833567ffffffffffffffff8082111561084e57600080fd5b61085a878388016103c2565b9450602086013591508082111561087057600080fd5b818601915086601f83011261088457600080fd5b81358181111561089357600080fd5b8760208260051b85010111156108a857600080fd5b602083019450809350505050925092509256fea26469706673582212200cf2549e05f619299969deef4202ccf6c18345c4ea378b29f4ff7fdafcabbbbf64736f6c63430008130033",
    "sourceMap": "409:2707:88:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2588:192;;;;;;;;;;-1:-1:-1;2588:192:88;;;;;:::i;:::-;-1:-1:-1;2764:5:88;:9;;-1:-1:-1;;2764:9:88;2772:1;2764:9;;;2588:192;;;1878:200;;;;;;:::i;:::-;-1:-1:-1;;2062:5:88;:9;;-1:-1:-1;;2062:9:88;2070:1;2062:9;;;1878:200;2427:155;;;;;;:::i;1333:132::-;;;;;;;;;;;;1449:5;:9;;-1:-1:-1;;1449:9:88;1457:1;1449:9;;;1333:132;961:199;;;;;;;;;;-1:-1:-1;961:199:88;;;;;:::i;:::-;;:::i;812:143::-;;1449:5;:9;;-1:-1:-1;;1449:9:88;1457:1;1449:9;;;1333:132;2084:157;;;;;;:::i;2786:328::-;;;;;;;;;;-1:-1:-1;2786:328:88;;;;;:::i;:::-;-1:-1:-1;;3098:5:88;:9;;-1:-1:-1;;3098:9:88;3106:1;3098:9;;;-1:-1:-1;2786:328:88;2247:174;;;;;;:::i;1166:161::-;;;;;;;;;;-1:-1:-1;1166:161:88;;;;;:::i;546:260::-;;;;;;:::i;:::-;-1:-1:-1;755:5:88;:9;;789:10;755:9;775:24;-1:-1:-1;;;;;;775:24:88;;;;763:1;775:24;;;546:260;1618:254;;;;;;;;;;-1:-1:-1;1618:254:88;;;;;:::i;961:199::-;1095:5;:9;;-1:-1:-1;;1095:9:88;1103:1;1095:9;;;;;1115:38;;-1:-1:-1;;;;;1095:9:88;1123:11;;;;1146:6;1115:30;:38::i;:::-;961:199;:::o;1530:331:21:-;1639:6;1615:21;:30;1611:109;;;1668:41;;-1:-1:-1;;;1668:41:21;;1703:4;1668:41;;;9290:51:90;9263:18;;1668:41:21;;;;;;;1611:109;1731:12;1749:9;-1:-1:-1;;;;;1749:14:21;1771:6;1749:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1730:52;;;1797:7;1792:63;;1827:17;;-1:-1:-1;;;1827:17:21;;;;;;;;;;;1792:63;1601:260;1530:331;;:::o;14:162:90:-;81:5;126:2;117:6;112:3;108:16;104:25;101:45;;;142:1;139;132:12;101:45;-1:-1:-1;164:6:90;14:162;-1:-1:-1;14:162:90:o;181:253::-;275:6;328:2;316:9;307:7;303:23;299:32;296:52;;;344:1;341;334:12;296:52;367:61;420:7;409:9;367:61;:::i;:::-;357:71;181:253;-1:-1:-1;;;181:253:90:o;439:631::-;567:6;575;628:2;616:9;607:7;603:23;599:32;596:52;;;644:1;641;634:12;596:52;684:9;671:23;713:18;754:2;746:6;743:14;740:34;;;770:1;767;760:12;740:34;793:74;859:7;850:6;839:9;835:22;793:74;:::i;:::-;783:84;;920:2;909:9;905:18;892:32;876:48;;949:2;939:8;936:16;933:36;;;965:1;962;955:12;933:36;;988:76;1056:7;1045:8;1034:9;1030:24;988:76;:::i;:::-;978:86;;;439:631;;;;;:::o;1075:180::-;1134:6;1187:2;1175:9;1166:7;1162:23;1158:32;1155:52;;;1203:1;1200;1193:12;1155:52;-1:-1:-1;1226:23:90;;1075:180;-1:-1:-1;1075:180:90:o;1445:367::-;1535:6;1588:2;1576:9;1567:7;1563:23;1559:32;1556:52;;;1604:1;1601;1594:12;1556:52;1644:9;1631:23;1677:18;1669:6;1666:30;1663:50;;;1709:1;1706;1699:12;1663:50;1732:74;1798:7;1789:6;1778:9;1774:22;1732:74;:::i;:::-;1722:84;1445:367;-1:-1:-1;;;;1445:367:90:o;1817:167::-;1888:5;1933:3;1924:6;1919:3;1915:16;1911:26;1908:46;;;1950:1;1947;1940:12;1989:515;2105:6;2113;2121;2174:2;2162:9;2153:7;2149:23;2145:32;2142:52;;;2190:1;2187;2180:12;2142:52;2230:9;2217:23;2263:18;2255:6;2252:30;2249:50;;;2295:1;2292;2285:12;2249:50;2318:78;2388:7;2379:6;2368:9;2364:22;2318:78;:::i;:::-;2308:88;2443:2;2428:18;;2415:32;;-1:-1:-1;2494:2:90;2479:18;;;2466:32;;1989:515;-1:-1:-1;;;;1989:515:90:o;2509:127::-;2570:10;2565:3;2561:20;2558:1;2551:31;2601:4;2598:1;2591:15;2625:4;2622:1;2615:15;2641:257;2713:4;2707:11;;;2745:17;;2792:18;2777:34;;2813:22;;;2774:62;2771:88;;;2839:18;;:::i;:::-;2875:4;2868:24;2641:257;:::o;2903:253::-;2975:2;2969:9;3017:4;3005:17;;3052:18;3037:34;;3073:22;;;3034:62;3031:88;;;3099:18;;:::i;3161:275::-;3232:2;3226:9;3297:2;3278:13;;-1:-1:-1;;3274:27:90;3262:40;;3332:18;3317:34;;3353:22;;;3314:62;3311:88;;;3379:18;;:::i;:::-;3415:2;3408:22;3161:275;;-1:-1:-1;3161:275:90:o;3441:171::-;3508:20;;3568:18;3557:30;;3547:41;;3537:69;;3602:1;3599;3592:12;3537:69;3441:171;;;:::o;3617:530::-;3659:5;3712:3;3705:4;3697:6;3693:17;3689:27;3679:55;;3730:1;3727;3720:12;3679:55;3766:6;3753:20;3792:18;3788:2;3785:26;3782:52;;;3814:18;;:::i;:::-;3858:55;3901:2;3882:13;;-1:-1:-1;;3878:27:90;3907:4;3874:38;3858:55;:::i;:::-;3938:2;3929:7;3922:19;3984:3;3977:4;3972:2;3964:6;3960:15;3956:26;3953:35;3950:55;;;4001:1;3998;3991:12;3950:55;4066:2;4059:4;4051:6;4047:17;4040:4;4031:7;4027:18;4014:55;4114:1;4089:16;;;4107:4;4085:27;4078:38;;;;4093:7;3617:530;-1:-1:-1;;;3617:530:90:o;4152:511::-;4209:5;4257:4;4245:9;4240:3;4236:19;4232:30;4229:50;;;4275:1;4272;4265:12;4229:50;4297:22;;:::i;:::-;4288:31;;4356:9;4343:23;4410:4;4401:7;4397:18;4388:7;4385:31;4375:59;;4430:1;4427;4420:12;4375:59;4443:22;;4516:2;4501:18;;4488:32;4543:18;4532:30;;4529:50;;;4575:1;4572;4565:12;4529:50;4611:45;4652:3;4643:6;4632:9;4628:22;4611:45;:::i;:::-;4606:2;4599:5;4595:14;4588:69;;4152:511;;;;:::o;4668:1657::-;4725:5;4773:4;4761:9;4756:3;4752:19;4748:30;4745:50;;;4791:1;4788;4781:12;4745:50;4813:22;;:::i;:::-;4804:31;;4871:9;4858:23;4900:18;4941:2;4933:6;4930:14;4927:34;;;4957:1;4954;4947:12;4927:34;4980:22;;;;5032:4;5018:12;;;5014:23;5011:43;;;5050:1;5047;5040:12;5011:43;5078:22;;:::i;:::-;5125:21;5143:2;5125:21;:::i;:::-;5116:7;5109:38;5166:2;5214;5210;5206:11;5193:25;5243:2;5233:8;5230:16;5227:36;;;5259:1;5256;5249:12;5227:36;5290:8;5286:2;5282:17;5272:27;;;5337:3;5330:4;5326:2;5322:13;5318:23;5308:51;;5355:1;5352;5345:12;5308:51;5391:2;5378:16;5413:2;5409;5406:10;5403:36;;;5419:18;;:::i;:::-;5465:2;5462:1;5458:10;5488:28;5512:2;5508;5504:11;5488:28;:::i;:::-;5550:15;;;5620:11;;;5616:20;;;5581:12;;;;5648:15;;;5645:35;;;5676:1;5673;5666:12;5645:35;5700:11;;;;5720:334;5736:6;5731:3;5728:15;5720:334;;;5805:17;;;-1:-1:-1;;;;;;5857:33:90;;5845:46;;5835:144;;5933:1;5962:2;5958;5951:14;5835:144;5992:20;;;5753:12;;;;6032;;;;5720:334;;;6070:16;;;6063:31;-1:-1:-1;;;6103:22:90;;;6163:18;;;6150:32;;-1:-1:-1;6194:16:90;;;6191:36;;;6223:1;6220;6213:12;6191:36;6259:59;6314:3;6303:8;6292:9;6288:24;6259:59;:::i;:::-;6254:2;6247:5;6243:14;6236:83;;;;;4668:1657;;;;:::o;6330:173::-;6397:20;;-1:-1:-1;;;;;;6446:32:90;;6436:43;;6426:71;;6493:1;6490;6483:12;6508:160;6573:20;;6629:13;;6622:21;6612:32;;6602:60;;6658:1;6655;6648:12;6673:1560;6759:6;6812:2;6800:9;6791:7;6787:23;6783:32;6780:52;;;6828:1;6825;6818:12;6780:52;6868:9;6855:23;6897:18;6938:2;6930:6;6927:14;6924:34;;;6954:1;6951;6944:12;6924:34;6977:22;;;;7033:4;7015:16;;;7011:27;7008:47;;;7051:1;7048;7041:12;7008:47;7077:22;;:::i;:::-;7137:2;7124:16;7165:2;7155:8;7152:16;7149:36;;;7181:1;7178;7171:12;7149:36;7204:17;;7255:4;7237:16;;;7233:27;7230:47;;;7273:1;7270;7263:12;7230:47;7301:22;;:::i;:::-;7361:2;7348:16;7389:2;7379:8;7376:16;7373:36;;;7405:1;7402;7395:12;7373:36;7434:56;7482:7;7471:8;7467:2;7463:17;7434:56;:::i;:::-;7425:7;7418:73;;7537:2;7533;7529:11;7516:25;7566:2;7556:8;7553:16;7550:36;;;7582:1;7579;7572:12;7550:36;7620:56;7668:7;7657:8;7653:2;7649:17;7620:56;:::i;:::-;7615:2;7606:7;7602:16;7595:82;;7734:4;7730:2;7726:13;7713:27;7706:4;7697:7;7693:18;7686:55;7775:30;7801:2;7797;7793:11;7775:30;:::i;:::-;7770:2;7761:7;7757:16;7750:56;7841:31;7867:3;7863:2;7859:12;7841:31;:::i;:::-;7835:3;7826:7;7822:17;7815:58;7919:3;7915:2;7911:12;7898:26;7949:2;7939:8;7936:16;7933:36;;;7965:1;7962;7955:12;7933:36;8004:44;8040:7;8029:8;8025:2;8021:17;8004:44;:::i;:::-;7998:3;7989:7;7985:17;7978:71;;8105:3;8101:2;8097:12;8084:26;8078:3;8069:7;8065:17;8058:53;8134:7;8127:5;8120:22;;;8174:28;8198:2;8194;8190:11;8174:28;:::i;:::-;8169:2;8158:14;;8151:52;8162:5;6673:1560;-1:-1:-1;;;;;6673:1560:90:o;8238:901::-;8401:6;8409;8417;8470:2;8458:9;8449:7;8445:23;8441:32;8438:52;;;8486:1;8483;8476:12;8438:52;8526:9;8513:23;8555:18;8596:2;8588:6;8585:14;8582:34;;;8612:1;8609;8602:12;8582:34;8635:78;8705:7;8696:6;8685:9;8681:22;8635:78;:::i;:::-;8625:88;;8766:2;8755:9;8751:18;8738:32;8722:48;;8795:2;8785:8;8782:16;8779:36;;;8811:1;8808;8801:12;8779:36;8849:8;8838:9;8834:24;8824:34;;8896:7;8889:4;8885:2;8881:13;8877:27;8867:55;;8918:1;8915;8908:12;8867:55;8958:2;8945:16;8984:2;8976:6;8973:14;8970:34;;;9000:1;8997;8990:12;8970:34;9053:7;9048:2;9038:6;9035:1;9031:14;9027:2;9023:23;9019:32;9016:45;9013:65;;;9074:1;9071;9064:12;9013:65;9105:2;9101;9097:11;9087:21;;9127:6;9117:16;;;;;8238:901;;;;;:::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addStake()": "5a627dbc",
    "commitBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[])": "f456b39e",
    "commitParentFinality((uint256,bytes32))": "11196974",
    "createBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),bytes32,uint256)": "a656ca5b",
    "fund((uint64,address[]),(uint8,bytes))": "18f44b70",
    "kill()": "41c0e1b5",
    "propagate(bytes32)": "25bf0db6",
    "register(uint256)": "f207564e",
    "release((uint8,bytes))": "6b2c1eef",
    "releaseRewardForRelayer(uint256)": "d8e25572",
    "releaseStake(uint256)": "45f54485",
    "sendCrossMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))": "c13175ef"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetID\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextConfigurationNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"crossMessagesHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct BottomUpCheckpoint\",\"name\":\"bottomUpCheckpoint\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct StorableMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"}],\"internalType\":\"struct CrossMsg[]\",\"name\":\"messages\",\"type\":\"tuple[]\"}],\"name\":\"commitBottomUpCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ParentFinality\",\"name\":\"finality\",\"type\":\"tuple\"}],\"name\":\"commitParentFinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetID\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextConfigurationNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"crossMessagesHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct BottomUpCheckpoint\",\"name\":\"checkpoint\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"membershipRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"membershipWeight\",\"type\":\"uint256\"}],\"name\":\"createBottomUpCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgCid\",\"type\":\"bytes32\"}],\"name\":\"propagate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_genesisCircSupply\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseRewardForRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct StorableMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"}],\"internalType\":\"struct CrossMsg\",\"name\":\"crossMsg\",\"type\":\"tuple\"}],\"name\":\"sendCrossMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake()\":{\"notice\":\"AddStake adds stake to the collateral of a subnet.\"},\"commitBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[])\":{\"notice\":\"CommitChildCheck propagates the commitment of a checkpoint from a child subnet, process the cross-messages directed to the subnet.\"},\"commitParentFinality((uint256,bytes32))\":{\"notice\":\"commit the ipc parent finality into storage\"},\"createBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),bytes32,uint256)\":{\"notice\":\"creates a new bottom-up checkpoint\"},\"fund((uint64,address[]),(uint8,bytes))\":{\"notice\":\"Fund injects new funds from an account of the parent chain to a subnet. This functions receives a transaction with the FILs that want to be injected in the subnet. - Funds injected are frozen. - A new fund cross-message is created and stored to propagate it to the subnet. It will be picked up by miners to include it in the next possible block. - The cross-message nonce is updated\"},\"kill()\":{\"notice\":\"Kill propagates the kill signal from a subnet actor to unregister it from th hierarchy.\"},\"propagate(bytes32)\":{\"notice\":\"Propagates the stored postbox item for the given cid\"},\"release((uint8,bytes))\":{\"notice\":\"Release creates a new check message to release funds in parent chain This function burns the funds that will be released in the current subnet and propagates a new checkpoint message to the parent chain to signal the amount of funds that can be released for a specific address.\"},\"releaseRewardForRelayer(uint256)\":{\"notice\":\"Release reward for relayer\"},\"releaseStake(uint256)\":{\"notice\":\"Release stake recovers some collateral of the subnet\"},\"sendCrossMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))\":{\"notice\":\"SendCrossMessage sends an arbitrary cross-message to other subnet in the hierarchy. If the message includes any funds they need to be burnt (like in Release) before being propagated to the corresponding subnet. The circulating supply in each subnet needs to be updated as the message passes through them. Params expect a raw message without any subnet context (the IPC address is included in the message by the actor). Only actors are allowed to send arbitrary cross-messages as a side-effect of their execution. For plain token exchanges fund and release have to be used.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"test/subnetActorMock/DefaultGatewayMock.sol\":\"DefaultGatewayMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":elliptic-curve-solidity/=lib/elliptic-curve-solidity/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":fevmate/=lib/fevmate/contracts/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":sol-explore/=node_modules/sol-explore/\"]},\"sources\":{\"lib/fevmate/contracts/utils/FilAddress.sol\":{\"keccak256\":\"0x8707b4f152e92b852090c313419c0dc772eebf4428472a0659dd6b13dd6bee31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://442fc3cb02e610424f0599f4cc519e4fbead47da09911697b62208a2ae51e4a7\",\"dweb:/ipfs/QmRpKJ9tWWTHgMpRB18DHJLbCT4YT9yp2G89H9mHGu5ss2\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13ff04f87357176e2b267730f288013269eefce0862ea8f4bf3f420948eb7d5\",\"dweb:/ipfs/QmQZRjF3CdCdoUvqhrT9KXYjrjmdmFQqENtuiHTMbyt6xo\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0xeefcbb8cb69f04a18f6dc61d4811133ce9aeff96ce60820f758abc52ef55b892\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://81c61c0dd40890f6a4b1fb792bc5b5b61e821fcafa2aae6c7eda6d4f1ece2593\",\"dweb:/ipfs/QmRLMrq6BiPS9wGu7ZC174SFYWCu6cxbU3agDw2XgJeDpT\"]},\"src/constants/Constants.sol\":{\"keccak256\":\"0xe09e20d591a8c9cabf6f2e44a90029fb3b2a8cdd6c09dc4105b81781ffb44546\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://b3c4df8d0fd2aa770abf8b43a134ce0fc0bc3091f97ec02415d09cca09f4f940\",\"dweb:/ipfs/QmSUpMfWLN8WWhvLmbZymCdR48ZmpsuyvBnSPeAtdorxDx\"]},\"src/enums/ConsensusType.sol\":{\"keccak256\":\"0xc5efd8c66b57dadaba4178c4b4d087b30cb84cbac38fb288a8c3b65075a9f59d\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://6fcffaa8e40322ae27958603884cc07d06e9efd59cf12764f28945b7a47e11d0\",\"dweb:/ipfs/Qmc3PBovpcvj7jgVq5GwR5SkiUXBymT1tw74mvu5ccNqoZ\"]},\"src/enums/Status.sol\":{\"keccak256\":\"0x8f5921e4df87420127988b54f67a3ccfb6fbfae767891e8ed4edbf371598e16c\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://7a81d9a00ea7a2a85cfe1b2662236412dddb55e09fa70c70a34dc4dfc5ffea33\",\"dweb:/ipfs/QmRh4uA4491B2DVjrUtdfCTTtjpoXpKEp3Zz9CBYueNW1R\"]},\"src/errors/IPCErrors.sol\":{\"keccak256\":\"0x89ee65643858f78c51c49457f6cd127c773f794bf1b70ea50bd5e59f1b48e467\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://a4e9c19f69ab5bcd7ec8ac2b058a84bff7125ebc42eb195c7d8c7094c2049dec\",\"dweb:/ipfs/QmeN67eDEQefw5PS8iXk9TDzULVqK1QNA9ajzD3Z2jqxwK\"]},\"src/interfaces/IGateway.sol\":{\"keccak256\":\"0xb4209b44c3965fd233387ece78149461bd64a47788c3af24edb7c99ea1ef8868\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://4db7a4573100063387e170c55a69772b20e403444e9d97b24cc220a71a52fbbb\",\"dweb:/ipfs/QmTYsSjmFsTwuNTXBByZKueJZLpe7RwNzLRWNPxXGA3YKB\"]},\"src/lib/AccountHelper.sol\":{\"keccak256\":\"0xd5f3c0079e3002218c63b70b43f6e018eb5d39f064b7d4321b6409c84f6a22b5\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://e5857fe645e020bc964cd53a33e1fbd4fd9d0de405170a8251cc0b040519cbdc\",\"dweb:/ipfs/QmaFUeVbA1mqn7dTJMqgX4DbKx6yzBrSkmeNTcaVjBJd9z\"]},\"src/lib/LibGatewayActorStorage.sol\":{\"keccak256\":\"0x4731b1de63c99bfccfa12c1c59481f27630994c8d04c0a555c6f6845f3873157\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://641337e8c2d3876ccefdb1f181c9cfeb9568f7c015f51da668d0c2dc582773d3\",\"dweb:/ipfs/QmNzgGXzXjULKJE6iYN6ioZLJvh3ykLdwt6gTjVp7gX9f6\"]},\"src/lib/LibStaking.sol\":{\"keccak256\":\"0x3ad98b426ca82cc98fd795a166c4a599c71e9f400e3b23bda58666e2febdf3b2\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://1e501014ed974118161282e81821aa05810da989a3b2091624e73327d45cab67\",\"dweb:/ipfs/QmSi2Ed42uhNoxuvdyigyhNpujEkrzc9Goe4gTbhgVuE3o\"]},\"src/lib/LibStakingChangeLog.sol\":{\"keccak256\":\"0x1ec44b7c417dae8bec87da6f1f48eb10a1eacdfb4935144dd9094dc1bbe9aa9b\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://d6fcbd14fe0743c0ea0a8a8d2ea851b4864559c3553773f07d6ae708bcc83318\",\"dweb:/ipfs/QmYb6v6U27FAY4ut6gCZy6oK1MjN165RTxUGhrY6zxtg93\"]},\"src/lib/LibSubnetActorStorage.sol\":{\"keccak256\":\"0xe11ae56d18ef43fd9ebdf9350977f9a26da4ee9a3288b46b04c5b973aa231f28\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://f616b61fde1528a8666d09c962d7f23a82b200229691794933f39c4d3781fc1c\",\"dweb:/ipfs/QmXQsNGv6R34wAx1fRoyMiwdtGgQVn1qDXGCr7cED92vvJ\"]},\"src/lib/priority/LibMaxPQ.sol\":{\"keccak256\":\"0xf98fae415e764e627134ae440dea84d6879eaaa6950868cb56382324f84ae8db\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://f290b5d20ac65c22eddbadeae1b49bbe78cb9e8e0cd187c2b93f98d13f9300a2\",\"dweb:/ipfs/QmXShiVpDzD8CLn8MeWSa4fQSeiTzyBHSA1VNZtLhJgTgW\"]},\"src/lib/priority/LibMinPQ.sol\":{\"keccak256\":\"0xc8c27239c0e82b489d9cb61f64be28d4fde6af8d6c8b2d27180ad9c42d602110\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://ed53f96d383f74c06a118ad3c8758df07b91f48dcd81769dac637d2289644796\",\"dweb:/ipfs/Qmaf4HdjTnuQZ44PRmqmWXCF3h616rhNA7uKEksPPtmxXK\"]},\"src/lib/priority/LibPQ.sol\":{\"keccak256\":\"0x4d4290087995d669e80f8fdd405bfaae545323393c0c54689b84965ffb87303e\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://c21b563f6bf23afacb38fc97ab94d1afe12e4ad3dfde96d4484068bf26b13a2c\",\"dweb:/ipfs/Qmd5d3EnZwaSRnjG4ZFH2X8HKgymzd6vQgus8A6oEoh5pJ\"]},\"src/structs/Checkpoint.sol\":{\"keccak256\":\"0x1982a747516dce183434bbf0e96b5b1fedbf3a90928beffcc046cadf47ee0746\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://253b9df56334aae80fe4a0da805e4fdc3d186fb2624edade864ae06bfd472f2a\",\"dweb:/ipfs/QmVAaz1ViF96LjM9Aknn3vtwQ5a5oDiJRZP47ddJ1V9Fww\"]},\"src/structs/FvmAddress.sol\":{\"keccak256\":\"0xfc8c16b96bd5b7d4a163f586bd36936f7170304de70aa487a0b11c60e5ac9069\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://6b6572d5f28a9fa12ff91d45601c063cdaf68a12b9f8e46131c6dc4cd28255ac\",\"dweb:/ipfs/QmSC8gRWVuPKjobgDDyHbm2cmcPN8pWzbEmXKmdMZR8YKu\"]},\"src/structs/Subnet.sol\":{\"keccak256\":\"0x1ddb626039baf4a4411f06b5340aaa80dcd65e9980da7673b73ab16633d871ce\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://af017eef4cb46262ac29b4cf47faa1fc5d2b61970ec7d6d021eae4cf45b5577b\",\"dweb:/ipfs/QmZJiA2t934fbe62513neQYzxSNswnCRTJybp7d6X2RyWR\"]},\"test/subnetActorMock/DefaultGatewayMock.sol\":{\"keccak256\":\"0x5b7bd85d2619091c3eb5fc743569fe4bd9b2449d6482fe21dde477832bad9b8d\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://59aeb802eff48d8fdf083c0b1df58c44cbddf5d2ba2277001c70ad391c2d015f\",\"dweb:/ipfs/Qme1Bzsi79CUVAPYXKRhCB1XFFRmeNxhud8mPspRWUZMxV\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "type": "error",
          "name": "AddressInsufficientBalance"
        },
        {
          "inputs": [],
          "type": "error",
          "name": "FailedInnerCall"
        },
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "function",
          "name": "addStake"
        },
        {
          "inputs": [
            {
              "internalType": "struct BottomUpCheckpoint",
              "name": "bottomUpCheckpoint",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct SubnetID",
                  "name": "subnetID",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "root",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "route",
                      "type": "address[]"
                    }
                  ]
                },
                {
                  "internalType": "uint64",
                  "name": "blockHeight",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "nextConfigurationNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "crossMessagesHash",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "struct CrossMsg[]",
              "name": "messages",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct StorableMsg",
                  "name": "message",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "struct IPCAddress",
                      "name": "from",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "struct IPCAddress",
                      "name": "to",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint64",
                      "name": "nonce",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "method",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "params",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "fee",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bool",
                  "name": "wrapped",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitBottomUpCheckpoint"
        },
        {
          "inputs": [
            {
              "internalType": "struct ParentFinality",
              "name": "finality",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "height",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitParentFinality"
        },
        {
          "inputs": [
            {
              "internalType": "struct BottomUpCheckpoint",
              "name": "checkpoint",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct SubnetID",
                  "name": "subnetID",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "root",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "route",
                      "type": "address[]"
                    }
                  ]
                },
                {
                  "internalType": "uint64",
                  "name": "blockHeight",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "nextConfigurationNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "crossMessagesHash",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "membershipRootHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "membershipWeight",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createBottomUpCheckpoint"
        },
        {
          "inputs": [
            {
              "internalType": "struct SubnetID",
              "name": "subnetId",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "root",
                  "type": "uint64"
                },
                {
                  "internalType": "address[]",
                  "name": "route",
                  "type": "address[]"
                }
              ]
            },
            {
              "internalType": "struct FvmAddress",
              "name": "to",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "addrType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "payload",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "fund"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "kill"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "msgCid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "propagate"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_genesisCircSupply",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "register"
        },
        {
          "inputs": [
            {
              "internalType": "struct FvmAddress",
              "name": "to",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "addrType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "payload",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "release"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "releaseRewardForRelayer"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "releaseStake"
        },
        {
          "inputs": [
            {
              "internalType": "struct CrossMsg",
              "name": "crossMsg",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct StorableMsg",
                  "name": "message",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "struct IPCAddress",
                      "name": "from",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "struct IPCAddress",
                      "name": "to",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint64",
                      "name": "nonce",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "method",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "params",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "fee",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bool",
                  "name": "wrapped",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "sendCrossMessage"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addStake()": {
            "notice": "AddStake adds stake to the collateral of a subnet."
          },
          "commitBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[])": {
            "notice": "CommitChildCheck propagates the commitment of a checkpoint from a child subnet, process the cross-messages directed to the subnet."
          },
          "commitParentFinality((uint256,bytes32))": {
            "notice": "commit the ipc parent finality into storage"
          },
          "createBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),bytes32,uint256)": {
            "notice": "creates a new bottom-up checkpoint"
          },
          "fund((uint64,address[]),(uint8,bytes))": {
            "notice": "Fund injects new funds from an account of the parent chain to a subnet. This functions receives a transaction with the FILs that want to be injected in the subnet. - Funds injected are frozen. - A new fund cross-message is created and stored to propagate it to the subnet. It will be picked up by miners to include it in the next possible block. - The cross-message nonce is updated"
          },
          "kill()": {
            "notice": "Kill propagates the kill signal from a subnet actor to unregister it from th hierarchy."
          },
          "propagate(bytes32)": {
            "notice": "Propagates the stored postbox item for the given cid"
          },
          "release((uint8,bytes))": {
            "notice": "Release creates a new check message to release funds in parent chain This function burns the funds that will be released in the current subnet and propagates a new checkpoint message to the parent chain to signal the amount of funds that can be released for a specific address."
          },
          "releaseRewardForRelayer(uint256)": {
            "notice": "Release reward for relayer"
          },
          "releaseStake(uint256)": {
            "notice": "Release stake recovers some collateral of the subnet"
          },
          "sendCrossMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))": {
            "notice": "SendCrossMessage sends an arbitrary cross-message to other subnet in the hierarchy. If the message includes any funds they need to be burnt (like in Release) before being propagated to the corresponding subnet. The circulating supply in each subnet needs to be updated as the message passes through them. Params expect a raw message without any subnet context (the IPC address is included in the message by the actor). Only actors are allowed to send arbitrary cross-messages as a side-effect of their execution. For plain token exchanges fund and release have to be used."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "elliptic-curve-solidity/=lib/elliptic-curve-solidity/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "fevmate/=lib/fevmate/contracts/",
        "forge-std/=lib/forge-std/src/",
        "hardhat-deploy/=node_modules/hardhat-deploy/",
        "hardhat/=node_modules/hardhat/",
        "murky/=lib/murky/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/",
        "sol-explore/=node_modules/sol-explore/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "test/subnetActorMock/DefaultGatewayMock.sol": "DefaultGatewayMock"
      },
      "libraries": {}
    },
    "sources": {
      "lib/fevmate/contracts/utils/FilAddress.sol": {
        "keccak256": "0x8707b4f152e92b852090c313419c0dc772eebf4428472a0659dd6b13dd6bee31",
        "urls": [
          "bzz-raw://442fc3cb02e610424f0599f4cc519e4fbead47da09911697b62208a2ae51e4a7",
          "dweb:/ipfs/QmRpKJ9tWWTHgMpRB18DHJLbCT4YT9yp2G89H9mHGu5ss2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1",
        "urls": [
          "bzz-raw://c13ff04f87357176e2b267730f288013269eefce0862ea8f4bf3f420948eb7d5",
          "dweb:/ipfs/QmQZRjF3CdCdoUvqhrT9KXYjrjmdmFQqENtuiHTMbyt6xo"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "keccak256": "0xeefcbb8cb69f04a18f6dc61d4811133ce9aeff96ce60820f758abc52ef55b892",
        "urls": [
          "bzz-raw://81c61c0dd40890f6a4b1fb792bc5b5b61e821fcafa2aae6c7eda6d4f1ece2593",
          "dweb:/ipfs/QmRLMrq6BiPS9wGu7ZC174SFYWCu6cxbU3agDw2XgJeDpT"
        ],
        "license": "MIT"
      },
      "src/constants/Constants.sol": {
        "keccak256": "0xe09e20d591a8c9cabf6f2e44a90029fb3b2a8cdd6c09dc4105b81781ffb44546",
        "urls": [
          "bzz-raw://b3c4df8d0fd2aa770abf8b43a134ce0fc0bc3091f97ec02415d09cca09f4f940",
          "dweb:/ipfs/QmSUpMfWLN8WWhvLmbZymCdR48ZmpsuyvBnSPeAtdorxDx"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/enums/ConsensusType.sol": {
        "keccak256": "0xc5efd8c66b57dadaba4178c4b4d087b30cb84cbac38fb288a8c3b65075a9f59d",
        "urls": [
          "bzz-raw://6fcffaa8e40322ae27958603884cc07d06e9efd59cf12764f28945b7a47e11d0",
          "dweb:/ipfs/Qmc3PBovpcvj7jgVq5GwR5SkiUXBymT1tw74mvu5ccNqoZ"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/enums/Status.sol": {
        "keccak256": "0x8f5921e4df87420127988b54f67a3ccfb6fbfae767891e8ed4edbf371598e16c",
        "urls": [
          "bzz-raw://7a81d9a00ea7a2a85cfe1b2662236412dddb55e09fa70c70a34dc4dfc5ffea33",
          "dweb:/ipfs/QmRh4uA4491B2DVjrUtdfCTTtjpoXpKEp3Zz9CBYueNW1R"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/errors/IPCErrors.sol": {
        "keccak256": "0x89ee65643858f78c51c49457f6cd127c773f794bf1b70ea50bd5e59f1b48e467",
        "urls": [
          "bzz-raw://a4e9c19f69ab5bcd7ec8ac2b058a84bff7125ebc42eb195c7d8c7094c2049dec",
          "dweb:/ipfs/QmeN67eDEQefw5PS8iXk9TDzULVqK1QNA9ajzD3Z2jqxwK"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/interfaces/IGateway.sol": {
        "keccak256": "0xb4209b44c3965fd233387ece78149461bd64a47788c3af24edb7c99ea1ef8868",
        "urls": [
          "bzz-raw://4db7a4573100063387e170c55a69772b20e403444e9d97b24cc220a71a52fbbb",
          "dweb:/ipfs/QmTYsSjmFsTwuNTXBByZKueJZLpe7RwNzLRWNPxXGA3YKB"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/AccountHelper.sol": {
        "keccak256": "0xd5f3c0079e3002218c63b70b43f6e018eb5d39f064b7d4321b6409c84f6a22b5",
        "urls": [
          "bzz-raw://e5857fe645e020bc964cd53a33e1fbd4fd9d0de405170a8251cc0b040519cbdc",
          "dweb:/ipfs/QmaFUeVbA1mqn7dTJMqgX4DbKx6yzBrSkmeNTcaVjBJd9z"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibGatewayActorStorage.sol": {
        "keccak256": "0x4731b1de63c99bfccfa12c1c59481f27630994c8d04c0a555c6f6845f3873157",
        "urls": [
          "bzz-raw://641337e8c2d3876ccefdb1f181c9cfeb9568f7c015f51da668d0c2dc582773d3",
          "dweb:/ipfs/QmNzgGXzXjULKJE6iYN6ioZLJvh3ykLdwt6gTjVp7gX9f6"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibStaking.sol": {
        "keccak256": "0x3ad98b426ca82cc98fd795a166c4a599c71e9f400e3b23bda58666e2febdf3b2",
        "urls": [
          "bzz-raw://1e501014ed974118161282e81821aa05810da989a3b2091624e73327d45cab67",
          "dweb:/ipfs/QmSi2Ed42uhNoxuvdyigyhNpujEkrzc9Goe4gTbhgVuE3o"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibStakingChangeLog.sol": {
        "keccak256": "0x1ec44b7c417dae8bec87da6f1f48eb10a1eacdfb4935144dd9094dc1bbe9aa9b",
        "urls": [
          "bzz-raw://d6fcbd14fe0743c0ea0a8a8d2ea851b4864559c3553773f07d6ae708bcc83318",
          "dweb:/ipfs/QmYb6v6U27FAY4ut6gCZy6oK1MjN165RTxUGhrY6zxtg93"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibSubnetActorStorage.sol": {
        "keccak256": "0xe11ae56d18ef43fd9ebdf9350977f9a26da4ee9a3288b46b04c5b973aa231f28",
        "urls": [
          "bzz-raw://f616b61fde1528a8666d09c962d7f23a82b200229691794933f39c4d3781fc1c",
          "dweb:/ipfs/QmXQsNGv6R34wAx1fRoyMiwdtGgQVn1qDXGCr7cED92vvJ"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/priority/LibMaxPQ.sol": {
        "keccak256": "0xf98fae415e764e627134ae440dea84d6879eaaa6950868cb56382324f84ae8db",
        "urls": [
          "bzz-raw://f290b5d20ac65c22eddbadeae1b49bbe78cb9e8e0cd187c2b93f98d13f9300a2",
          "dweb:/ipfs/QmXShiVpDzD8CLn8MeWSa4fQSeiTzyBHSA1VNZtLhJgTgW"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/priority/LibMinPQ.sol": {
        "keccak256": "0xc8c27239c0e82b489d9cb61f64be28d4fde6af8d6c8b2d27180ad9c42d602110",
        "urls": [
          "bzz-raw://ed53f96d383f74c06a118ad3c8758df07b91f48dcd81769dac637d2289644796",
          "dweb:/ipfs/Qmaf4HdjTnuQZ44PRmqmWXCF3h616rhNA7uKEksPPtmxXK"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/priority/LibPQ.sol": {
        "keccak256": "0x4d4290087995d669e80f8fdd405bfaae545323393c0c54689b84965ffb87303e",
        "urls": [
          "bzz-raw://c21b563f6bf23afacb38fc97ab94d1afe12e4ad3dfde96d4484068bf26b13a2c",
          "dweb:/ipfs/Qmd5d3EnZwaSRnjG4ZFH2X8HKgymzd6vQgus8A6oEoh5pJ"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/structs/Checkpoint.sol": {
        "keccak256": "0x1982a747516dce183434bbf0e96b5b1fedbf3a90928beffcc046cadf47ee0746",
        "urls": [
          "bzz-raw://253b9df56334aae80fe4a0da805e4fdc3d186fb2624edade864ae06bfd472f2a",
          "dweb:/ipfs/QmVAaz1ViF96LjM9Aknn3vtwQ5a5oDiJRZP47ddJ1V9Fww"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/structs/FvmAddress.sol": {
        "keccak256": "0xfc8c16b96bd5b7d4a163f586bd36936f7170304de70aa487a0b11c60e5ac9069",
        "urls": [
          "bzz-raw://6b6572d5f28a9fa12ff91d45601c063cdaf68a12b9f8e46131c6dc4cd28255ac",
          "dweb:/ipfs/QmSC8gRWVuPKjobgDDyHbm2cmcPN8pWzbEmXKmdMZR8YKu"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/structs/Subnet.sol": {
        "keccak256": "0x1ddb626039baf4a4411f06b5340aaa80dcd65e9980da7673b73ab16633d871ce",
        "urls": [
          "bzz-raw://af017eef4cb46262ac29b4cf47faa1fc5d2b61970ec7d6d021eae4cf45b5577b",
          "dweb:/ipfs/QmZJiA2t934fbe62513neQYzxSNswnCRTJybp7d6X2RyWR"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "test/subnetActorMock/DefaultGatewayMock.sol": {
        "keccak256": "0x5b7bd85d2619091c3eb5fc743569fe4bd9b2449d6482fe21dde477832bad9b8d",
        "urls": [
          "bzz-raw://59aeb802eff48d8fdf083c0b1df58c44cbddf5d2ba2277001c70ad391c2d015f",
          "dweb:/ipfs/Qme1Bzsi79CUVAPYXKRhCB1XFFRmeNxhud8mPspRWUZMxV"
        ],
        "license": "MIT OR Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "test/subnetActorMock/DefaultGatewayMock.sol",
    "id": 72603,
    "exportedSymbols": {
      "Address": [
        31467
      ],
      "BottomUpCheckpoint": [
        45860
      ],
      "CrossMsg": [
        45882
      ],
      "DefaultGatewayMock": [
        72602
      ],
      "FvmAddress": [
        45906
      ],
      "IGateway": [
        38476
      ],
      "ParentFinality": [
        45843
      ],
      "SubnetID": [
        45936
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:3070:88",
    "nodes": [
      {
        "id": 72393,
        "nodeType": "PragmaDirective",
        "src": "46:23:88",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 72395,
        "nodeType": "ImportDirective",
        "src": "71:59:88",
        "nodes": [],
        "absolutePath": "src/interfaces/IGateway.sol",
        "file": "../../src/interfaces/IGateway.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 72603,
        "sourceUnit": 38477,
        "symbolAliases": [
          {
            "foreign": {
              "id": 72394,
              "name": "IGateway",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 38476,
              "src": "79:8:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 72399,
        "nodeType": "ImportDirective",
        "src": "131:94:88",
        "nodes": [],
        "absolutePath": "src/structs/Checkpoint.sol",
        "file": "../../src/structs/Checkpoint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 72603,
        "sourceUnit": 45900,
        "symbolAliases": [
          {
            "foreign": {
              "id": 72396,
              "name": "BottomUpCheckpoint",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45860,
              "src": "139:18:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 72397,
              "name": "CrossMsg",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45882,
              "src": "159:8:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 72398,
              "name": "ParentFinality",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45843,
              "src": "169:14:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 72401,
        "nodeType": "ImportDirective",
        "src": "226:54:88",
        "nodes": [],
        "absolutePath": "src/structs/Subnet.sol",
        "file": "../../src/structs/Subnet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 72603,
        "sourceUnit": 46069,
        "symbolAliases": [
          {
            "foreign": {
              "id": 72400,
              "name": "SubnetID",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45936,
              "src": "234:8:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 72403,
        "nodeType": "ImportDirective",
        "src": "281:60:88",
        "nodes": [],
        "absolutePath": "src/structs/FvmAddress.sol",
        "file": "../../src/structs/FvmAddress.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 72603,
        "sourceUnit": 45914,
        "symbolAliases": [
          {
            "foreign": {
              "id": 72402,
              "name": "FvmAddress",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 45906,
              "src": "289:10:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 72405,
        "nodeType": "ImportDirective",
        "src": "342:65:88",
        "nodes": [],
        "absolutePath": "lib/openzeppelin-contracts/contracts/utils/Address.sol",
        "file": "openzeppelin-contracts/utils/Address.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 72603,
        "sourceUnit": 31468,
        "symbolAliases": [
          {
            "foreign": {
              "id": 72404,
              "name": "Address",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 31467,
              "src": "350:7:88",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 72602,
        "nodeType": "ContractDefinition",
        "src": "409:2707:88",
        "nodes": [
          {
            "id": 72410,
            "nodeType": "UsingForDirective",
            "src": "455:34:88",
            "nodes": [],
            "global": false,
            "libraryName": {
              "id": 72408,
              "name": "Address",
              "nameLocations": [
                "461:7:88"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 31467,
              "src": "461:7:88"
            },
            "typeName": {
              "id": 72409,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "473:15:88",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            }
          },
          {
            "id": 72412,
            "nodeType": "VariableDeclaration",
            "src": "495:19:88",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "dummy",
            "nameLocation": "509:5:88",
            "scope": 72602,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 72411,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "495:5:88",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "visibility": "private"
          },
          {
            "id": 72414,
            "nodeType": "VariableDeclaration",
            "src": "520:19:88",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "subnetActor",
            "nameLocation": "528:11:88",
            "scope": 72602,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 72413,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "520:7:88",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 72435,
            "nodeType": "FunctionDefinition",
            "src": "546:260:88",
            "nodes": [],
            "body": {
              "id": 72434,
              "nodeType": "Block",
              "src": "609:197:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 72419,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "645:3:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 72421,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "649:5:88",
                    "memberName": "value",
                    "nodeType": "MemberAccess",
                    "src": "645:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 72422,
                  "nodeType": "ExpressionStatement",
                  "src": "645:9:88"
                },
                {
                  "expression": {
                    "id": 72423,
                    "name": "_genesisCircSupply",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72416,
                    "src": "691:18:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 72424,
                  "nodeType": "ExpressionStatement",
                  "src": "691:18:88"
                },
                {
                  "expression": {
                    "id": 72427,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72425,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "755:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72426,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "763:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "755:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72428,
                  "nodeType": "ExpressionStatement",
                  "src": "755:9:88"
                },
                {
                  "expression": {
                    "id": 72432,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72429,
                      "name": "subnetActor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72414,
                      "src": "775:11:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 72430,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "789:3:88",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 72431,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "793:6:88",
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "789:10:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "775:24:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 72433,
                  "nodeType": "ExpressionStatement",
                  "src": "775:24:88"
                }
              ]
            },
            "baseFunctions": [
              38396
            ],
            "functionSelector": "f207564e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "register",
            "nameLocation": "555:8:88",
            "parameters": {
              "id": 72417,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72416,
                  "mutability": "mutable",
                  "name": "_genesisCircSupply",
                  "nameLocation": "572:18:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72435,
                  "src": "564:26:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 72415,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "564:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "563:28:88"
            },
            "returnParameters": {
              "id": 72418,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "609:0:88"
            },
            "scope": 72602,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72447,
            "nodeType": "FunctionDefinition",
            "src": "812:143:88",
            "nodes": [],
            "body": {
              "id": 72446,
              "nodeType": "Block",
              "src": "849:106:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 72438,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "885:3:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 72440,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "889:5:88",
                    "memberName": "value",
                    "nodeType": "MemberAccess",
                    "src": "885:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 72441,
                  "nodeType": "ExpressionStatement",
                  "src": "885:9:88"
                },
                {
                  "expression": {
                    "id": 72444,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72442,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "939:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72443,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "947:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "939:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72445,
                  "nodeType": "ExpressionStatement",
                  "src": "939:9:88"
                }
              ]
            },
            "baseFunctions": [
              38400
            ],
            "functionSelector": "5a627dbc",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "addStake",
            "nameLocation": "821:8:88",
            "parameters": {
              "id": 72436,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "829:2:88"
            },
            "returnParameters": {
              "id": 72437,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "849:0:88"
            },
            "scope": 72602,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72467,
            "nodeType": "FunctionDefinition",
            "src": "961:199:88",
            "nodes": [],
            "body": {
              "id": 72466,
              "nodeType": "Block",
              "src": "1008:152:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72452,
                    "name": "amount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72449,
                    "src": "1044:6:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 72453,
                  "nodeType": "ExpressionStatement",
                  "src": "1044:6:88"
                },
                {
                  "expression": {
                    "id": 72456,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72454,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "1095:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72455,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1103:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1095:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72457,
                  "nodeType": "ExpressionStatement",
                  "src": "1095:9:88"
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 72463,
                        "name": "amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 72449,
                        "src": "1146:6:88",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "arguments": [
                          {
                            "id": 72460,
                            "name": "subnetActor",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 72414,
                            "src": "1123:11:88",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 72459,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "1115:8:88",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 72458,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "1115:8:88",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 72461,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1115:20:88",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      },
                      "id": 72462,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "1136:9:88",
                      "memberName": "sendValue",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 31139,
                      "src": "1115:30:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$",
                        "typeString": "function (address payable,uint256)"
                      }
                    },
                    "id": 72464,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1115:38:88",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 72465,
                  "nodeType": "ExpressionStatement",
                  "src": "1115:38:88"
                }
              ]
            },
            "baseFunctions": [
              38406
            ],
            "functionSelector": "45f54485",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "releaseStake",
            "nameLocation": "970:12:88",
            "parameters": {
              "id": 72450,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72449,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "991:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72467,
                  "src": "983:14:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 72448,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "983:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "982:16:88"
            },
            "returnParameters": {
              "id": 72451,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1008:0:88"
            },
            "scope": 72602,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72479,
            "nodeType": "FunctionDefinition",
            "src": "1166:161:88",
            "nodes": [],
            "body": {
              "id": 72478,
              "nodeType": "Block",
              "src": "1224:103:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72472,
                    "name": "amount",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72469,
                    "src": "1260:6:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 72473,
                  "nodeType": "ExpressionStatement",
                  "src": "1260:6:88"
                },
                {
                  "expression": {
                    "id": 72476,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72474,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "1311:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72475,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1319:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1311:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72477,
                  "nodeType": "ExpressionStatement",
                  "src": "1311:9:88"
                }
              ]
            },
            "baseFunctions": [
              38412
            ],
            "functionSelector": "d8e25572",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "releaseRewardForRelayer",
            "nameLocation": "1175:23:88",
            "parameters": {
              "id": 72470,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72469,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "1207:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72479,
                  "src": "1199:14:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 72468,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1199:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1198:16:88"
            },
            "returnParameters": {
              "id": 72471,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1224:0:88"
            },
            "scope": 72602,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72491,
            "nodeType": "FunctionDefinition",
            "src": "1333:132:88",
            "nodes": [],
            "body": {
              "id": 72490,
              "nodeType": "Block",
              "src": "1358:107:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 72482,
                      "name": "msg",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -15,
                      "src": "1394:3:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_magic_message",
                        "typeString": "msg"
                      }
                    },
                    "id": 72484,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberLocation": "1398:6:88",
                    "memberName": "sender",
                    "nodeType": "MemberAccess",
                    "src": "1394:10:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 72485,
                  "nodeType": "ExpressionStatement",
                  "src": "1394:10:88"
                },
                {
                  "expression": {
                    "id": 72488,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72486,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "1449:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72487,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1457:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1449:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72489,
                  "nodeType": "ExpressionStatement",
                  "src": "1449:9:88"
                }
              ]
            },
            "baseFunctions": [
              38416
            ],
            "functionSelector": "41c0e1b5",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "kill",
            "nameLocation": "1342:4:88",
            "parameters": {
              "id": 72480,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1346:2:88"
            },
            "returnParameters": {
              "id": 72481,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1358:0:88"
            },
            "scope": 72602,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72511,
            "nodeType": "FunctionDefinition",
            "src": "1618:254:88",
            "nodes": [],
            "body": {
              "id": 72510,
              "nodeType": "Block",
              "src": "1739:133:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72502,
                    "name": "bottomUpCheckpoint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72495,
                    "src": "1775:18:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BottomUpCheckpoint_$45860_calldata_ptr",
                      "typeString": "struct BottomUpCheckpoint calldata"
                    }
                  },
                  "id": 72503,
                  "nodeType": "ExpressionStatement",
                  "src": "1775:18:88"
                },
                {
                  "expression": {
                    "id": 72504,
                    "name": "messages",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72499,
                    "src": "1803:8:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_CrossMsg_$45882_calldata_ptr_$dyn_calldata_ptr",
                      "typeString": "struct CrossMsg calldata[] calldata"
                    }
                  },
                  "id": 72505,
                  "nodeType": "ExpressionStatement",
                  "src": "1803:8:88"
                },
                {
                  "expression": {
                    "id": 72508,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72506,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "1856:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72507,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1864:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1856:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72509,
                  "nodeType": "ExpressionStatement",
                  "src": "1856:9:88"
                }
              ]
            },
            "baseFunctions": [
              38427
            ],
            "documentation": {
              "id": 72492,
              "nodeType": "StructuredDocumentation",
              "src": "1471:142:88",
              "text": "CommitChildCheck propagates the commitment of a checkpoint from a child subnet,\n process the cross-messages directed to the subnet."
            },
            "functionSelector": "f456b39e",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "commitBottomUpCheckpoint",
            "nameLocation": "1627:24:88",
            "parameters": {
              "id": 72500,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72495,
                  "mutability": "mutable",
                  "name": "bottomUpCheckpoint",
                  "nameLocation": "1680:18:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72511,
                  "src": "1652:46:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BottomUpCheckpoint_$45860_calldata_ptr",
                    "typeString": "struct BottomUpCheckpoint"
                  },
                  "typeName": {
                    "id": 72494,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 72493,
                      "name": "BottomUpCheckpoint",
                      "nameLocations": [
                        "1652:18:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45860,
                      "src": "1652:18:88"
                    },
                    "referencedDeclaration": 45860,
                    "src": "1652:18:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BottomUpCheckpoint_$45860_storage_ptr",
                      "typeString": "struct BottomUpCheckpoint"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72499,
                  "mutability": "mutable",
                  "name": "messages",
                  "nameLocation": "1720:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72511,
                  "src": "1700:28:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_CrossMsg_$45882_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct CrossMsg[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 72497,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 72496,
                        "name": "CrossMsg",
                        "nameLocations": [
                          "1700:8:88"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 45882,
                        "src": "1700:8:88"
                      },
                      "referencedDeclaration": 45882,
                      "src": "1700:8:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CrossMsg_$45882_storage_ptr",
                        "typeString": "struct CrossMsg"
                      }
                    },
                    "id": 72498,
                    "nodeType": "ArrayTypeName",
                    "src": "1700:10:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_CrossMsg_$45882_storage_$dyn_storage_ptr",
                      "typeString": "struct CrossMsg[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1651:78:88"
            },
            "returnParameters": {
              "id": 72501,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1739:0:88"
            },
            "scope": 72602,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72529,
            "nodeType": "FunctionDefinition",
            "src": "1878:200:88",
            "nodes": [],
            "body": {
              "id": 72528,
              "nodeType": "Block",
              "src": "1961:117:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72520,
                    "name": "subnetId",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72514,
                    "src": "1997:8:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SubnetID_$45936_calldata_ptr",
                      "typeString": "struct SubnetID calldata"
                    }
                  },
                  "id": 72521,
                  "nodeType": "ExpressionStatement",
                  "src": "1997:8:88"
                },
                {
                  "expression": {
                    "id": 72522,
                    "name": "to",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72517,
                    "src": "2015:2:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FvmAddress_$45906_calldata_ptr",
                      "typeString": "struct FvmAddress calldata"
                    }
                  },
                  "id": 72523,
                  "nodeType": "ExpressionStatement",
                  "src": "2015:2:88"
                },
                {
                  "expression": {
                    "id": 72526,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72524,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "2062:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72525,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2070:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "2062:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72527,
                  "nodeType": "ExpressionStatement",
                  "src": "2062:9:88"
                }
              ]
            },
            "baseFunctions": [
              38437
            ],
            "functionSelector": "18f44b70",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fund",
            "nameLocation": "1887:4:88",
            "parameters": {
              "id": 72518,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72514,
                  "mutability": "mutable",
                  "name": "subnetId",
                  "nameLocation": "1910:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72529,
                  "src": "1892:26:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SubnetID_$45936_calldata_ptr",
                    "typeString": "struct SubnetID"
                  },
                  "typeName": {
                    "id": 72513,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 72512,
                      "name": "SubnetID",
                      "nameLocations": [
                        "1892:8:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45936,
                      "src": "1892:8:88"
                    },
                    "referencedDeclaration": 45936,
                    "src": "1892:8:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SubnetID_$45936_storage_ptr",
                      "typeString": "struct SubnetID"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72517,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1940:2:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72529,
                  "src": "1920:22:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FvmAddress_$45906_calldata_ptr",
                    "typeString": "struct FvmAddress"
                  },
                  "typeName": {
                    "id": 72516,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 72515,
                      "name": "FvmAddress",
                      "nameLocations": [
                        "1920:10:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45906,
                      "src": "1920:10:88"
                    },
                    "referencedDeclaration": 45906,
                    "src": "1920:10:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FvmAddress_$45906_storage_ptr",
                      "typeString": "struct FvmAddress"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1891:52:88"
            },
            "returnParameters": {
              "id": 72519,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1961:0:88"
            },
            "scope": 72602,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72542,
            "nodeType": "FunctionDefinition",
            "src": "2084:157:88",
            "nodes": [],
            "body": {
              "id": 72541,
              "nodeType": "Block",
              "src": "2142:99:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72535,
                    "name": "to",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72532,
                    "src": "2178:2:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FvmAddress_$45906_calldata_ptr",
                      "typeString": "struct FvmAddress calldata"
                    }
                  },
                  "id": 72536,
                  "nodeType": "ExpressionStatement",
                  "src": "2178:2:88"
                },
                {
                  "expression": {
                    "id": 72539,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72537,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "2225:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72538,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2233:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "2225:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72540,
                  "nodeType": "ExpressionStatement",
                  "src": "2225:9:88"
                }
              ]
            },
            "baseFunctions": [
              38444
            ],
            "functionSelector": "6b2c1eef",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "release",
            "nameLocation": "2093:7:88",
            "parameters": {
              "id": 72533,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72532,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2121:2:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72542,
                  "src": "2101:22:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FvmAddress_$45906_calldata_ptr",
                    "typeString": "struct FvmAddress"
                  },
                  "typeName": {
                    "id": 72531,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 72530,
                      "name": "FvmAddress",
                      "nameLocations": [
                        "2101:10:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45906,
                      "src": "2101:10:88"
                    },
                    "referencedDeclaration": 45906,
                    "src": "2101:10:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FvmAddress_$45906_storage_ptr",
                      "typeString": "struct FvmAddress"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2100:24:88"
            },
            "returnParameters": {
              "id": 72534,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2142:0:88"
            },
            "scope": 72602,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72555,
            "nodeType": "FunctionDefinition",
            "src": "2247:174:88",
            "nodes": [],
            "body": {
              "id": 72554,
              "nodeType": "Block",
              "src": "2316:105:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72548,
                    "name": "crossMsg",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72545,
                    "src": "2352:8:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CrossMsg_$45882_memory_ptr",
                      "typeString": "struct CrossMsg memory"
                    }
                  },
                  "id": 72549,
                  "nodeType": "ExpressionStatement",
                  "src": "2352:8:88"
                },
                {
                  "expression": {
                    "id": 72552,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72550,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "2405:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72551,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2413:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "2405:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72553,
                  "nodeType": "ExpressionStatement",
                  "src": "2405:9:88"
                }
              ]
            },
            "baseFunctions": [
              38451
            ],
            "functionSelector": "c13175ef",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "sendCrossMessage",
            "nameLocation": "2256:16:88",
            "parameters": {
              "id": 72546,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72545,
                  "mutability": "mutable",
                  "name": "crossMsg",
                  "nameLocation": "2289:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72555,
                  "src": "2273:24:88",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CrossMsg_$45882_memory_ptr",
                    "typeString": "struct CrossMsg"
                  },
                  "typeName": {
                    "id": 72544,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 72543,
                      "name": "CrossMsg",
                      "nameLocations": [
                        "2273:8:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45882,
                      "src": "2273:8:88"
                    },
                    "referencedDeclaration": 45882,
                    "src": "2273:8:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CrossMsg_$45882_storage_ptr",
                      "typeString": "struct CrossMsg"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2272:26:88"
            },
            "returnParameters": {
              "id": 72547,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2316:0:88"
            },
            "scope": 72602,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72567,
            "nodeType": "FunctionDefinition",
            "src": "2427:155:88",
            "nodes": [],
            "body": {
              "id": 72566,
              "nodeType": "Block",
              "src": "2479:103:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72560,
                    "name": "msgCid",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72557,
                    "src": "2515:6:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 72561,
                  "nodeType": "ExpressionStatement",
                  "src": "2515:6:88"
                },
                {
                  "expression": {
                    "id": 72564,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72562,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "2566:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72563,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2574:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "2566:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72565,
                  "nodeType": "ExpressionStatement",
                  "src": "2566:9:88"
                }
              ]
            },
            "baseFunctions": [
              38457
            ],
            "functionSelector": "25bf0db6",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "propagate",
            "nameLocation": "2436:9:88",
            "parameters": {
              "id": 72558,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72557,
                  "mutability": "mutable",
                  "name": "msgCid",
                  "nameLocation": "2454:6:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72567,
                  "src": "2446:14:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 72556,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2446:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2445:16:88"
            },
            "returnParameters": {
              "id": 72559,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2479:0:88"
            },
            "scope": 72602,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72580,
            "nodeType": "FunctionDefinition",
            "src": "2588:192:88",
            "nodes": [],
            "body": {
              "id": 72579,
              "nodeType": "Block",
              "src": "2675:105:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72573,
                    "name": "finality",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72570,
                    "src": "2711:8:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ParentFinality_$45843_calldata_ptr",
                      "typeString": "struct ParentFinality calldata"
                    }
                  },
                  "id": 72574,
                  "nodeType": "ExpressionStatement",
                  "src": "2711:8:88"
                },
                {
                  "expression": {
                    "id": 72577,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72575,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "2764:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72576,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "2772:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "2764:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72578,
                  "nodeType": "ExpressionStatement",
                  "src": "2764:9:88"
                }
              ]
            },
            "baseFunctions": [
              38464
            ],
            "functionSelector": "11196974",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "commitParentFinality",
            "nameLocation": "2597:20:88",
            "parameters": {
              "id": 72571,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72570,
                  "mutability": "mutable",
                  "name": "finality",
                  "nameLocation": "2651:8:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72580,
                  "src": "2627:32:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ParentFinality_$45843_calldata_ptr",
                    "typeString": "struct ParentFinality"
                  },
                  "typeName": {
                    "id": 72569,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 72568,
                      "name": "ParentFinality",
                      "nameLocations": [
                        "2627:14:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45843,
                      "src": "2627:14:88"
                    },
                    "referencedDeclaration": 45843,
                    "src": "2627:14:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ParentFinality_$45843_storage_ptr",
                      "typeString": "struct ParentFinality"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2617:48:88"
            },
            "returnParameters": {
              "id": 72572,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2675:0:88"
            },
            "scope": 72602,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 72601,
            "nodeType": "FunctionDefinition",
            "src": "2786:328:88",
            "nodes": [],
            "body": {
              "id": 72600,
              "nodeType": "Block",
              "src": "2953:161:88",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 72590,
                    "name": "checkpoint",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72583,
                    "src": "2989:10:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BottomUpCheckpoint_$45860_calldata_ptr",
                      "typeString": "struct BottomUpCheckpoint calldata"
                    }
                  },
                  "id": 72591,
                  "nodeType": "ExpressionStatement",
                  "src": "2989:10:88"
                },
                {
                  "expression": {
                    "id": 72592,
                    "name": "membershipRootHash",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72585,
                    "src": "3009:18:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 72593,
                  "nodeType": "ExpressionStatement",
                  "src": "3009:18:88"
                },
                {
                  "expression": {
                    "id": 72594,
                    "name": "membershipWeight",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 72587,
                    "src": "3037:16:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 72595,
                  "nodeType": "ExpressionStatement",
                  "src": "3037:16:88"
                },
                {
                  "expression": {
                    "id": 72598,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 72596,
                      "name": "dummy",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72412,
                      "src": "3098:5:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 72597,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "3106:1:88",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "3098:9:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 72599,
                  "nodeType": "ExpressionStatement",
                  "src": "3098:9:88"
                }
              ]
            },
            "baseFunctions": [
              38475
            ],
            "functionSelector": "a656ca5b",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "createBottomUpCheckpoint",
            "nameLocation": "2795:24:88",
            "parameters": {
              "id": 72588,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 72583,
                  "mutability": "mutable",
                  "name": "checkpoint",
                  "nameLocation": "2857:10:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72601,
                  "src": "2829:38:88",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BottomUpCheckpoint_$45860_calldata_ptr",
                    "typeString": "struct BottomUpCheckpoint"
                  },
                  "typeName": {
                    "id": 72582,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 72581,
                      "name": "BottomUpCheckpoint",
                      "nameLocations": [
                        "2829:18:88"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 45860,
                      "src": "2829:18:88"
                    },
                    "referencedDeclaration": 45860,
                    "src": "2829:18:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BottomUpCheckpoint_$45860_storage_ptr",
                      "typeString": "struct BottomUpCheckpoint"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72585,
                  "mutability": "mutable",
                  "name": "membershipRootHash",
                  "nameLocation": "2885:18:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72601,
                  "src": "2877:26:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 72584,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2877:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 72587,
                  "mutability": "mutable",
                  "name": "membershipWeight",
                  "nameLocation": "2921:16:88",
                  "nodeType": "VariableDeclaration",
                  "scope": 72601,
                  "src": "2913:24:88",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 72586,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2913:7:88",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2819:124:88"
            },
            "returnParameters": {
              "id": 72589,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2953:0:88"
            },
            "scope": 72602,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 72406,
              "name": "IGateway",
              "nameLocations": [
                "440:8:88"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 38476,
              "src": "440:8:88"
            },
            "id": 72407,
            "nodeType": "InheritanceSpecifier",
            "src": "440:8:88"
          }
        ],
        "canonicalName": "DefaultGatewayMock",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          72602,
          38476
        ],
        "name": "DefaultGatewayMock",
        "nameLocation": "418:18:88",
        "scope": 72603,
        "usedErrors": [
          31090,
          31098
        ]
      }
    ],
    "license": "MIT OR Apache-2.0"
  },
  "id": 88
}