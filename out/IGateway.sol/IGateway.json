{
  "abi": [
    {
      "inputs": [],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "root",
                  "type": "uint64"
                },
                {
                  "internalType": "address[]",
                  "name": "route",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SubnetID",
              "name": "subnetID",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "blockHeight",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nextConfigurationNumber",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "crossMessagesHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BottomUpCheckpoint",
          "name": "bottomUpCheckpoint",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "from",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "to",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes4",
                  "name": "method",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "fee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorableMsg",
              "name": "message",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "wrapped",
              "type": "bool"
            }
          ],
          "internalType": "struct CrossMsg[]",
          "name": "messages",
          "type": "tuple[]"
        }
      ],
      "name": "commitBottomUpCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ParentFinality",
          "name": "finality",
          "type": "tuple"
        }
      ],
      "name": "commitParentFinality",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint64",
                  "name": "root",
                  "type": "uint64"
                },
                {
                  "internalType": "address[]",
                  "name": "route",
                  "type": "address[]"
                }
              ],
              "internalType": "struct SubnetID",
              "name": "subnetID",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "blockHeight",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "blockHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nextConfigurationNumber",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "crossMessagesHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BottomUpCheckpoint",
          "name": "checkpoint",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "membershipRootHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "membershipWeight",
          "type": "uint256"
        }
      ],
      "name": "createBottomUpCheckpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "root",
              "type": "uint64"
            },
            {
              "internalType": "address[]",
              "name": "route",
              "type": "address[]"
            }
          ],
          "internalType": "struct SubnetID",
          "name": "subnetId",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "addrType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct FvmAddress",
          "name": "to",
          "type": "tuple"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "msgCid",
          "type": "bytes32"
        }
      ],
      "name": "propagate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "genesisCircSupply",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "addrType",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "payload",
              "type": "bytes"
            }
          ],
          "internalType": "struct FvmAddress",
          "name": "to",
          "type": "tuple"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseRewardForRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "from",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint64",
                          "name": "root",
                          "type": "uint64"
                        },
                        {
                          "internalType": "address[]",
                          "name": "route",
                          "type": "address[]"
                        }
                      ],
                      "internalType": "struct SubnetID",
                      "name": "subnetId",
                      "type": "tuple"
                    },
                    {
                      "components": [
                        {
                          "internalType": "uint8",
                          "name": "addrType",
                          "type": "uint8"
                        },
                        {
                          "internalType": "bytes",
                          "name": "payload",
                          "type": "bytes"
                        }
                      ],
                      "internalType": "struct FvmAddress",
                      "name": "rawAddress",
                      "type": "tuple"
                    }
                  ],
                  "internalType": "struct IPCAddress",
                  "name": "to",
                  "type": "tuple"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint64",
                  "name": "nonce",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes4",
                  "name": "method",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "params",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "fee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorableMsg",
              "name": "message",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "wrapped",
              "type": "bool"
            }
          ],
          "internalType": "struct CrossMsg",
          "name": "crossMsg",
          "type": "tuple"
        }
      ],
      "name": "sendCrossMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "addStake()": "5a627dbc",
    "commitBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[])": "f456b39e",
    "commitParentFinality((uint256,bytes32))": "11196974",
    "createBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),bytes32,uint256)": "a656ca5b",
    "fund((uint64,address[]),(uint8,bytes))": "18f44b70",
    "kill()": "41c0e1b5",
    "propagate(bytes32)": "25bf0db6",
    "register(uint256)": "f207564e",
    "release((uint8,bytes))": "6b2c1eef",
    "releaseRewardForRelayer(uint256)": "d8e25572",
    "releaseStake(uint256)": "45f54485",
    "sendCrossMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))": "c13175ef"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetID\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextConfigurationNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"crossMessagesHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct BottomUpCheckpoint\",\"name\":\"bottomUpCheckpoint\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct StorableMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"}],\"internalType\":\"struct CrossMsg[]\",\"name\":\"messages\",\"type\":\"tuple[]\"}],\"name\":\"commitBottomUpCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ParentFinality\",\"name\":\"finality\",\"type\":\"tuple\"}],\"name\":\"commitParentFinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetID\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"blockHeight\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextConfigurationNumber\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"crossMessagesHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct BottomUpCheckpoint\",\"name\":\"checkpoint\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"membershipRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"membershipWeight\",\"type\":\"uint256\"}],\"name\":\"createBottomUpCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgCid\",\"type\":\"bytes32\"}],\"name\":\"propagate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"genesisCircSupply\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseRewardForRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct StorableMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"}],\"internalType\":\"struct CrossMsg\",\"name\":\"crossMsg\",\"type\":\"tuple\"}],\"name\":\"sendCrossMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"LimeChain team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Gateway interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake()\":{\"notice\":\"AddStake adds stake to the collateral of a subnet.\"},\"commitBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[])\":{\"notice\":\"commitBottomUpCheckpoint propagates the commitment of a checkpoint from a child subnet and processes the cross-messages directed to the subnets.\"},\"commitParentFinality((uint256,bytes32))\":{\"notice\":\"commit the ipc parent finality into storage\"},\"createBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),bytes32,uint256)\":{\"notice\":\"creates a new bottom-up checkpoint\"},\"fund((uint64,address[]),(uint8,bytes))\":{\"notice\":\"Fund injects new funds from an account of the parent chain to a subnet. This functions receives a transaction with the FILs that want to be injected in the subnet. - Funds injected are frozen. - A new fund cross-message is created and stored to propagate it to the subnet. It will be picked up by miners to include it in the next possible block. - The cross-message nonce is updated\"},\"kill()\":{\"notice\":\"Kill propagates the kill signal from a subnet actor to unregister it from th hierarchy.\"},\"propagate(bytes32)\":{\"notice\":\"Propagates the stored postbox item for the given cid\"},\"register(uint256)\":{\"notice\":\"Register is called by subnet actors to put the required collateral and register the subnet to the hierarchy.\"},\"release((uint8,bytes))\":{\"notice\":\"Release creates a new check message to release funds in parent chain This function burns the funds that will be released in the current subnet and propagates a new checkpoint message to the parent chain to signal the amount of funds that can be released for a specific address.\"},\"releaseRewardForRelayer(uint256)\":{\"notice\":\"Release reward for relayer\"},\"releaseStake(uint256)\":{\"notice\":\"Release stake recovers some collateral of the subnet\"},\"sendCrossMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))\":{\"notice\":\"SendCrossMessage sends an arbitrary cross-message to other subnet in the hierarchy. If the message includes any funds they need to be burnt (like in Release) before being propagated to the corresponding subnet. The circulating supply in each subnet needs to be updated as the message passes through them. Params expect a raw message without any subnet context (the IPC address is included in the message by the actor). Only actors are allowed to send arbitrary cross-messages as a side-effect of their execution. For plain token exchanges fund and release have to be used.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IGateway.sol\":\"IGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":elliptic-curve-solidity/=lib/elliptic-curve-solidity/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":fevmate/=lib/fevmate/contracts/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/fevmate/contracts/utils/FilAddress.sol\":{\"keccak256\":\"0x8707b4f152e92b852090c313419c0dc772eebf4428472a0659dd6b13dd6bee31\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://442fc3cb02e610424f0599f4cc519e4fbead47da09911697b62208a2ae51e4a7\",\"dweb:/ipfs/QmRpKJ9tWWTHgMpRB18DHJLbCT4YT9yp2G89H9mHGu5ss2\"]},\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13ff04f87357176e2b267730f288013269eefce0862ea8f4bf3f420948eb7d5\",\"dweb:/ipfs/QmQZRjF3CdCdoUvqhrT9KXYjrjmdmFQqENtuiHTMbyt6xo\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0xeefcbb8cb69f04a18f6dc61d4811133ce9aeff96ce60820f758abc52ef55b892\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://81c61c0dd40890f6a4b1fb792bc5b5b61e821fcafa2aae6c7eda6d4f1ece2593\",\"dweb:/ipfs/QmRLMrq6BiPS9wGu7ZC174SFYWCu6cxbU3agDw2XgJeDpT\"]},\"src/constants/Constants.sol\":{\"keccak256\":\"0xe09e20d591a8c9cabf6f2e44a90029fb3b2a8cdd6c09dc4105b81781ffb44546\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://b3c4df8d0fd2aa770abf8b43a134ce0fc0bc3091f97ec02415d09cca09f4f940\",\"dweb:/ipfs/QmSUpMfWLN8WWhvLmbZymCdR48ZmpsuyvBnSPeAtdorxDx\"]},\"src/enums/ConsensusType.sol\":{\"keccak256\":\"0xc5efd8c66b57dadaba4178c4b4d087b30cb84cbac38fb288a8c3b65075a9f59d\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://6fcffaa8e40322ae27958603884cc07d06e9efd59cf12764f28945b7a47e11d0\",\"dweb:/ipfs/Qmc3PBovpcvj7jgVq5GwR5SkiUXBymT1tw74mvu5ccNqoZ\"]},\"src/enums/Status.sol\":{\"keccak256\":\"0x8f5921e4df87420127988b54f67a3ccfb6fbfae767891e8ed4edbf371598e16c\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://7a81d9a00ea7a2a85cfe1b2662236412dddb55e09fa70c70a34dc4dfc5ffea33\",\"dweb:/ipfs/QmRh4uA4491B2DVjrUtdfCTTtjpoXpKEp3Zz9CBYueNW1R\"]},\"src/errors/IPCErrors.sol\":{\"keccak256\":\"0x3c5eef277d0386c1edbb7f55f454c81f23b3a86c0c113c1ce474da04348575de\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://5bddc2487c518086fde2542564cf0eda4bfdd5cc4c7a2b892474b85cc48b9d4b\",\"dweb:/ipfs/QmZz3F1FU4Efq7s4TSdGEGimhKrvVRi8ngPmUdvEq4AL8r\"]},\"src/interfaces/IGateway.sol\":{\"keccak256\":\"0xb4209b44c3965fd233387ece78149461bd64a47788c3af24edb7c99ea1ef8868\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://4db7a4573100063387e170c55a69772b20e403444e9d97b24cc220a71a52fbbb\",\"dweb:/ipfs/QmTYsSjmFsTwuNTXBByZKueJZLpe7RwNzLRWNPxXGA3YKB\"]},\"src/lib/AccountHelper.sol\":{\"keccak256\":\"0xd5f3c0079e3002218c63b70b43f6e018eb5d39f064b7d4321b6409c84f6a22b5\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://e5857fe645e020bc964cd53a33e1fbd4fd9d0de405170a8251cc0b040519cbdc\",\"dweb:/ipfs/QmaFUeVbA1mqn7dTJMqgX4DbKx6yzBrSkmeNTcaVjBJd9z\"]},\"src/lib/LibGatewayActorStorage.sol\":{\"keccak256\":\"0x88f2124aa3843fefae87d50af505872389399fd75223f14bf1f5d6350cf25af7\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://228a4dfe0514a271f08967cdeb09435bcce23becc3e195526e8cc51291334f31\",\"dweb:/ipfs/QmQX7KGm38gjfH2tP5gGAYQFT1RpMUpnMA47y3WaXvzMLq\"]},\"src/lib/LibStaking.sol\":{\"keccak256\":\"0x343edbc3ec1abbfdd217379f67b69a7f85a80a16b7e9710cf83e27176a0c4eb9\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://634b83bf09c42887727f6771efad7fe752ffce16643518911324f65c453ca427\",\"dweb:/ipfs/QmRBrC5j3CUuAYFnZVdjHV3UBtJKvgm1K38eG7aYAYAPWe\"]},\"src/lib/LibStakingChangeLog.sol\":{\"keccak256\":\"0x1ec44b7c417dae8bec87da6f1f48eb10a1eacdfb4935144dd9094dc1bbe9aa9b\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://d6fcbd14fe0743c0ea0a8a8d2ea851b4864559c3553773f07d6ae708bcc83318\",\"dweb:/ipfs/QmYb6v6U27FAY4ut6gCZy6oK1MjN165RTxUGhrY6zxtg93\"]},\"src/lib/LibSubnetActorStorage.sol\":{\"keccak256\":\"0xe11ae56d18ef43fd9ebdf9350977f9a26da4ee9a3288b46b04c5b973aa231f28\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://f616b61fde1528a8666d09c962d7f23a82b200229691794933f39c4d3781fc1c\",\"dweb:/ipfs/QmXQsNGv6R34wAx1fRoyMiwdtGgQVn1qDXGCr7cED92vvJ\"]},\"src/lib/priority/LibMaxPQ.sol\":{\"keccak256\":\"0xa5e251a61b85763e7f427a9e4880654eb6070a262ed0a062cd6b0dee9ff9ee43\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://351b3913af3db39b5c019733ae2db840bdc65280615ffd6dab4db5a5ac9f8e66\",\"dweb:/ipfs/QmaxL7DEGjY82Zd1G6WyhC1zLoLwfQNMPag867bEWn6MAF\"]},\"src/lib/priority/LibMinPQ.sol\":{\"keccak256\":\"0x64a2b2cd7cb7c472d82362f2f66b6fd1618c1c83afcddb13ede0b51bb1712a8f\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://a2229ecb94941f27f802cad254fe46aa2c374ebd9acf03fc27f3501345e26e27\",\"dweb:/ipfs/Qmd8sGA66TW5RidR9jCxWaS8U9KDby5RdYgyZxob2aeDx6\"]},\"src/lib/priority/LibPQ.sol\":{\"keccak256\":\"0x4d4290087995d669e80f8fdd405bfaae545323393c0c54689b84965ffb87303e\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://c21b563f6bf23afacb38fc97ab94d1afe12e4ad3dfde96d4484068bf26b13a2c\",\"dweb:/ipfs/Qmd5d3EnZwaSRnjG4ZFH2X8HKgymzd6vQgus8A6oEoh5pJ\"]},\"src/structs/Checkpoint.sol\":{\"keccak256\":\"0x1982a747516dce183434bbf0e96b5b1fedbf3a90928beffcc046cadf47ee0746\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://253b9df56334aae80fe4a0da805e4fdc3d186fb2624edade864ae06bfd472f2a\",\"dweb:/ipfs/QmVAaz1ViF96LjM9Aknn3vtwQ5a5oDiJRZP47ddJ1V9Fww\"]},\"src/structs/FvmAddress.sol\":{\"keccak256\":\"0xfc8c16b96bd5b7d4a163f586bd36936f7170304de70aa487a0b11c60e5ac9069\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://6b6572d5f28a9fa12ff91d45601c063cdaf68a12b9f8e46131c6dc4cd28255ac\",\"dweb:/ipfs/QmSC8gRWVuPKjobgDDyHbm2cmcPN8pWzbEmXKmdMZR8YKu\"]},\"src/structs/Subnet.sol\":{\"keccak256\":\"0x1ddb626039baf4a4411f06b5340aaa80dcd65e9980da7673b73ab16633d871ce\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://af017eef4cb46262ac29b4cf47faa1fc5d2b61970ec7d6d021eae4cf45b5577b\",\"dweb:/ipfs/QmZJiA2t934fbe62513neQYzxSNswnCRTJybp7d6X2RyWR\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "payable",
          "type": "function",
          "name": "addStake"
        },
        {
          "inputs": [
            {
              "internalType": "struct BottomUpCheckpoint",
              "name": "bottomUpCheckpoint",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct SubnetID",
                  "name": "subnetID",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "root",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "route",
                      "type": "address[]"
                    }
                  ]
                },
                {
                  "internalType": "uint64",
                  "name": "blockHeight",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "nextConfigurationNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "crossMessagesHash",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "struct CrossMsg[]",
              "name": "messages",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "struct StorableMsg",
                  "name": "message",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "struct IPCAddress",
                      "name": "from",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "struct IPCAddress",
                      "name": "to",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint64",
                      "name": "nonce",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "method",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "params",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "fee",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bool",
                  "name": "wrapped",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitBottomUpCheckpoint"
        },
        {
          "inputs": [
            {
              "internalType": "struct ParentFinality",
              "name": "finality",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint256",
                  "name": "height",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "commitParentFinality"
        },
        {
          "inputs": [
            {
              "internalType": "struct BottomUpCheckpoint",
              "name": "checkpoint",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct SubnetID",
                  "name": "subnetID",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "uint64",
                      "name": "root",
                      "type": "uint64"
                    },
                    {
                      "internalType": "address[]",
                      "name": "route",
                      "type": "address[]"
                    }
                  ]
                },
                {
                  "internalType": "uint64",
                  "name": "blockHeight",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "blockHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint64",
                  "name": "nextConfigurationNumber",
                  "type": "uint64"
                },
                {
                  "internalType": "bytes32",
                  "name": "crossMessagesHash",
                  "type": "bytes32"
                }
              ]
            },
            {
              "internalType": "bytes32",
              "name": "membershipRootHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "membershipWeight",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "createBottomUpCheckpoint"
        },
        {
          "inputs": [
            {
              "internalType": "struct SubnetID",
              "name": "subnetId",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "root",
                  "type": "uint64"
                },
                {
                  "internalType": "address[]",
                  "name": "route",
                  "type": "address[]"
                }
              ]
            },
            {
              "internalType": "struct FvmAddress",
              "name": "to",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "addrType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "payload",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "fund"
        },
        {
          "inputs": [],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "kill"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "msgCid",
              "type": "bytes32"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "propagate"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "genesisCircSupply",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "register"
        },
        {
          "inputs": [
            {
              "internalType": "struct FvmAddress",
              "name": "to",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint8",
                  "name": "addrType",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "payload",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "release"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "releaseRewardForRelayer"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "releaseStake"
        },
        {
          "inputs": [
            {
              "internalType": "struct CrossMsg",
              "name": "crossMsg",
              "type": "tuple",
              "components": [
                {
                  "internalType": "struct StorableMsg",
                  "name": "message",
                  "type": "tuple",
                  "components": [
                    {
                      "internalType": "struct IPCAddress",
                      "name": "from",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "struct IPCAddress",
                      "name": "to",
                      "type": "tuple",
                      "components": [
                        {
                          "internalType": "struct SubnetID",
                          "name": "subnetId",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint64",
                              "name": "root",
                              "type": "uint64"
                            },
                            {
                              "internalType": "address[]",
                              "name": "route",
                              "type": "address[]"
                            }
                          ]
                        },
                        {
                          "internalType": "struct FvmAddress",
                          "name": "rawAddress",
                          "type": "tuple",
                          "components": [
                            {
                              "internalType": "uint8",
                              "name": "addrType",
                              "type": "uint8"
                            },
                            {
                              "internalType": "bytes",
                              "name": "payload",
                              "type": "bytes"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint64",
                      "name": "nonce",
                      "type": "uint64"
                    },
                    {
                      "internalType": "bytes4",
                      "name": "method",
                      "type": "bytes4"
                    },
                    {
                      "internalType": "bytes",
                      "name": "params",
                      "type": "bytes"
                    },
                    {
                      "internalType": "uint256",
                      "name": "fee",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "bool",
                  "name": "wrapped",
                  "type": "bool"
                }
              ]
            }
          ],
          "stateMutability": "payable",
          "type": "function",
          "name": "sendCrossMessage"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {},
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addStake()": {
            "notice": "AddStake adds stake to the collateral of a subnet."
          },
          "commitBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[])": {
            "notice": "commitBottomUpCheckpoint propagates the commitment of a checkpoint from a child subnet and processes the cross-messages directed to the subnets."
          },
          "commitParentFinality((uint256,bytes32))": {
            "notice": "commit the ipc parent finality into storage"
          },
          "createBottomUpCheckpoint(((uint64,address[]),uint64,bytes32,uint64,bytes32),bytes32,uint256)": {
            "notice": "creates a new bottom-up checkpoint"
          },
          "fund((uint64,address[]),(uint8,bytes))": {
            "notice": "Fund injects new funds from an account of the parent chain to a subnet. This functions receives a transaction with the FILs that want to be injected in the subnet. - Funds injected are frozen. - A new fund cross-message is created and stored to propagate it to the subnet. It will be picked up by miners to include it in the next possible block. - The cross-message nonce is updated"
          },
          "kill()": {
            "notice": "Kill propagates the kill signal from a subnet actor to unregister it from th hierarchy."
          },
          "propagate(bytes32)": {
            "notice": "Propagates the stored postbox item for the given cid"
          },
          "register(uint256)": {
            "notice": "Register is called by subnet actors to put the required collateral and register the subnet to the hierarchy."
          },
          "release((uint8,bytes))": {
            "notice": "Release creates a new check message to release funds in parent chain This function burns the funds that will be released in the current subnet and propagates a new checkpoint message to the parent chain to signal the amount of funds that can be released for a specific address."
          },
          "releaseRewardForRelayer(uint256)": {
            "notice": "Release reward for relayer"
          },
          "releaseStake(uint256)": {
            "notice": "Release stake recovers some collateral of the subnet"
          },
          "sendCrossMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))": {
            "notice": "SendCrossMessage sends an arbitrary cross-message to other subnet in the hierarchy. If the message includes any funds they need to be burnt (like in Release) before being propagated to the corresponding subnet. The circulating supply in each subnet needs to be updated as the message passes through them. Params expect a raw message without any subnet context (the IPC address is included in the message by the actor). Only actors are allowed to send arbitrary cross-messages as a side-effect of their execution. For plain token exchanges fund and release have to be used."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "elliptic-curve-solidity/=lib/elliptic-curve-solidity/",
        "erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/",
        "fevmate/=lib/fevmate/contracts/",
        "forge-std/=lib/forge-std/src/",
        "murky/=lib/murky/src/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/",
        "openzeppelin/=lib/openzeppelin-contracts/contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/interfaces/IGateway.sol": "IGateway"
      },
      "libraries": {},
      "viaIR": true
    },
    "sources": {
      "lib/fevmate/contracts/utils/FilAddress.sol": {
        "keccak256": "0x8707b4f152e92b852090c313419c0dc772eebf4428472a0659dd6b13dd6bee31",
        "urls": [
          "bzz-raw://442fc3cb02e610424f0599f4cc519e4fbead47da09911697b62208a2ae51e4a7",
          "dweb:/ipfs/QmRpKJ9tWWTHgMpRB18DHJLbCT4YT9yp2G89H9mHGu5ss2"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
        "keccak256": "0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1",
        "urls": [
          "bzz-raw://c13ff04f87357176e2b267730f288013269eefce0862ea8f4bf3f420948eb7d5",
          "dweb:/ipfs/QmQZRjF3CdCdoUvqhrT9KXYjrjmdmFQqENtuiHTMbyt6xo"
        ],
        "license": "MIT"
      },
      "lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol": {
        "keccak256": "0xeefcbb8cb69f04a18f6dc61d4811133ce9aeff96ce60820f758abc52ef55b892",
        "urls": [
          "bzz-raw://81c61c0dd40890f6a4b1fb792bc5b5b61e821fcafa2aae6c7eda6d4f1ece2593",
          "dweb:/ipfs/QmRLMrq6BiPS9wGu7ZC174SFYWCu6cxbU3agDw2XgJeDpT"
        ],
        "license": "MIT"
      },
      "src/constants/Constants.sol": {
        "keccak256": "0xe09e20d591a8c9cabf6f2e44a90029fb3b2a8cdd6c09dc4105b81781ffb44546",
        "urls": [
          "bzz-raw://b3c4df8d0fd2aa770abf8b43a134ce0fc0bc3091f97ec02415d09cca09f4f940",
          "dweb:/ipfs/QmSUpMfWLN8WWhvLmbZymCdR48ZmpsuyvBnSPeAtdorxDx"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/enums/ConsensusType.sol": {
        "keccak256": "0xc5efd8c66b57dadaba4178c4b4d087b30cb84cbac38fb288a8c3b65075a9f59d",
        "urls": [
          "bzz-raw://6fcffaa8e40322ae27958603884cc07d06e9efd59cf12764f28945b7a47e11d0",
          "dweb:/ipfs/Qmc3PBovpcvj7jgVq5GwR5SkiUXBymT1tw74mvu5ccNqoZ"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/enums/Status.sol": {
        "keccak256": "0x8f5921e4df87420127988b54f67a3ccfb6fbfae767891e8ed4edbf371598e16c",
        "urls": [
          "bzz-raw://7a81d9a00ea7a2a85cfe1b2662236412dddb55e09fa70c70a34dc4dfc5ffea33",
          "dweb:/ipfs/QmRh4uA4491B2DVjrUtdfCTTtjpoXpKEp3Zz9CBYueNW1R"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/errors/IPCErrors.sol": {
        "keccak256": "0x3c5eef277d0386c1edbb7f55f454c81f23b3a86c0c113c1ce474da04348575de",
        "urls": [
          "bzz-raw://5bddc2487c518086fde2542564cf0eda4bfdd5cc4c7a2b892474b85cc48b9d4b",
          "dweb:/ipfs/QmZz3F1FU4Efq7s4TSdGEGimhKrvVRi8ngPmUdvEq4AL8r"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/interfaces/IGateway.sol": {
        "keccak256": "0xb4209b44c3965fd233387ece78149461bd64a47788c3af24edb7c99ea1ef8868",
        "urls": [
          "bzz-raw://4db7a4573100063387e170c55a69772b20e403444e9d97b24cc220a71a52fbbb",
          "dweb:/ipfs/QmTYsSjmFsTwuNTXBByZKueJZLpe7RwNzLRWNPxXGA3YKB"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/AccountHelper.sol": {
        "keccak256": "0xd5f3c0079e3002218c63b70b43f6e018eb5d39f064b7d4321b6409c84f6a22b5",
        "urls": [
          "bzz-raw://e5857fe645e020bc964cd53a33e1fbd4fd9d0de405170a8251cc0b040519cbdc",
          "dweb:/ipfs/QmaFUeVbA1mqn7dTJMqgX4DbKx6yzBrSkmeNTcaVjBJd9z"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibGatewayActorStorage.sol": {
        "keccak256": "0x88f2124aa3843fefae87d50af505872389399fd75223f14bf1f5d6350cf25af7",
        "urls": [
          "bzz-raw://228a4dfe0514a271f08967cdeb09435bcce23becc3e195526e8cc51291334f31",
          "dweb:/ipfs/QmQX7KGm38gjfH2tP5gGAYQFT1RpMUpnMA47y3WaXvzMLq"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibStaking.sol": {
        "keccak256": "0x343edbc3ec1abbfdd217379f67b69a7f85a80a16b7e9710cf83e27176a0c4eb9",
        "urls": [
          "bzz-raw://634b83bf09c42887727f6771efad7fe752ffce16643518911324f65c453ca427",
          "dweb:/ipfs/QmRBrC5j3CUuAYFnZVdjHV3UBtJKvgm1K38eG7aYAYAPWe"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibStakingChangeLog.sol": {
        "keccak256": "0x1ec44b7c417dae8bec87da6f1f48eb10a1eacdfb4935144dd9094dc1bbe9aa9b",
        "urls": [
          "bzz-raw://d6fcbd14fe0743c0ea0a8a8d2ea851b4864559c3553773f07d6ae708bcc83318",
          "dweb:/ipfs/QmYb6v6U27FAY4ut6gCZy6oK1MjN165RTxUGhrY6zxtg93"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/LibSubnetActorStorage.sol": {
        "keccak256": "0xe11ae56d18ef43fd9ebdf9350977f9a26da4ee9a3288b46b04c5b973aa231f28",
        "urls": [
          "bzz-raw://f616b61fde1528a8666d09c962d7f23a82b200229691794933f39c4d3781fc1c",
          "dweb:/ipfs/QmXQsNGv6R34wAx1fRoyMiwdtGgQVn1qDXGCr7cED92vvJ"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/priority/LibMaxPQ.sol": {
        "keccak256": "0xa5e251a61b85763e7f427a9e4880654eb6070a262ed0a062cd6b0dee9ff9ee43",
        "urls": [
          "bzz-raw://351b3913af3db39b5c019733ae2db840bdc65280615ffd6dab4db5a5ac9f8e66",
          "dweb:/ipfs/QmaxL7DEGjY82Zd1G6WyhC1zLoLwfQNMPag867bEWn6MAF"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/priority/LibMinPQ.sol": {
        "keccak256": "0x64a2b2cd7cb7c472d82362f2f66b6fd1618c1c83afcddb13ede0b51bb1712a8f",
        "urls": [
          "bzz-raw://a2229ecb94941f27f802cad254fe46aa2c374ebd9acf03fc27f3501345e26e27",
          "dweb:/ipfs/Qmd8sGA66TW5RidR9jCxWaS8U9KDby5RdYgyZxob2aeDx6"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/lib/priority/LibPQ.sol": {
        "keccak256": "0x4d4290087995d669e80f8fdd405bfaae545323393c0c54689b84965ffb87303e",
        "urls": [
          "bzz-raw://c21b563f6bf23afacb38fc97ab94d1afe12e4ad3dfde96d4484068bf26b13a2c",
          "dweb:/ipfs/Qmd5d3EnZwaSRnjG4ZFH2X8HKgymzd6vQgus8A6oEoh5pJ"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/structs/Checkpoint.sol": {
        "keccak256": "0x1982a747516dce183434bbf0e96b5b1fedbf3a90928beffcc046cadf47ee0746",
        "urls": [
          "bzz-raw://253b9df56334aae80fe4a0da805e4fdc3d186fb2624edade864ae06bfd472f2a",
          "dweb:/ipfs/QmVAaz1ViF96LjM9Aknn3vtwQ5a5oDiJRZP47ddJ1V9Fww"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/structs/FvmAddress.sol": {
        "keccak256": "0xfc8c16b96bd5b7d4a163f586bd36936f7170304de70aa487a0b11c60e5ac9069",
        "urls": [
          "bzz-raw://6b6572d5f28a9fa12ff91d45601c063cdaf68a12b9f8e46131c6dc4cd28255ac",
          "dweb:/ipfs/QmSC8gRWVuPKjobgDDyHbm2cmcPN8pWzbEmXKmdMZR8YKu"
        ],
        "license": "MIT OR Apache-2.0"
      },
      "src/structs/Subnet.sol": {
        "keccak256": "0x1ddb626039baf4a4411f06b5340aaa80dcd65e9980da7673b73ab16633d871ce",
        "urls": [
          "bzz-raw://af017eef4cb46262ac29b4cf47faa1fc5d2b61970ec7d6d021eae4cf45b5577b",
          "dweb:/ipfs/QmZJiA2t934fbe62513neQYzxSNswnCRTJybp7d6X2RyWR"
        ],
        "license": "MIT OR Apache-2.0"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/interfaces/IGateway.sol",
    "id": 39618,
    "exportedSymbols": {
      "BottomUpCheckpoint": [
        47074
      ],
      "CrossMsg": [
        47096
      ],
      "FvmAddress": [
        47120
      ],
      "IGateway": [
        39617
      ],
      "ParentFinality": [
        47057
      ],
      "SubnetID": [
        47150
      ]
    },
    "nodeType": "SourceUnit",
    "src": "46:3439:53",
    "nodes": [
      {
        "id": 39522,
        "nodeType": "PragmaDirective",
        "src": "46:23:53",
        "nodes": [],
        "literals": [
          "solidity",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 39526,
        "nodeType": "ImportDirective",
        "src": "71:87:53",
        "nodes": [],
        "absolutePath": "src/structs/Checkpoint.sol",
        "file": "../structs/Checkpoint.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39618,
        "sourceUnit": 47114,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39523,
              "name": "BottomUpCheckpoint",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 47074,
              "src": "79:18:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 39524,
              "name": "CrossMsg",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 47096,
              "src": "99:8:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 39525,
              "name": "ParentFinality",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 47057,
              "src": "109:14:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39528,
        "nodeType": "ImportDirective",
        "src": "159:47:53",
        "nodes": [],
        "absolutePath": "src/structs/Subnet.sol",
        "file": "../structs/Subnet.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39618,
        "sourceUnit": 47283,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39527,
              "name": "SubnetID",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 47150,
              "src": "167:8:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39530,
        "nodeType": "ImportDirective",
        "src": "207:53:53",
        "nodes": [],
        "absolutePath": "src/structs/FvmAddress.sol",
        "file": "../structs/FvmAddress.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 39618,
        "sourceUnit": 47128,
        "symbolAliases": [
          {
            "foreign": {
              "id": 39529,
              "name": "FvmAddress",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 47120,
              "src": "215:10:53",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 39617,
        "nodeType": "ContractDefinition",
        "src": "318:3166:53",
        "nodes": [
          {
            "id": 39537,
            "nodeType": "FunctionDefinition",
            "src": "476:62:53",
            "nodes": [],
            "documentation": {
              "id": 39532,
              "nodeType": "StructuredDocumentation",
              "src": "343:128:53",
              "text": "@notice Register is called by subnet actors to put the required collateral\n and register the subnet to the hierarchy."
            },
            "functionSelector": "f207564e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "register",
            "nameLocation": "485:8:53",
            "parameters": {
              "id": 39535,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39534,
                  "mutability": "mutable",
                  "name": "genesisCircSupply",
                  "nameLocation": "502:17:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39537,
                  "src": "494:25:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39533,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "494:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "493:27:53"
            },
            "returnParameters": {
              "id": 39536,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "537:0:53"
            },
            "scope": 39617,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39541,
            "nodeType": "FunctionDefinition",
            "src": "611:37:53",
            "nodes": [],
            "documentation": {
              "id": 39538,
              "nodeType": "StructuredDocumentation",
              "src": "544:62:53",
              "text": "@notice AddStake adds stake to the collateral of a subnet."
            },
            "functionSelector": "5a627dbc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addStake",
            "nameLocation": "620:8:53",
            "parameters": {
              "id": 39539,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "628:2:53"
            },
            "returnParameters": {
              "id": 39540,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "647:0:53"
            },
            "scope": 39617,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39547,
            "nodeType": "FunctionDefinition",
            "src": "723:47:53",
            "nodes": [],
            "documentation": {
              "id": 39542,
              "nodeType": "StructuredDocumentation",
              "src": "654:64:53",
              "text": "@notice Release stake recovers some collateral of the subnet"
            },
            "functionSelector": "45f54485",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "releaseStake",
            "nameLocation": "732:12:53",
            "parameters": {
              "id": 39545,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39544,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "753:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39547,
                  "src": "745:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39543,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "745:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "744:16:53"
            },
            "returnParameters": {
              "id": 39546,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "769:0:53"
            },
            "scope": 39617,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39553,
            "nodeType": "FunctionDefinition",
            "src": "819:58:53",
            "nodes": [],
            "documentation": {
              "id": 39548,
              "nodeType": "StructuredDocumentation",
              "src": "776:38:53",
              "text": "@notice Release reward for relayer"
            },
            "functionSelector": "d8e25572",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "releaseRewardForRelayer",
            "nameLocation": "828:23:53",
            "parameters": {
              "id": 39551,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39550,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "860:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39553,
                  "src": "852:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39549,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "852:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "851:16:53"
            },
            "returnParameters": {
              "id": 39552,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "876:0:53"
            },
            "scope": 39617,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39557,
            "nodeType": "FunctionDefinition",
            "src": "995:25:53",
            "nodes": [],
            "documentation": {
              "id": 39554,
              "nodeType": "StructuredDocumentation",
              "src": "883:107:53",
              "text": "@notice Kill propagates the kill signal from a subnet actor to unregister it from th\n hierarchy."
            },
            "functionSelector": "41c0e1b5",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "kill",
            "nameLocation": "1004:4:53",
            "parameters": {
              "id": 39555,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1008:2:53"
            },
            "returnParameters": {
              "id": 39556,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1019:0:53"
            },
            "scope": 39617,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39568,
            "nodeType": "FunctionDefinition",
            "src": "1195:143:53",
            "nodes": [],
            "documentation": {
              "id": 39558,
              "nodeType": "StructuredDocumentation",
              "src": "1026:164:53",
              "text": "@notice commitBottomUpCheckpoint propagates the commitment of a checkpoint from a child subnet and\n processes the cross-messages directed to the subnets."
            },
            "functionSelector": "f456b39e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "commitBottomUpCheckpoint",
            "nameLocation": "1204:24:53",
            "parameters": {
              "id": 39566,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39561,
                  "mutability": "mutable",
                  "name": "bottomUpCheckpoint",
                  "nameLocation": "1266:18:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39568,
                  "src": "1238:46:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BottomUpCheckpoint_$47074_calldata_ptr",
                    "typeString": "struct BottomUpCheckpoint"
                  },
                  "typeName": {
                    "id": 39560,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39559,
                      "name": "BottomUpCheckpoint",
                      "nameLocations": [
                        "1238:18:53"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47074,
                      "src": "1238:18:53"
                    },
                    "referencedDeclaration": 47074,
                    "src": "1238:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BottomUpCheckpoint_$47074_storage_ptr",
                      "typeString": "struct BottomUpCheckpoint"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39565,
                  "mutability": "mutable",
                  "name": "messages",
                  "nameLocation": "1314:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39568,
                  "src": "1294:28:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_CrossMsg_$47096_calldata_ptr_$dyn_calldata_ptr",
                    "typeString": "struct CrossMsg[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 39563,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 39562,
                        "name": "CrossMsg",
                        "nameLocations": [
                          "1294:8:53"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 47096,
                        "src": "1294:8:53"
                      },
                      "referencedDeclaration": 47096,
                      "src": "1294:8:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_CrossMsg_$47096_storage_ptr",
                        "typeString": "struct CrossMsg"
                      }
                    },
                    "id": 39564,
                    "nodeType": "ArrayTypeName",
                    "src": "1294:10:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_CrossMsg_$47096_storage_$dyn_storage_ptr",
                      "typeString": "struct CrossMsg[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1228:100:53"
            },
            "returnParameters": {
              "id": 39567,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1337:0:53"
            },
            "scope": 39617,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39578,
            "nodeType": "FunctionDefinition",
            "src": "1783:83:53",
            "nodes": [],
            "documentation": {
              "id": 39569,
              "nodeType": "StructuredDocumentation",
              "src": "1344:434:53",
              "text": "Fund injects new funds from an account of the parent chain to a subnet.\n This functions receives a transaction with the FILs that want to be injected in the subnet.\n - Funds injected are frozen.\n - A new fund cross-message is created and stored to propagate it to the subnet. It will be\n picked up by miners to include it in the next possible block.\n - The cross-message nonce is updated"
            },
            "functionSelector": "18f44b70",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "fund",
            "nameLocation": "1792:4:53",
            "parameters": {
              "id": 39576,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39572,
                  "mutability": "mutable",
                  "name": "subnetId",
                  "nameLocation": "1815:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39578,
                  "src": "1797:26:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_SubnetID_$47150_calldata_ptr",
                    "typeString": "struct SubnetID"
                  },
                  "typeName": {
                    "id": 39571,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39570,
                      "name": "SubnetID",
                      "nameLocations": [
                        "1797:8:53"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47150,
                      "src": "1797:8:53"
                    },
                    "referencedDeclaration": 47150,
                    "src": "1797:8:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_SubnetID_$47150_storage_ptr",
                      "typeString": "struct SubnetID"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39575,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "1845:2:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39578,
                  "src": "1825:22:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FvmAddress_$47120_calldata_ptr",
                    "typeString": "struct FvmAddress"
                  },
                  "typeName": {
                    "id": 39574,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39573,
                      "name": "FvmAddress",
                      "nameLocations": [
                        "1825:10:53"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47120,
                      "src": "1825:10:53"
                    },
                    "referencedDeclaration": 47120,
                    "src": "1825:10:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FvmAddress_$47120_storage_ptr",
                      "typeString": "struct FvmAddress"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1796:52:53"
            },
            "returnParameters": {
              "id": 39577,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1865:0:53"
            },
            "scope": 39617,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39585,
            "nodeType": "FunctionDefinition",
            "src": "2198:58:53",
            "nodes": [],
            "documentation": {
              "id": 39579,
              "nodeType": "StructuredDocumentation",
              "src": "1872:321:53",
              "text": "@notice Release creates a new check message to release funds in parent chain\n This function burns the funds that will be released in the current subnet\n and propagates a new checkpoint message to the parent chain to signal\n the amount of funds that can be released for a specific address."
            },
            "functionSelector": "6b2c1eef",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "release",
            "nameLocation": "2207:7:53",
            "parameters": {
              "id": 39583,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39582,
                  "mutability": "mutable",
                  "name": "to",
                  "nameLocation": "2235:2:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39585,
                  "src": "2215:22:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_FvmAddress_$47120_calldata_ptr",
                    "typeString": "struct FvmAddress"
                  },
                  "typeName": {
                    "id": 39581,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39580,
                      "name": "FvmAddress",
                      "nameLocations": [
                        "2215:10:53"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47120,
                      "src": "2215:10:53"
                    },
                    "referencedDeclaration": 47120,
                    "src": "2215:10:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_FvmAddress_$47120_storage_ptr",
                      "typeString": "struct FvmAddress"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2214:24:53"
            },
            "returnParameters": {
              "id": 39584,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2255:0:53"
            },
            "scope": 39617,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39592,
            "nodeType": "FunctionDefinition",
            "src": "2923:69:53",
            "nodes": [],
            "documentation": {
              "id": 39586,
              "nodeType": "StructuredDocumentation",
              "src": "2262:656:53",
              "text": "@notice SendCrossMessage sends an arbitrary cross-message to other subnet in the hierarchy.\n If the message includes any funds they need to be burnt (like in Release)\n before being propagated to the corresponding subnet.\n The circulating supply in each subnet needs to be updated as the message passes through them.\n Params expect a raw message without any subnet context (the IPC address is\n included in the message by the actor). Only actors are allowed to send arbitrary\n cross-messages as a side-effect of their execution. For plain token exchanges\n fund and release have to be used."
            },
            "functionSelector": "c13175ef",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "sendCrossMessage",
            "nameLocation": "2932:16:53",
            "parameters": {
              "id": 39590,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39589,
                  "mutability": "mutable",
                  "name": "crossMsg",
                  "nameLocation": "2965:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39592,
                  "src": "2949:24:53",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_CrossMsg_$47096_memory_ptr",
                    "typeString": "struct CrossMsg"
                  },
                  "typeName": {
                    "id": 39588,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39587,
                      "name": "CrossMsg",
                      "nameLocations": [
                        "2949:8:53"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47096,
                      "src": "2949:8:53"
                    },
                    "referencedDeclaration": 47096,
                    "src": "2949:8:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_CrossMsg_$47096_storage_ptr",
                      "typeString": "struct CrossMsg"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2948:26:53"
            },
            "returnParameters": {
              "id": 39591,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2991:0:53"
            },
            "scope": 39617,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39598,
            "nodeType": "FunctionDefinition",
            "src": "3067:52:53",
            "nodes": [],
            "documentation": {
              "id": 39593,
              "nodeType": "StructuredDocumentation",
              "src": "2998:64:53",
              "text": "@notice Propagates the stored postbox item for the given cid"
            },
            "functionSelector": "25bf0db6",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "propagate",
            "nameLocation": "3076:9:53",
            "parameters": {
              "id": 39596,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39595,
                  "mutability": "mutable",
                  "name": "msgCid",
                  "nameLocation": "3094:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39598,
                  "src": "3086:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 39594,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3086:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3085:16:53"
            },
            "returnParameters": {
              "id": 39597,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3118:0:53"
            },
            "scope": 39617,
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39605,
            "nodeType": "FunctionDefinition",
            "src": "3185:73:53",
            "nodes": [],
            "documentation": {
              "id": 39599,
              "nodeType": "StructuredDocumentation",
              "src": "3125:55:53",
              "text": "@notice commit the ipc parent finality into storage"
            },
            "functionSelector": "11196974",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "commitParentFinality",
            "nameLocation": "3194:20:53",
            "parameters": {
              "id": 39603,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39602,
                  "mutability": "mutable",
                  "name": "finality",
                  "nameLocation": "3239:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39605,
                  "src": "3215:32:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_ParentFinality_$47057_calldata_ptr",
                    "typeString": "struct ParentFinality"
                  },
                  "typeName": {
                    "id": 39601,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39600,
                      "name": "ParentFinality",
                      "nameLocations": [
                        "3215:14:53"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47057,
                      "src": "3215:14:53"
                    },
                    "referencedDeclaration": 47057,
                    "src": "3215:14:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_ParentFinality_$47057_storage_ptr",
                      "typeString": "struct ParentFinality"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3214:34:53"
            },
            "returnParameters": {
              "id": 39604,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3257:0:53"
            },
            "scope": 39617,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 39616,
            "nodeType": "FunctionDefinition",
            "src": "3315:167:53",
            "nodes": [],
            "documentation": {
              "id": 39606,
              "nodeType": "StructuredDocumentation",
              "src": "3264:46:53",
              "text": "@notice creates a new bottom-up checkpoint"
            },
            "functionSelector": "a656ca5b",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createBottomUpCheckpoint",
            "nameLocation": "3324:24:53",
            "parameters": {
              "id": 39614,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 39609,
                  "mutability": "mutable",
                  "name": "checkpoint",
                  "nameLocation": "3386:10:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39616,
                  "src": "3358:38:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_BottomUpCheckpoint_$47074_calldata_ptr",
                    "typeString": "struct BottomUpCheckpoint"
                  },
                  "typeName": {
                    "id": 39608,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 39607,
                      "name": "BottomUpCheckpoint",
                      "nameLocations": [
                        "3358:18:53"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 47074,
                      "src": "3358:18:53"
                    },
                    "referencedDeclaration": 47074,
                    "src": "3358:18:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_BottomUpCheckpoint_$47074_storage_ptr",
                      "typeString": "struct BottomUpCheckpoint"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39611,
                  "mutability": "mutable",
                  "name": "membershipRootHash",
                  "nameLocation": "3414:18:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39616,
                  "src": "3406:26:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 39610,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3406:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 39613,
                  "mutability": "mutable",
                  "name": "membershipWeight",
                  "nameLocation": "3450:16:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 39616,
                  "src": "3442:24:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 39612,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3442:7:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3348:124:53"
            },
            "returnParameters": {
              "id": 39615,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3481:0:53"
            },
            "scope": 39617,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IGateway",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 39531,
          "nodeType": "StructuredDocumentation",
          "src": "262:56:53",
          "text": "@title Gateway interface\n @author LimeChain team"
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          39617
        ],
        "name": "IGateway",
        "nameLocation": "328:8:53",
        "scope": 39618,
        "usedErrors": []
      }
    ],
    "license": "MIT OR Apache-2.0"
  },
  "id": 53
}