/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISubnetActorInterface extends ethers.utils.Interface {
  functions: {
    "join()": FunctionFragment;
    "kill()": FunctionFragment;
    "leave()": FunctionFragment;
    "reward()": FunctionFragment;
    "submitCheckpoint(((address[]),uint64,uint256,tuple[],tuple[],bytes32))": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitCheckpoint",
    values: [
      {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitCheckpoint",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISubnetActor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISubnetActorInterface;

  functions: {
    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  join(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  leave(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reward(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitCheckpoint(
    checkpoint: {
      source: { route: string[] };
      epoch: BigNumberish;
      fee: BigNumberish;
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[];
      children: { source: { route: string[] }; checks: BytesLike[] }[];
      prevHash: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    join(overrides?: CallOverrides): Promise<void>;

    kill(overrides?: CallOverrides): Promise<void>;

    leave(overrides?: CallOverrides): Promise<void>;

    reward(overrides?: CallOverrides): Promise<void>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
