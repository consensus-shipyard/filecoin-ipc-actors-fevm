/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GatewayInterface extends ethers.utils.Interface {
  functions: {
    "addStake()": FunctionFragment;
    "appliedTopDownNonce()": FunctionFragment;
    "bottomUpCheckPeriod()": FunctionFragment;
    "bottomUpCheckpoints(uint64)": FunctionFragment;
    "bottomUpNonce()": FunctionFragment;
    "commitChildCheck(((address[]),uint64,uint256,tuple[],tuple[],bytes32))": FunctionFragment;
    "crossMsgFee()": FunctionFragment;
    "executableQueue()": FunctionFragment;
    "fund((address[]))": FunctionFragment;
    "genesisEpoch()": FunctionFragment;
    "getNetworkName()": FunctionFragment;
    "getSubnetTopDownMsg((address[]),uint256)": FunctionFragment;
    "getSubnetTopDownMsgsLength((address[]))": FunctionFragment;
    "initGenesisEpoch(uint64)": FunctionFragment;
    "initialized()": FunctionFragment;
    "kill()": FunctionFragment;
    "lastVotingExecutedEpoch()": FunctionFragment;
    "majorityPercentage()": FunctionFragment;
    "minStake()": FunctionFragment;
    "postbox(bytes32)": FunctionFragment;
    "postboxHasOwner(bytes32,address)": FunctionFragment;
    "propagate(bytes32)": FunctionFragment;
    "register()": FunctionFragment;
    "release()": FunctionFragment;
    "releaseStake(uint256)": FunctionFragment;
    "sendCross((address[]),((((address[]),address),((address[]),address),uint256,uint64,bytes4,bytes),bool))": FunctionFragment;
    "setMembership(address[],uint256[])": FunctionFragment;
    "submissionPeriod()": FunctionFragment;
    "submitTopDownCheckpoint((uint64,tuple[]))": FunctionFragment;
    "subnets(bytes32)": FunctionFragment;
    "topDownCheckPeriod()": FunctionFragment;
    "totalSubnets()": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "validatorNonce()": FunctionFragment;
    "validatorSet(uint256,address)": FunctionFragment;
    "whitelistPropagator(bytes32,address[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addStake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "appliedTopDownNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bottomUpCheckPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bottomUpCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bottomUpNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commitChildCheck",
    values: [
      {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "crossMsgFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executableQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [{ route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "genesisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubnetTopDownMsg",
    values: [{ route: string[] }, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubnetTopDownMsgsLength",
    values: [{ route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "initGenesisEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastVotingExecutedEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "majorityPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minStake", values?: undefined): string;
  encodeFunctionData(functionFragment: "postbox", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "postboxHasOwner",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "propagate",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "register", values?: undefined): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sendCross",
    values: [
      { route: string[] },
      {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMembership",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submissionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitTopDownCheckpoint",
    values: [
      {
        epoch: BigNumberish;
        topDownMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "subnets", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "topDownCheckPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSubnets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorSet",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistPropagator",
    values: [BytesLike, string[]]
  ): string;

  decodeFunctionResult(functionFragment: "addStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "appliedTopDownNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bottomUpCheckPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bottomUpCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bottomUpNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitChildCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crossMsgFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executableQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubnetTopDownMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubnetTopDownMsgsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initGenesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastVotingExecutedEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "majorityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minStake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postbox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postboxHasOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "propagate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendCross", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTopDownCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subnets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topDownCheckPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSubnets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistPropagator",
    data: BytesLike
  ): Result;

  events: {};
}

export class Gateway extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GatewayInterface;

  functions: {
    addStake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    appliedTopDownNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    bottomUpCheckPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    bottomUpCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string[]] & { route: string[] }, BigNumber, BigNumber, string] & {
        source: [string[]] & { route: string[] };
        epoch: BigNumber;
        fee: BigNumber;
        prevHash: string;
      }
    >;

    bottomUpNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    commitChildCheck(
      commit: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crossMsgFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    executableQueue(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        period: BigNumber;
        first: BigNumber;
        last: BigNumber;
      }
    >;

    fund(
      subnetId: { route: string[] },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNetworkName(
      overrides?: CallOverrides
    ): Promise<[[string[]] & { route: string[] }]>;

    getSubnetTopDownMsg(
      subnetId: { route: string[] },
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          },
          boolean
        ] & {
          message: [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          };
          wrapped: boolean;
        }
      ]
    >;

    getSubnetTopDownMsgsLength(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initGenesisEpoch(
      _genesisEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    majorityPercentage(overrides?: CallOverrides): Promise<[number]>;

    minStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    postbox(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        },
        boolean
      ] & {
        message: [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        };
        wrapped: boolean;
      }
    >;

    postboxHasOwner(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    propagate(
      msgCid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    register(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    release(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendCross(
      destination: { route: string[] },
      crossMsg: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMembership(
      validators: string[],
      weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submissionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitTopDownCheckpoint(
      checkpoint: {
        epoch: BigNumberish;
        topDownMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subnets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string[]] & { route: string[] },
        [
          [string[]] & { route: string[] },
          BigNumber,
          BigNumber,
          ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[],
          ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[],
          string
        ] & {
          source: [string[]] & { route: string[] };
          epoch: BigNumber;
          fee: BigNumber;
          crossMsgs: ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[];
          children: ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[];
          prevHash: string;
        }
      ] & {
        status: number;
        topDownNonce: BigNumber;
        appliedBottomUpNonce: BigNumber;
        stake: BigNumber;
        genesisEpoch: BigNumber;
        circSupply: BigNumber;
        id: [string[]] & { route: string[] };
        prevCheckpoint: [
          [string[]] & { route: string[] },
          BigNumber,
          BigNumber,
          ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[],
          ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[],
          string
        ] & {
          source: [string[]] & { route: string[] };
          epoch: BigNumber;
          fee: BigNumber;
          crossMsgs: ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[];
          children: ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[];
          prevHash: string;
        };
      }
    >;

    topDownCheckPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSubnets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorSet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    whitelistPropagator(
      msgCid: BytesLike,
      owners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addStake(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  appliedTopDownNonce(overrides?: CallOverrides): Promise<BigNumber>;

  bottomUpCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  bottomUpCheckpoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[string[]] & { route: string[] }, BigNumber, BigNumber, string] & {
      source: [string[]] & { route: string[] };
      epoch: BigNumber;
      fee: BigNumber;
      prevHash: string;
    }
  >;

  bottomUpNonce(overrides?: CallOverrides): Promise<BigNumber>;

  commitChildCheck(
    commit: {
      source: { route: string[] };
      epoch: BigNumberish;
      fee: BigNumberish;
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[];
      children: { source: { route: string[] }; checks: BytesLike[] }[];
      prevHash: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crossMsgFee(overrides?: CallOverrides): Promise<BigNumber>;

  executableQueue(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      period: BigNumber;
      first: BigNumber;
      last: BigNumber;
    }
  >;

  fund(
    subnetId: { route: string[] },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getNetworkName(
    overrides?: CallOverrides
  ): Promise<[string[]] & { route: string[] }>;

  getSubnetTopDownMsg(
    subnetId: { route: string[] },
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      },
      boolean
    ] & {
      message: [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      };
      wrapped: boolean;
    }
  >;

  getSubnetTopDownMsgsLength(
    subnetId: { route: string[] },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initGenesisEpoch(
    _genesisEpoch: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  kill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  majorityPercentage(overrides?: CallOverrides): Promise<number>;

  minStake(overrides?: CallOverrides): Promise<BigNumber>;

  postbox(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      },
      boolean
    ] & {
      message: [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      };
      wrapped: boolean;
    }
  >;

  postboxHasOwner(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  propagate(
    msgCid: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  register(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  release(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseStake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendCross(
    destination: { route: string[] },
    crossMsg: {
      message: {
        from: { subnetId: { route: string[] }; rawAddress: string };
        to: { subnetId: { route: string[] }; rawAddress: string };
        value: BigNumberish;
        nonce: BigNumberish;
        method: BytesLike;
        params: BytesLike;
      };
      wrapped: boolean;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMembership(
    validators: string[],
    weights: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  submitTopDownCheckpoint(
    checkpoint: {
      epoch: BigNumberish;
      topDownMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subnets(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [string[]] & { route: string[] },
      [
        [string[]] & { route: string[] },
        BigNumber,
        BigNumber,
        ([
          [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          },
          boolean
        ] & {
          message: [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          };
          wrapped: boolean;
        })[],
        ([[string[]] & { route: string[] }, string[]] & {
          source: [string[]] & { route: string[] };
          checks: string[];
        })[],
        string
      ] & {
        source: [string[]] & { route: string[] };
        epoch: BigNumber;
        fee: BigNumber;
        crossMsgs: ([
          [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          },
          boolean
        ] & {
          message: [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          };
          wrapped: boolean;
        })[];
        children: ([[string[]] & { route: string[] }, string[]] & {
          source: [string[]] & { route: string[] };
          checks: string[];
        })[];
        prevHash: string;
      }
    ] & {
      status: number;
      topDownNonce: BigNumber;
      appliedBottomUpNonce: BigNumber;
      stake: BigNumber;
      genesisEpoch: BigNumber;
      circSupply: BigNumber;
      id: [string[]] & { route: string[] };
      prevCheckpoint: [
        [string[]] & { route: string[] },
        BigNumber,
        BigNumber,
        ([
          [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          },
          boolean
        ] & {
          message: [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          };
          wrapped: boolean;
        })[],
        ([[string[]] & { route: string[] }, string[]] & {
          source: [string[]] & { route: string[] };
          checks: string[];
        })[],
        string
      ] & {
        source: [string[]] & { route: string[] };
        epoch: BigNumber;
        fee: BigNumber;
        crossMsgs: ([
          [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          },
          boolean
        ] & {
          message: [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          };
          wrapped: boolean;
        })[];
        children: ([[string[]] & { route: string[] }, string[]] & {
          source: [string[]] & { route: string[] };
          checks: string[];
        })[];
        prevHash: string;
      };
    }
  >;

  topDownCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  totalSubnets(overrides?: CallOverrides): Promise<BigNumber>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  validatorNonce(overrides?: CallOverrides): Promise<BigNumber>;

  validatorSet(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  whitelistPropagator(
    msgCid: BytesLike,
    owners: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addStake(overrides?: CallOverrides): Promise<void>;

    appliedTopDownNonce(overrides?: CallOverrides): Promise<BigNumber>;

    bottomUpCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    bottomUpCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string[]] & { route: string[] }, BigNumber, BigNumber, string] & {
        source: [string[]] & { route: string[] };
        epoch: BigNumber;
        fee: BigNumber;
        prevHash: string;
      }
    >;

    bottomUpNonce(overrides?: CallOverrides): Promise<BigNumber>;

    commitChildCheck(
      commit: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    crossMsgFee(overrides?: CallOverrides): Promise<BigNumber>;

    executableQueue(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        period: BigNumber;
        first: BigNumber;
        last: BigNumber;
      }
    >;

    fund(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<void>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkName(
      overrides?: CallOverrides
    ): Promise<[string[]] & { route: string[] }>;

    getSubnetTopDownMsg(
      subnetId: { route: string[] },
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        },
        boolean
      ] & {
        message: [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        };
        wrapped: boolean;
      }
    >;

    getSubnetTopDownMsgsLength(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initGenesisEpoch(
      _genesisEpoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    kill(overrides?: CallOverrides): Promise<void>;

    lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    majorityPercentage(overrides?: CallOverrides): Promise<number>;

    minStake(overrides?: CallOverrides): Promise<BigNumber>;

    postbox(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        },
        boolean
      ] & {
        message: [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        };
        wrapped: boolean;
      }
    >;

    postboxHasOwner(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    propagate(msgCid: BytesLike, overrides?: CallOverrides): Promise<void>;

    register(overrides?: CallOverrides): Promise<void>;

    release(overrides?: CallOverrides): Promise<void>;

    releaseStake(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sendCross(
      destination: { route: string[] },
      crossMsg: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setMembership(
      validators: string[],
      weights: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    submissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    submitTopDownCheckpoint(
      checkpoint: {
        epoch: BigNumberish;
        topDownMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    subnets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [string[]] & { route: string[] },
        [
          [string[]] & { route: string[] },
          BigNumber,
          BigNumber,
          ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[],
          ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[],
          string
        ] & {
          source: [string[]] & { route: string[] };
          epoch: BigNumber;
          fee: BigNumber;
          crossMsgs: ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[];
          children: ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[];
          prevHash: string;
        }
      ] & {
        status: number;
        topDownNonce: BigNumber;
        appliedBottomUpNonce: BigNumber;
        stake: BigNumber;
        genesisEpoch: BigNumber;
        circSupply: BigNumber;
        id: [string[]] & { route: string[] };
        prevCheckpoint: [
          [string[]] & { route: string[] },
          BigNumber,
          BigNumber,
          ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[],
          ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[],
          string
        ] & {
          source: [string[]] & { route: string[] };
          epoch: BigNumber;
          fee: BigNumber;
          crossMsgs: ([
            [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            },
            boolean
          ] & {
            message: [
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              },
              BigNumber,
              BigNumber,
              string,
              string
            ] & {
              from: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              to: [[string[]] & { route: string[] }, string] & {
                subnetId: [string[]] & { route: string[] };
                rawAddress: string;
              };
              value: BigNumber;
              nonce: BigNumber;
              method: string;
              params: string;
            };
            wrapped: boolean;
          })[];
          children: ([[string[]] & { route: string[] }, string[]] & {
            source: [string[]] & { route: string[] };
            checks: string[];
          })[];
          prevHash: string;
        };
      }
    >;

    topDownCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSubnets(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    validatorNonce(overrides?: CallOverrides): Promise<BigNumber>;

    validatorSet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistPropagator(
      msgCid: BytesLike,
      owners: string[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addStake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    appliedTopDownNonce(overrides?: CallOverrides): Promise<BigNumber>;

    bottomUpCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    bottomUpCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bottomUpNonce(overrides?: CallOverrides): Promise<BigNumber>;

    commitChildCheck(
      commit: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crossMsgFee(overrides?: CallOverrides): Promise<BigNumber>;

    executableQueue(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      subnetId: { route: string[] },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getNetworkName(overrides?: CallOverrides): Promise<BigNumber>;

    getSubnetTopDownMsg(
      subnetId: { route: string[] },
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubnetTopDownMsgsLength(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initGenesisEpoch(
      _genesisEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    majorityPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minStake(overrides?: CallOverrides): Promise<BigNumber>;

    postbox(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    postboxHasOwner(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propagate(
      msgCid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    register(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    release(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendCross(
      destination: { route: string[] },
      crossMsg: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMembership(
      validators: string[],
      weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    submitTopDownCheckpoint(
      checkpoint: {
        epoch: BigNumberish;
        topDownMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subnets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    topDownCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSubnets(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    validatorNonce(overrides?: CallOverrides): Promise<BigNumber>;

    validatorSet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistPropagator(
      msgCid: BytesLike,
      owners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addStake(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    appliedTopDownNonce(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bottomUpCheckPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bottomUpCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bottomUpNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitChildCheck(
      commit: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crossMsgFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executableQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fund(
      subnetId: { route: string[] },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetworkName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubnetTopDownMsg(
      subnetId: { route: string[] },
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubnetTopDownMsgsLength(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initGenesisEpoch(
      _genesisEpoch: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastVotingExecutedEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    majorityPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    postbox(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postboxHasOwner(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propagate(
      msgCid: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    register(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    release(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseStake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendCross(
      destination: { route: string[] },
      crossMsg: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMembership(
      validators: string[],
      weights: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submissionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitTopDownCheckpoint(
      checkpoint: {
        epoch: BigNumberish;
        topDownMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subnets(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    topDownCheckPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSubnets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorSet(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistPropagator(
      msgCid: BytesLike,
      owners: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
