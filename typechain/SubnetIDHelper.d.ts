/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SubnetIDHelperInterface extends ethers.utils.Interface {
  functions: {
    "commonParent((address[]),(address[]))": FunctionFragment;
    "createSubnetId((address[]),address)": FunctionFragment;
    "down((address[]),(address[]))": FunctionFragment;
    "equals((address[]),(address[]))": FunctionFragment;
    "getActor((address[]))": FunctionFragment;
    "getParentSubnet((address[]))": FunctionFragment;
    "isEmpty((address[]))": FunctionFragment;
    "isRoot((address[]))": FunctionFragment;
    "toHash((address[]))": FunctionFragment;
    "toString((address[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commonParent",
    values: [{ route: string[] }, { route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "createSubnetId",
    values: [{ route: string[] }, string]
  ): string;
  encodeFunctionData(
    functionFragment: "down",
    values: [{ route: string[] }, { route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "equals",
    values: [{ route: string[] }, { route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "getActor",
    values: [{ route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentSubnet",
    values: [{ route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "isEmpty",
    values: [{ route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "isRoot",
    values: [{ route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "toHash",
    values: [{ route: string[] }]
  ): string;
  encodeFunctionData(
    functionFragment: "toString",
    values: [{ route: string[] }]
  ): string;

  decodeFunctionResult(
    functionFragment: "commonParent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSubnetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "down", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "equals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParentSubnet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEmpty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toString", data: BytesLike): Result;

  events: {};
}

export class SubnetIDHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SubnetIDHelperInterface;

  functions: {
    commonParent(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[[string[]] & { route: string[] }]>;

    createSubnetId(
      subnet: { route: string[] },
      actor: string,
      overrides?: CallOverrides
    ): Promise<
      [[string[]] & { route: string[] }] & {
        newSubnet: [string[]] & { route: string[] };
      }
    >;

    down(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[[string[]] & { route: string[] }]>;

    equals(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getActor(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getParentSubnet(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[[string[]] & { route: string[] }]>;

    isEmpty(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRoot(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toHash(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[string]>;

    toString(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  commonParent(
    subnet1: { route: string[] },
    subnet2: { route: string[] },
    overrides?: CallOverrides
  ): Promise<[string[]] & { route: string[] }>;

  createSubnetId(
    subnet: { route: string[] },
    actor: string,
    overrides?: CallOverrides
  ): Promise<[string[]] & { route: string[] }>;

  down(
    subnet1: { route: string[] },
    subnet2: { route: string[] },
    overrides?: CallOverrides
  ): Promise<[string[]] & { route: string[] }>;

  equals(
    subnet1: { route: string[] },
    subnet2: { route: string[] },
    overrides?: CallOverrides
  ): Promise<boolean>;

  getActor(
    subnet: { route: string[] },
    overrides?: CallOverrides
  ): Promise<string>;

  getParentSubnet(
    subnet: { route: string[] },
    overrides?: CallOverrides
  ): Promise<[string[]] & { route: string[] }>;

  isEmpty(
    subnetId: { route: string[] },
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRoot(
    subnet: { route: string[] },
    overrides?: CallOverrides
  ): Promise<boolean>;

  toHash(
    subnet: { route: string[] },
    overrides?: CallOverrides
  ): Promise<string>;

  toString(
    subnet: { route: string[] },
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    commonParent(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[string[]] & { route: string[] }>;

    createSubnetId(
      subnet: { route: string[] },
      actor: string,
      overrides?: CallOverrides
    ): Promise<[string[]] & { route: string[] }>;

    down(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[string[]] & { route: string[] }>;

    equals(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<boolean>;

    getActor(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<string>;

    getParentSubnet(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<[string[]] & { route: string[] }>;

    isEmpty(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRoot(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<boolean>;

    toHash(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<string>;

    toString(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    commonParent(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createSubnetId(
      subnet: { route: string[] },
      actor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    down(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    equals(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getActor(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getParentSubnet(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isEmpty(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRoot(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toHash(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toString(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    commonParent(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createSubnetId(
      subnet: { route: string[] },
      actor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    down(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    equals(
      subnet1: { route: string[] },
      subnet2: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getActor(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getParentSubnet(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isEmpty(
      subnetId: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRoot(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toHash(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toString(
      subnet: { route: string[] },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
