/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IGateway, IGatewayInterface } from "../IGateway";

const _abi = [
  {
    inputs: [],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address[]",
                name: "route",
                type: "address[]",
              },
            ],
            internalType: "struct SubnetID",
            name: "source",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "epoch",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "fee",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "from",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "to",
                    type: "tuple",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "uint64",
                    name: "nonce",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes4",
                    name: "method",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "params",
                    type: "bytes",
                  },
                ],
                internalType: "struct StorableMsg",
                name: "message",
                type: "tuple",
              },
              {
                internalType: "bool",
                name: "wrapped",
                type: "bool",
              },
            ],
            internalType: "struct CrossMsg[]",
            name: "crossMsgs",
            type: "tuple[]",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "source",
                type: "tuple",
              },
              {
                internalType: "bytes32[]",
                name: "checks",
                type: "bytes32[]",
              },
            ],
            internalType: "struct ChildCheck[]",
            name: "children",
            type: "tuple[]",
          },
          {
            internalType: "bytes32",
            name: "prevHash",
            type: "bytes32",
          },
        ],
        internalType: "struct BottomUpCheckpoint",
        name: "bottomupCheckpoint",
        type: "tuple",
      },
    ],
    name: "commitChildCheck",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnetId",
        type: "tuple",
      },
    ],
    name: "fund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "kill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "msgCid",
        type: "bytes32",
      },
    ],
    name: "propagate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "register",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "release",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "releaseStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "destination",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "from",
                type: "tuple",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "to",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "bytes4",
                name: "method",
                type: "bytes4",
              },
              {
                internalType: "bytes",
                name: "params",
                type: "bytes",
              },
            ],
            internalType: "struct StorableMsg",
            name: "message",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "wrapped",
            type: "bool",
          },
        ],
        internalType: "struct CrossMsg",
        name: "crossMsg",
        type: "tuple",
      },
    ],
    name: "sendCross",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "validatorsToSet",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "weights",
        type: "uint256[]",
      },
    ],
    name: "setMembership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "epoch",
            type: "uint64",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "from",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "to",
                    type: "tuple",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "uint64",
                    name: "nonce",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes4",
                    name: "method",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "params",
                    type: "bytes",
                  },
                ],
                internalType: "struct StorableMsg",
                name: "message",
                type: "tuple",
              },
              {
                internalType: "bool",
                name: "wrapped",
                type: "bool",
              },
            ],
            internalType: "struct CrossMsg[]",
            name: "topDownMsgs",
            type: "tuple[]",
          },
        ],
        internalType: "struct TopDownCheckpoint",
        name: "topdownCheckpoint",
        type: "tuple",
      },
    ],
    name: "submitTopDownCheckpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "msgCid",
        type: "bytes32",
      },
      {
        internalType: "address[]",
        name: "owners",
        type: "address[]",
      },
    ],
    name: "whitelistPropagator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IGateway__factory {
  static readonly abi = _abi;
  static createInterface(): IGatewayInterface {
    return new utils.Interface(_abi) as IGatewayInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IGateway {
    return new Contract(address, _abi, signerOrProvider) as IGateway;
  }
}
