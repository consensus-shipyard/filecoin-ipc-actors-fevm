/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CheckpointHelper,
  CheckpointHelperInterface,
} from "../CheckpointHelper";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "epoch",
            type: "uint64",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "from",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "to",
                    type: "tuple",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "uint64",
                    name: "nonce",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes4",
                    name: "method",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "params",
                    type: "bytes",
                  },
                ],
                internalType: "struct StorableMsg",
                name: "message",
                type: "tuple",
              },
              {
                internalType: "bool",
                name: "wrapped",
                type: "bool",
              },
            ],
            internalType: "struct CrossMsg[]",
            name: "topDownMsgs",
            type: "tuple[]",
          },
        ],
        internalType: "struct TopDownCheckpoint",
        name: "topdownCheckpoint",
        type: "tuple",
      },
    ],
    name: "isEmpty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address[]",
                name: "route",
                type: "address[]",
              },
            ],
            internalType: "struct SubnetID",
            name: "source",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "epoch",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "fee",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "from",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "to",
                    type: "tuple",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "uint64",
                    name: "nonce",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes4",
                    name: "method",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "params",
                    type: "bytes",
                  },
                ],
                internalType: "struct StorableMsg",
                name: "message",
                type: "tuple",
              },
              {
                internalType: "bool",
                name: "wrapped",
                type: "bool",
              },
            ],
            internalType: "struct CrossMsg[]",
            name: "crossMsgs",
            type: "tuple[]",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "source",
                type: "tuple",
              },
              {
                internalType: "bytes32[]",
                name: "checks",
                type: "bytes32[]",
              },
            ],
            internalType: "struct ChildCheck[]",
            name: "children",
            type: "tuple[]",
          },
          {
            internalType: "bytes32",
            name: "prevHash",
            type: "bytes32",
          },
        ],
        internalType: "struct BottomUpCheckpoint",
        name: "bottomUpCheckpoint",
        type: "tuple",
      },
    ],
    name: "isEmpty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address[]",
                name: "route",
                type: "address[]",
              },
            ],
            internalType: "struct SubnetID",
            name: "source",
            type: "tuple",
          },
          {
            internalType: "uint64",
            name: "epoch",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "fee",
            type: "uint256",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "from",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "to",
                    type: "tuple",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "uint64",
                    name: "nonce",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes4",
                    name: "method",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "params",
                    type: "bytes",
                  },
                ],
                internalType: "struct StorableMsg",
                name: "message",
                type: "tuple",
              },
              {
                internalType: "bool",
                name: "wrapped",
                type: "bool",
              },
            ],
            internalType: "struct CrossMsg[]",
            name: "crossMsgs",
            type: "tuple[]",
          },
          {
            components: [
              {
                components: [
                  {
                    internalType: "address[]",
                    name: "route",
                    type: "address[]",
                  },
                ],
                internalType: "struct SubnetID",
                name: "source",
                type: "tuple",
              },
              {
                internalType: "bytes32[]",
                name: "checks",
                type: "bytes32[]",
              },
            ],
            internalType: "struct ChildCheck[]",
            name: "children",
            type: "tuple[]",
          },
          {
            internalType: "bytes32",
            name: "prevHash",
            type: "bytes32",
          },
        ],
        internalType: "struct BottomUpCheckpoint",
        name: "bottomupCheckpoint",
        type: "tuple",
      },
    ],
    name: "toHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "epoch",
            type: "uint64",
          },
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "from",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        components: [
                          {
                            internalType: "address[]",
                            name: "route",
                            type: "address[]",
                          },
                        ],
                        internalType: "struct SubnetID",
                        name: "subnetId",
                        type: "tuple",
                      },
                      {
                        internalType: "address",
                        name: "rawAddress",
                        type: "address",
                      },
                    ],
                    internalType: "struct IPCAddress",
                    name: "to",
                    type: "tuple",
                  },
                  {
                    internalType: "uint256",
                    name: "value",
                    type: "uint256",
                  },
                  {
                    internalType: "uint64",
                    name: "nonce",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes4",
                    name: "method",
                    type: "bytes4",
                  },
                  {
                    internalType: "bytes",
                    name: "params",
                    type: "bytes",
                  },
                ],
                internalType: "struct StorableMsg",
                name: "message",
                type: "tuple",
              },
              {
                internalType: "bool",
                name: "wrapped",
                type: "bool",
              },
            ],
            internalType: "struct CrossMsg[]",
            name: "topDownMsgs",
            type: "tuple[]",
          },
        ],
        internalType: "struct TopDownCheckpoint",
        name: "topdownCheckpoint",
        type: "tuple",
      },
    ],
    name: "toHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001a57610a4c9081610020823930815050f35b600080fdfe604060808152600436101561001357600080fd5b6000803560e01c9081632d3431571461013c57816339aa47fb1461012d57816345d51b1214610067575063edf122501461004c57600080fd5b60209061006061005b366104e6565b610a01565b9051908152f35b826100796100743661054f565b6109b9565b815192610085846101b1565b808452825193610094856101b1565b84528251906100a2826101b1565b80825283516100b0816101b1565b81815284519260c08401968488106001600160401b038911176101195760209787528452828785015282868501526060840152608083015260a0820152825161010e8161010087820194856108a1565b03601f1981018352826101e7565b519020149051908152f35b634e487b7160e01b84526041600452602484fd5b6020836100606100743661054f565b8260209161014c61005b366104e6565b908251610158816101b1565b81815283519161016783610180565b825284820152825161010e8161010087820194856109d4565b604081019081106001600160401b0382111761019b57604052565b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b0382111761019b57604052565b60c081019081106001600160401b0382111761019b57604052565b90601f801991011681019081106001600160401b0382111761019b57604052565b35906001600160401b038216820361021c57565b600080fd5b6001600160401b03811161019b5760051b60200190565b35906001600160a01b038216820361021c57565b91906020808483031261021c57604051906001600160401b038183018181118482101761019b576040528295803591821161021c57019280601f8501121561021c57833561029981610221565b946102a760405196876101e7565b818652838087019260051b82010192831161021c578301905b8282106102ce575050505052565b8380916102da84610238565b8152019101906102c0565b91909160408184031261021c57604051906102ff82610180565b81938135906001600160401b03821161021c57826103266020949261032e9486940161024c565b855201610238565b910152565b601f9082828201121561021c57803561034b81610221565b9360409361035b855196876101e7565b828652602094858088019460051b8601019483861161021c57868101945b86861061038b57505050505050505090565b6001600160401b03863581811161021c57830190601f198581848a03011261021c578551926103b984610180565b8b81013583811161021c57810160c0928381838d03011261021c578851918e6103e1846101cc565b81013586811161021c578f8d906103fa928401016102e5565b83528981013586811161021c578f908d82610417928501016102e5565b90840152606094858201358b850152608095610434878401610208565b9085015260a09582870135906001600160e01b03198216820361021c578501528101359086821161021c5701938b603f8601121561021c578e8501359586116104d1576104898f8b51938d89011601836101e7565b8582528b8a878701011161021c57858f968b80970188850137600096879184010152820152845201359081151582036104ce5750898201528152948701948701610379565b80fd5b60246000634e487b7160e01b81526041600452fd5b60031960208282011261021c57600435916001600160401b039182841161021c57604090848303011261021c576040519261052084610180565b61052c81600401610208565b8452602481013592831161021c576105479201600401610333565b602082015290565b602060031991818382011261021c57600435916001600160401b039384841161021c5760c090848403011261021c57604080519461058c866101cc565b846004013581811161021c578460046105a79288010161024c565b86526024906105b7828701610208565b848801526044908187013584890152606487013581811161021c578660046105e1928a0101610333565b6060890152608487013581811161021c578701938660238601121561021c5760048501359661060f88610221565b9761061c8351998a6101e7565b8089528789019486600592831b8901019783891161021c57878101965b89881061065e5750505050505050505050509060a4916080840152013560a082015290565b873587811161021c57820186602319828803011261021c5786519061068282610180565b8a81013589811161021c57878c61069b9284010161024c565b8252848101359089821161021c57018660438201121561021c57808b8e920135866106c582610221565b936106d28c5195866101e7565b828552840191891b8301019189831161021c57908f94929593918801905b86821061070b57505083809550820152815201970196610639565b9481929496939581923581520191018f94929593916106f0565b60209081604081850192519482815285518094520193019160005b82811061074e575050505090565b83516001600160a01b031685529381019392810192600101610740565b9060206107818351604084526040840190610725565b928101516001600160a01b031691015290565b90815180825260208092019182818360051b8501950193600080925b8584106107c1575050505050505090565b9091929394959681810384528588519182519060409384825282516107f260c091828886015261010085019061076b565b9385810151916001600160401b03610818603f19976060958989830301878a015261076b565b988301519360809485880152830151169260a0938487015263ffffffff60e01b9083015116908501520151928286030160e0830152825192838652875b84811061088d5750508285018401879052830151151590830152601f01601f19169091018101978101969594600101930191906107b0565b8181018601518782018701528b9501610855565b6020918282526108bc815160c08585015260e0840190610725565b6001600160401b038483015116604090818501528083015160608501526108f5606084015192601f199384878303016080880152610794565b94608084015195838682030160a08701528651928382528282019083808660051b85010199019560009081945b87861061093f5750505050505050505060a060c091015191015290565b9091929394958b8383839a9b9e030187528c5182610964825189855289850190610725565b910151918381830391015282808351928381520192019086905b8082106109a05750505090806001929d01960196019497969593929190610922565b919380600192948651815201940192018a93929161097e565b6040516109ce816101006020820194856108a1565b51902090565b606060206109fe938184526001600160401b03815116828501520151916040808201520190610794565b90565b6040516109ce816101006020820194856109d456fea264697066735822122049be09db96009aac7fe00a26f04dfa9340fb1a02b4ab1a89808c20711052137864736f6c63430008110033";

export class CheckpointHelper__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CheckpointHelper> {
    return super.deploy(overrides || {}) as Promise<CheckpointHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CheckpointHelper {
    return super.attach(address) as CheckpointHelper;
  }
  connect(signer: Signer): CheckpointHelper__factory {
    return super.connect(signer) as CheckpointHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckpointHelperInterface {
    return new utils.Interface(_abi) as CheckpointHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CheckpointHelper {
    return new Contract(address, _abi, signerOrProvider) as CheckpointHelper;
  }
}
