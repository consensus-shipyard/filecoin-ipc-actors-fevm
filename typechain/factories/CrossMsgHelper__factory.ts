/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CrossMsgHelper,
  CrossMsgHelperInterface,
} from "../CrossMsgHelper";

const _abi = [
  {
    inputs: [],
    name: "EMPTY_CROSS_MSG",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "createFundMsg",
    outputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "from",
                type: "tuple",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "to",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "bytes4",
                name: "method",
                type: "bytes4",
              },
              {
                internalType: "bytes",
                name: "params",
                type: "bytes",
              },
            ],
            internalType: "struct StorableMsg",
            name: "message",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "wrapped",
            type: "bool",
          },
        ],
        internalType: "struct CrossMsg",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "createReleaseMsg",
    outputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "from",
                type: "tuple",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "to",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "bytes4",
                name: "method",
                type: "bytes4",
              },
              {
                internalType: "bytes",
                name: "params",
                type: "bytes",
              },
            ],
            internalType: "struct StorableMsg",
            name: "message",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "wrapped",
            type: "bool",
          },
        ],
        internalType: "struct CrossMsg",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "from",
                type: "tuple",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "to",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "bytes4",
                name: "method",
                type: "bytes4",
              },
              {
                internalType: "bytes",
                name: "params",
                type: "bytes",
              },
            ],
            internalType: "struct StorableMsg",
            name: "message",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "wrapped",
            type: "bool",
          },
        ],
        internalType: "struct CrossMsg[]",
        name: "crossMsgs",
        type: "tuple[]",
      },
    ],
    name: "isSorted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "from",
                type: "tuple",
              },
              {
                components: [
                  {
                    components: [
                      {
                        internalType: "address[]",
                        name: "route",
                        type: "address[]",
                      },
                    ],
                    internalType: "struct SubnetID",
                    name: "subnetId",
                    type: "tuple",
                  },
                  {
                    internalType: "address",
                    name: "rawAddress",
                    type: "address",
                  },
                ],
                internalType: "struct IPCAddress",
                name: "to",
                type: "tuple",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
              {
                internalType: "bytes4",
                name: "method",
                type: "bytes4",
              },
              {
                internalType: "bytes",
                name: "params",
                type: "bytes",
              },
            ],
            internalType: "struct StorableMsg",
            name: "message",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "wrapped",
            type: "bool",
          },
        ],
        internalType: "struct CrossMsg[]",
        name: "crossMsgs",
        type: "tuple[]",
      },
    ],
    name: "toHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001c576113ca90816100228239308160640152f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c9081631d10cf7e146105d0575080632c9680ef1461051b5780634669af20146103da578063716868301461013c57806389841475146100df5763b88dfdf61461006157600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146100da576003196020368201126100da57600435906001600160401b0382116100da5760409082360301126100da576100c26100d691600401610d6d565b6040519182916020835260208301906107c4565b0390f35b600080fd5b60203660031901126100da576001600160401b036004358181116100da57366023820112156100da5780600401359182116100da573660248360051b830101116100da5760209160246101329201611327565b6040519015158152f35b60203660031901126100da576001600160401b03600435116100da573660236004350112156100da576004356004013561017581610732565b6101826040519182610711565b8181526020810180923660248260051b6004350101116100da57602460043501915b60248260051b6004350101831061023557505050604051602081019160408201906020845251809152606082019060608160051b84010194916000905b82821061020a57602086866101ff818b03601f198101835282610711565b519020604051908152f35b90919295602080610227600193605f198982030186528a51610804565b9801920192019092916101e1565b82356001600160401b0381116100da576023196040600435830136038201126100da5760405192610265846106db565b602483600435010135936001600160401b0385116100da5760c0809386866004350101360301126100da576040519283018381106001600160401b038211176103c45760405260248585600435010101356001600160401b0381116100da576102da9060243691888860043501010101610a7f565b83526001600160401b036044868660043501010135116100da5761030d3660043586018701604481013501602401610a7f565b6020840152600435840185016064810135604085015261032f90608401610ad7565b606084015261034660a48686600435010101610aeb565b608084015260c4858560043501010135946001600160401b0386116100da573660438783886004350101010112156100da5760249560209586956103b3936044936103a2913691600435860190910101808c0135908601610b00565b60a082015284526004350101610b37565b8382015281520193019290506101a4565b634e487b7160e01b600052604160045260246000fd5b6104206103e6366108a5565b6103f1929192610b6c565b5060006103fe36846109e6565b604051809681926308c7427760e11b83526020600484015260248301906108ee565b038173__$a0fe38a9a81205afccc10810b09a4d3f45$__5af492831561050f576100d6946000946104ea575b506040519361045a856106db565b84526001600160a01b031660208401819052604051926104849061047d856106db565b36906109e6565b8352602083015260405191610498836106c0565b60008352604051936104a9856106f6565b845260208401526040830152600060608301526000608083015260a0820152604051906104d5826106db565b8152600060208201526040519182918261095d565b6105089194503d806000833e6105008183610711565b810190610bbf565b928561044c565b6040513d6000823e3d90fd5b61055c610527366108a5565b61052f610b6c565b5060006103fe60405194610542866106db565b61054c36826109e6565b86526063602087015236906109e6565b038173__$a0fe38a9a81205afccc10810b09a4d3f45$__5af491821561050f576100d6946000936105b3575b5060405192610596846106db565b83526001600160a01b0316602083015260405191610498836106c0565b6105c99193503d806000833e6105008183610711565b9185610588565b60003660031901126100da576105e5816106c0565b60008152604051906105f6826106c0565b815260405190610605826106db565b815260209060008282015260405161061c816106c0565b600081526040519061062d826106c0565b81526040519061063c826106db565b815260008382015260405190610651826106c0565b6000825260405192610662846106f6565b83528383015260006040830152600060608301526000608083015260a08201526040519061068f826106db565b81526000828201526040516101ff816106b2858201948686526040830190610804565b03601f198101835282610711565b602081019081106001600160401b038211176103c457604052565b604081019081106001600160401b038211176103c457604052565b60c081019081106001600160401b038211176103c457604052565b90601f801991011681019081106001600160401b038211176103c457604052565b6001600160401b0381116103c45760051b60200190565b6001600160401b0381116103c457601f01601f191660200190565b90815160408252606082019051926020918260408501528451809152826080850195019060005b8181106107a7575050508101516001600160a01b031691015290565b82516001600160a01b03168752958401959184019160010161078b565b919082519283825260005b8481106107f0575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016107cf565b90602080610886845160408552610828815160c06040880152610100870190610764565b60a06108458584015192603f1993848a83030160608b0152610764565b92604081015160808901526001600160401b036060820151168289015263ffffffff60e01b60808201511660c08901520151908683030160e08701526107c4565b930151151591015290565b35906001600160a01b03821682036100da57565b600319906060818301126100da57600435916001600160401b0383116100da57826020920301126100da57600401906024356001600160a01b03811681036100da579060443590565b60209081604081850192519482815285518094520193019160005b828110610917575050505090565b83516001600160a01b031685529381019392810192600101610909565b90602061094a83516040845260408401906108ee565b928101516001600160a01b031691015290565b602081526040602061088684518383860152610986815160c06060880152610120870190610934565b60a06109a38584015192605f1993848a83030160808b0152610934565b868401518883015260608401516001600160401b031660c089015260808401516001600160e01b03191660e08901529201518683039091016101008701526107c4565b9190602080848303126100da57604051906001600160401b03818301818111848210176103c457604052829580359182116100da57019280601f850112156100da578335610a3381610732565b94610a416040519687610711565b818652838087019260051b8201019283116100da578301905b828210610a68575050505052565b838091610a7484610891565b815201910190610a5a565b9190916040818403126100da5760405190604082016001600160401b0390838110828211176103c457604052829482359182116100da5782610aca60209492610ad2948694016109e6565b855201610891565b910152565b35906001600160401b03821682036100da57565b35906001600160e01b0319821682036100da57565b929192610b0c82610749565b91610b1a6040519384610711565b8294818452818301116100da578281602093846000960137010152565b359081151582036100da57565b60405190610b51826106db565b6000602083604051610b62816106c0565b6060815281520152565b60405190610b79826106db565b6000602083604051610b8a816106f6565b610b92610b44565b8152610b9c610b44565b83820152836040820152836060820152836080820152606060a082015281520152565b90602080838303126100da5782516001600160401b03938482116100da57019281848403126100da5760405193610bf5856106c0565b80519182116100da57019180601f840112156100da578251610c1681610732565b93610c246040519586610711565b818552838086019260051b8201019283116100da578301905b828210610c4d5750505050815290565b81516001600160a01b03811681036100da578152908301908301610c3d565b90359060be19813603018212156100da570190565b903590603e19813603018212156100da570190565b356001600160e01b0319811681036100da5790565b9035603e19823603018112156100da570190565b601e19919080353682900384018112156100da578101604083526060830193813590823603018112156100da57019081356020809301946001600160401b0382116100da578160051b360386136100da5781908460408701525260808401949060005b818110610d4857506001600160a01b0392610d41925084019050610891565b1691015290565b9091958480600192838060a01b03610d5f8b610891565b168152019701929101610d22565b90610d9a60409283610d7f8280610c6c565b013590610d8c8180610c6c565b602093818580930190610c81565b6001600160a01b0391013581811681036100da57610db7906111a0565b926001600160e01b03199182610dd86080610dd28780610c6c565b01610c96565b16156110ba5750610de98380610c6c565b9160a0830135601e199384813603018212156100da57019081356001600160401b03928382116100da57880181360381136100da57610e29913691610b00565b9387860190813580151581036100da57610fa0575b505050610e81610e576080610dd287610e739798610c6c565b94895194859189830197885289602484015260448301906107c4565b03601f198101855284610711565b81610edc57505060009182917f416464726573733a206c6f772d6c6576656c2063616c6c206661696c65640000610ed997985196610ebe886106db565b601e8852870152519082855af1610ed361125a565b9161128a565b90565b9490968051956060870190878210908211176103c4578152602986527f416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c82870152681d594819985a5b195960ba1b81870152874710610f4e575050610ed9949560009283925191855af1610ed361125a565b60849250519062461bcd60e51b82526004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152fd5b909194508951948880870152863560be19883603018112156100da5787018b80880152610fe2610fd08280610cab565b60c060808a0152610140890190610cbf565b92611006610ff28c840184610cab565b94607f1995868b83030160a08c0152610cbf565b928d83013560c08a01528661101d60608501610ad7565b1660e08a015261102f60808401610aeb565b1661010089015260a082013590823603018112156100da57018981359101968582116100da5781360388136100da576110b28b828585611098610e819a610dd298610e739f610e579c8760809d0301610120880152818652878601376000868486010152610b37565b15156060840152601f01601f191601038084520182610711565b965050610e3e565b925080939150959495471061115c576000809381938293165af16110dc61125a565b50156110f45750516110ed816106c0565b6000815290565b608491519062461bcd60e51b82526004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b845162461bcd60e51b815260048101859052601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b60008073ffffffffffffffffffffffff0000000000000000831660ff60981b146111e5575b156111e1576111d3906111f8565b906111dc575090565b905090565b5090565b50506001600160401b03811660016111c5565b60009081526016600a6020836002607f60991b015afa9181519161040a8360018060a01b03169360a01c61ffff160361124e575b83158015611243575b61123c5750565b9250829150565b5060163d1415611235565b6000935091508161122c565b3d15611285573d9061126b82610749565b916112796040519384610711565b82523d6000602084013e565b606090565b919290156112ec575081511561129e575090565b3b156112a75790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156112ff5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906113239060248301906107c4565b0390fd5b600090815b83831061133c5750505050600190565b60606113566113508560051b850185610c81565b80610c6c565b0135906001600160401b0382168092036100da578111158061138b575b6113825760019092019161132c565b50505050600090565b5082151561137356fea2646970667358221220789d86c2ed19160add2665d1a38a7dcd2c38e91f4567274b975fcf8562a257c564736f6c63430008110033";

type CrossMsgHelperConstructorParams =
  | [linkLibraryAddresses: CrossMsgHelperLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CrossMsgHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class CrossMsgHelper__factory extends ContractFactory {
  constructor(...args: CrossMsgHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        CrossMsgHelper__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: CrossMsgHelperLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$a0fe38a9a81205afccc10810b09a4d3f45\\$__", "g"),
      linkLibraryAddresses["src/lib/SubnetIDHelper.sol:SubnetIDHelper"]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CrossMsgHelper> {
    return super.deploy(overrides || {}) as Promise<CrossMsgHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): CrossMsgHelper {
    return super.attach(address) as CrossMsgHelper;
  }
  connect(signer: Signer): CrossMsgHelper__factory {
    return super.connect(signer) as CrossMsgHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CrossMsgHelperInterface {
    return new utils.Interface(_abi) as CrossMsgHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CrossMsgHelper {
    return new Contract(address, _abi, signerOrProvider) as CrossMsgHelper;
  }
}

export interface CrossMsgHelperLibraryAddresses {
  ["src/lib/SubnetIDHelper.sol:SubnetIDHelper"]: string;
}
