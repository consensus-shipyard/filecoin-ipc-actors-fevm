/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SubnetIDHelper,
  SubnetIDHelperInterface,
} from "../SubnetIDHelper";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet1",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet2",
        type: "tuple",
      },
    ],
    name: "commonParent",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "actor",
        type: "address",
      },
    ],
    name: "createSubnetId",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "newSubnet",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet1",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet2",
        type: "tuple",
      },
    ],
    name: "down",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet1",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet2",
        type: "tuple",
      },
    ],
    name: "equals",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
    ],
    name: "getActor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
    ],
    name: "getParentSubnet",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnetId",
        type: "tuple",
      },
    ],
    name: "isEmpty",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
    ],
    name: "isRoot",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
    ],
    name: "toHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "route",
            type: "address[]",
          },
        ],
        internalType: "struct SubnetID",
        name: "subnet",
        type: "tuple",
      },
    ],
    name: "toString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001a57610d589081610020823930815050f35b600080fdfe6040608081526004908136101561001557600080fd5b6000803560e01c8063089032d514610760578063118e84ee146105a8578063399912661461058757806359feac42146105625780636099e898146104c8578063862a88f8146104ad57806390ba52cf14610492578063aa5106cb14610300578063c836244d146102e25763e4ebe92c1461008e57600080fd5b61009736610896565b9282519183830167ffffffffffffffff90848110828211176102cf57855260058452602093640bdc9bdbdd60da1b8582015282905b6100d68880610947565b905082101561029f57879087519081886100f981830193848151938492016108c8565b8101602f60f81b8a82015203908461014061013b61012c6001978887018852610126602180980189610848565b80610947565b6001600160a01b03949161097d565b61098d565b16908a5191606083018381108982111761028c578c52602a83528a8301938c368637835115610279576030855383518710156102795760789084015360295b86811161020e57506101cd57926101c5928a926101b96101aa968e51978895518092888801906108c8565b840191518093868401906108c8565b01038084520182610848565b9101906100cc565b6064898b808e519262461bcd60e51b845283015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b90600f81166010811015610266578451831015610266576f181899199a1a9b1b9c1cb0b131b232b360811b901a8483018d01538a1c908015610253576000190161017f565b634e487b7160e01b8a5260118b5260248afd5b634e487b7160e01b8b5260328c5260248bfd5b634e487b7160e01b8a5260328b5260248afd5b634e487b7160e01b8a5260418b5260248afd5b86866102c19282519382859384528251928184809387015286860191016108c8565b601f01601f19168101030190f35b634e487b7160e01b835260418452602483fd5b6020836102f76102f136610776565b90610ab0565b90519015158152f35b509060031991818336011261048f5783359267ffffffffffffffff841161048b57602090848601943603011261048f576001600160a01b039260243584811692919083900361048b5783519461035586610816565b606086526103638280610947565b929050600180931061043e576103798180610947565b905083810180911161042b57906103918493926108eb565b885284925b6103e2575b50505050835180519160001983019283116103cf57506103cb9550906103c09161091d565b5251918291826107c9565b0390f35b634e487b7160e01b815260118752602490fd5b6103ec8180610947565b905083101561042657838361040f61013b83966104098680610947565b9061097d565b8461041b838d5161091d565b911690520192610396565b61039b565b634e487b7160e01b855260118952602485fd5b855162461bcd60e51b81526020818a0152602160248201527f63616e6e6f7420736574206163746f7220666f7220656d707479207375626e656044820152601d60fa1b6064820152608490fd5b5080fd5b80fd5b6020836104a66104a136610896565b6109a1565b9051908152f35b60208360016104be61012636610896565b9290505191148152f35b50906104d66104a136610896565b81516104e181610816565b8381528251906104f082610816565b815282516020948186810193878552606082019051908888840152815180915288608084019201935b8982821061054257505050610537925003601f198101835282610848565b519020149051908152f35b85516001600160a01b031684529485019486945090920191600101610519565b60208361057661057136610896565b610a4c565b90516001600160a01b039091168152f35b6103cb8361059d61059736610776565b90610aeb565b9051918291826107c9565b509060209260031990848236011261075c5780359167ffffffffffffffff908184116107585786908436030112610754578351926105e584610816565b8083013591821161075857013660238201121561075457818101359061060a8261086a565b9161061786519384610848565b80835260248884019160051b8301019136831161075057906024899201905b838210610739575050505082526060835161065081610816565b526001948583515111156106eb57508151516000198101919082116106d8575061067a85916108eb565b93905b61069f575b6103cb848480519161069383610816565b825251918291826107c9565b83518110156106d3579084809260018060a01b036106be82855161091d565b51166106ca828861091d565b5201909161067d565b610682565b634e487b7160e01b855260119052602484fd5b835162461bcd60e51b8152918201526024808201527f6572726f722067657474696e6720706172656e7420666f72207375626e65742060448201526330b2323960e11b606482015260849150fd5b82809161074584610882565b815201910190610636565b8780fd5b8480fd5b8580fd5b8380fd5b6103cb8361059d61077036610776565b90610bf9565b60031991906040838201126107c45767ffffffffffffffff906004358281116107c45760208582840301126107c457600401936024359283116107c457826020920301126107c45760040190565b600080fd5b9060209081835281606060408501925194828082015285518094520193019160005b8281106107f9575050505090565b83516001600160a01b0316855293810193928101926001016107eb565b6020810190811067ffffffffffffffff82111761083257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761083257604052565b67ffffffffffffffff81116108325760051b60200190565b35906001600160a01b03821682036107c457565b600319906020818301126107c4576004359167ffffffffffffffff83116107c457826020920301126107c45760040190565b60005b8381106108db5750506000910152565b81810151838201526020016108cb565b906108f58261086a565b6109026040519182610848565b8281528092610913601f199161086a565b0190602036910137565b80518210156109315760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b903590601e19813603018212156107c4570180359067ffffffffffffffff82116107c457602001918160051b360383136107c457565b91908110156109315760051b0190565b356001600160a01b03811681036107c45790565b6040516020918282019280845260608301918035601e19823603018112156107c457019080823592019267ffffffffffffffff83116107c4578260051b360384136107c457604085018290528290528391608083019160005b828110610a1d57505050610a17925003601f198101835282610848565b51902090565b91935091600190839081906001600160a01b03610a3989610882565b16815201950191019185939194926109fa565b6001610a588280610947565b90501115610aaa5780610a6e81610a7793610947565b92909180610947565b600019810191508111610a9457610a919261013b9261097d565b90565b634e487b7160e01b600052601160045260246000fd5b50600090565b610aba8180610947565b9050610ac68380610947565b91905003610ae457610ada610ae0916109a1565b916109a1565b1490565b5050600090565b916060604051610afa81610816565b5260005b610b088480610947565b9050811080610be5575b80610ba6575b15610b2557600101610afe565b9091508015610b8657610b37816108eb565b9060005b818110610b58575050604051919250610b5382610816565b815290565b80610b6c61013b6001936104098980610947565b610b76828661091d565b90838060a01b0316905201610b3b565b509050604051610b9581610816565b6000815260405190610b5382610816565b50610bb861013b826104098780610947565b610bc28480610947565b6001600160a01b03918291610bdc9161013b91879161097d565b16911614610b18565b50610bf08380610947565b90508110610b12565b604060608151610c0881610816565b52610c138280610947565b9050610c1f8480610947565b9190501115610d135760005b610c358480610947565b9050811080610cd4575b15610c4c57600101610c2b565b909192508015610cb757600190818101808211610a9457610c6c906108eb565b9360005b82811115610c8757505050505190610b5382610816565b80610c9a61013b86936104098680610947565b610ca4828961091d565b6001600160a01b03909116905201610c70565b5080519150610cc582610816565b600082525190610b5382610816565b50610ce661013b826104098680610947565b610cf08580610947565b6001600160a01b03918291610d0a9161013b91879161097d565b16911614610c3f565b915050805190610cc58261081656fea26469706673582212207fd261594f779053268ea82c7bcc5b1444e32819fe4a968e427f5e4fe87466bc64736f6c63430008110033";

export class SubnetIDHelper__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SubnetIDHelper> {
    return super.deploy(overrides || {}) as Promise<SubnetIDHelper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SubnetIDHelper {
    return super.attach(address) as SubnetIDHelper;
  }
  connect(signer: Signer): SubnetIDHelper__factory {
    return super.connect(signer) as SubnetIDHelper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubnetIDHelperInterface {
    return new utils.Interface(_abi) as SubnetIDHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SubnetIDHelper {
    return new Contract(address, _abi, signerOrProvider) as SubnetIDHelper;
  }
}
