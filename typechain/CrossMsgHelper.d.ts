/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface CrossMsgHelperInterface extends ethers.utils.Interface {
  functions: {
    "EMPTY_CROSS_MSG()": FunctionFragment;
    "createFundMsg((address[]),address,uint256)": FunctionFragment;
    "createReleaseMsg((address[]),address,uint256)": FunctionFragment;
    "isSorted(tuple[])": FunctionFragment;
    "toHash(tuple[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EMPTY_CROSS_MSG",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFundMsg",
    values: [{ route: string[] }, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createReleaseMsg",
    values: [{ route: string[] }, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSorted",
    values: [
      {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toHash",
    values: [
      {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "EMPTY_CROSS_MSG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFundMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createReleaseMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSorted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toHash", data: BytesLike): Result;

  events: {};
}

export class CrossMsgHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CrossMsgHelperInterface;

  functions: {
    EMPTY_CROSS_MSG(overrides?: CallOverrides): Promise<[string]>;

    createFundMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          },
          boolean
        ] & {
          message: [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          };
          wrapped: boolean;
        }
      ]
    >;

    createReleaseMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          },
          boolean
        ] & {
          message: [
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            },
            BigNumber,
            BigNumber,
            string,
            string
          ] & {
            from: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            to: [[string[]] & { route: string[] }, string] & {
              subnetId: [string[]] & { route: string[] };
              rawAddress: string;
            };
            value: BigNumber;
            nonce: BigNumber;
            method: string;
            params: string;
          };
          wrapped: boolean;
        }
      ]
    >;

    isSorted(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    toHash(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  EMPTY_CROSS_MSG(overrides?: CallOverrides): Promise<string>;

  createFundMsg(
    subnet: { route: string[] },
    signer: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      },
      boolean
    ] & {
      message: [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      };
      wrapped: boolean;
    }
  >;

  createReleaseMsg(
    subnet: { route: string[] },
    signer: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      },
      boolean
    ] & {
      message: [
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        },
        BigNumber,
        BigNumber,
        string,
        string
      ] & {
        from: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        to: [[string[]] & { route: string[] }, string] & {
          subnetId: [string[]] & { route: string[] };
          rawAddress: string;
        };
        value: BigNumber;
        nonce: BigNumber;
        method: string;
        params: string;
      };
      wrapped: boolean;
    }
  >;

  isSorted(
    crossMsgs: {
      message: {
        from: { subnetId: { route: string[] }; rawAddress: string };
        to: { subnetId: { route: string[] }; rawAddress: string };
        value: BigNumberish;
        nonce: BigNumberish;
        method: BytesLike;
        params: BytesLike;
      };
      wrapped: boolean;
    }[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  toHash(
    crossMsgs: {
      message: {
        from: { subnetId: { route: string[] }; rawAddress: string };
        to: { subnetId: { route: string[] }; rawAddress: string };
        value: BigNumberish;
        nonce: BigNumberish;
        method: BytesLike;
        params: BytesLike;
      };
      wrapped: boolean;
    }[],
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    EMPTY_CROSS_MSG(overrides?: CallOverrides): Promise<string>;

    createFundMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        },
        boolean
      ] & {
        message: [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        };
        wrapped: boolean;
      }
    >;

    createReleaseMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        },
        boolean
      ] & {
        message: [
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          },
          BigNumber,
          BigNumber,
          string,
          string
        ] & {
          from: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          to: [[string[]] & { route: string[] }, string] & {
            subnetId: [string[]] & { route: string[] };
            rawAddress: string;
          };
          value: BigNumber;
          nonce: BigNumber;
          method: string;
          params: string;
        };
        wrapped: boolean;
      }
    >;

    isSorted(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    toHash(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    EMPTY_CROSS_MSG(overrides?: CallOverrides): Promise<BigNumber>;

    createFundMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createReleaseMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSorted(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toHash(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EMPTY_CROSS_MSG(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createFundMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createReleaseMsg(
      subnet: { route: string[] },
      signer: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSorted(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toHash(
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
