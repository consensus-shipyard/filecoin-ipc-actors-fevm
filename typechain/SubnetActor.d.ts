/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SubnetActorInterface extends ethers.utils.Interface {
  functions: {
    "bottomUpCheckPeriod()": FunctionFragment;
    "committedCheckpoints(uint64)": FunctionFragment;
    "consensus()": FunctionFragment;
    "executableQueue()": FunctionFragment;
    "genesis()": FunctionFragment;
    "genesisEpoch()": FunctionFragment;
    "getParent()": FunctionFragment;
    "hasValidatorVotedForSubmission(uint64,address)": FunctionFragment;
    "ipcGatewayAddr()": FunctionFragment;
    "join()": FunctionFragment;
    "kill()": FunctionFragment;
    "lastVotingExecutedEpoch()": FunctionFragment;
    "leave()": FunctionFragment;
    "majorityPercentage()": FunctionFragment;
    "minActivationCollateral()": FunctionFragment;
    "minValidators()": FunctionFragment;
    "name()": FunctionFragment;
    "prevExecutedCheckpointHash()": FunctionFragment;
    "reward()": FunctionFragment;
    "stake(address)": FunctionFragment;
    "status()": FunctionFragment;
    "submissionPeriod()": FunctionFragment;
    "submitCheckpoint(((address[]),uint64,uint256,tuple[],tuple[],bytes32))": FunctionFragment;
    "topDownCheckPeriod()": FunctionFragment;
    "totalStake()": FunctionFragment;
    "validatorAt(uint256)": FunctionFragment;
    "validatorCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bottomUpCheckPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "committedCheckpoints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "consensus", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executableQueue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "genesis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "genesisEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getParent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasValidatorVotedForSubmission",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ipcGatewayAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "kill", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastVotingExecutedEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "majorityPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minActivationCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minValidators",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "prevExecutedCheckpointHash",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reward", values?: undefined): string;
  encodeFunctionData(functionFragment: "stake", values: [string]): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submissionPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitCheckpoint",
    values: [
      {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "topDownCheckPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "bottomUpCheckPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committedCheckpoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "consensus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executableQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "genesis", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "genesisEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasValidatorVotedForSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipcGatewayAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastVotingExecutedEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "majorityPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minActivationCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "prevExecutedCheckpointHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submissionPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitCheckpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topDownCheckPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCount",
    data: BytesLike
  ): Result;

  events: {};
}

export class SubnetActor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SubnetActorInterface;

  functions: {
    bottomUpCheckPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    committedCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string[]] & { route: string[] }, BigNumber, BigNumber, string] & {
        source: [string[]] & { route: string[] };
        epoch: BigNumber;
        fee: BigNumber;
        prevHash: string;
      }
    >;

    consensus(overrides?: CallOverrides): Promise<[number]>;

    executableQueue(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        period: BigNumber;
        first: BigNumber;
        last: BigNumber;
      }
    >;

    genesis(overrides?: CallOverrides): Promise<[string]>;

    genesisEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getParent(
      overrides?: CallOverrides
    ): Promise<[[string[]] & { route: string[] }]>;

    hasValidatorVotedForSubmission(
      epoch: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ipcGatewayAddr(overrides?: CallOverrides): Promise<[string]>;

    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    majorityPercentage(overrides?: CallOverrides): Promise<[number]>;

    minActivationCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    minValidators(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    prevExecutedCheckpointHash(overrides?: CallOverrides): Promise<[string]>;

    reward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    status(overrides?: CallOverrides): Promise<[number]>;

    submissionPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    topDownCheckPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    validatorCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  bottomUpCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  committedCheckpoints(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [[string[]] & { route: string[] }, BigNumber, BigNumber, string] & {
      source: [string[]] & { route: string[] };
      epoch: BigNumber;
      fee: BigNumber;
      prevHash: string;
    }
  >;

  consensus(overrides?: CallOverrides): Promise<number>;

  executableQueue(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      period: BigNumber;
      first: BigNumber;
      last: BigNumber;
    }
  >;

  genesis(overrides?: CallOverrides): Promise<string>;

  genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getParent(
    overrides?: CallOverrides
  ): Promise<[string[]] & { route: string[] }>;

  hasValidatorVotedForSubmission(
    epoch: BigNumberish,
    submitter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ipcGatewayAddr(overrides?: CallOverrides): Promise<string>;

  join(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  leave(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  majorityPercentage(overrides?: CallOverrides): Promise<number>;

  minActivationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  minValidators(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  prevExecutedCheckpointHash(overrides?: CallOverrides): Promise<string>;

  reward(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  status(overrides?: CallOverrides): Promise<number>;

  submissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  submitCheckpoint(
    checkpoint: {
      source: { route: string[] };
      epoch: BigNumberish;
      fee: BigNumberish;
      crossMsgs: {
        message: {
          from: { subnetId: { route: string[] }; rawAddress: string };
          to: { subnetId: { route: string[] }; rawAddress: string };
          value: BigNumberish;
          nonce: BigNumberish;
          method: BytesLike;
          params: BytesLike;
        };
        wrapped: boolean;
      }[];
      children: { source: { route: string[] }; checks: BytesLike[] }[];
      prevHash: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  topDownCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  validatorAt(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  validatorCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    bottomUpCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    committedCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [[string[]] & { route: string[] }, BigNumber, BigNumber, string] & {
        source: [string[]] & { route: string[] };
        epoch: BigNumber;
        fee: BigNumber;
        prevHash: string;
      }
    >;

    consensus(overrides?: CallOverrides): Promise<number>;

    executableQueue(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        period: BigNumber;
        first: BigNumber;
        last: BigNumber;
      }
    >;

    genesis(overrides?: CallOverrides): Promise<string>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getParent(
      overrides?: CallOverrides
    ): Promise<[string[]] & { route: string[] }>;

    hasValidatorVotedForSubmission(
      epoch: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ipcGatewayAddr(overrides?: CallOverrides): Promise<string>;

    join(overrides?: CallOverrides): Promise<void>;

    kill(overrides?: CallOverrides): Promise<void>;

    lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    leave(overrides?: CallOverrides): Promise<void>;

    majorityPercentage(overrides?: CallOverrides): Promise<number>;

    minActivationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    minValidators(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    prevExecutedCheckpointHash(overrides?: CallOverrides): Promise<string>;

    reward(overrides?: CallOverrides): Promise<void>;

    stake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<number>;

    submissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    topDownCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    validatorAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    bottomUpCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    committedCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    consensus(overrides?: CallOverrides): Promise<BigNumber>;

    executableQueue(overrides?: CallOverrides): Promise<BigNumber>;

    genesis(overrides?: CallOverrides): Promise<BigNumber>;

    genesisEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getParent(overrides?: CallOverrides): Promise<BigNumber>;

    hasValidatorVotedForSubmission(
      epoch: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipcGatewayAddr(overrides?: CallOverrides): Promise<BigNumber>;

    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastVotingExecutedEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    majorityPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    minActivationCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    minValidators(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    prevExecutedCheckpointHash(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    submissionPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    topDownCheckPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    validatorAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bottomUpCheckPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    committedCheckpoints(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    consensus(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executableQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    genesisEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasValidatorVotedForSubmission(
      epoch: BigNumberish,
      submitter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipcGatewayAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    join(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastVotingExecutedEpoch(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    leave(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    majorityPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minActivationCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    prevExecutedCheckpointHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submissionPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitCheckpoint(
      checkpoint: {
        source: { route: string[] };
        epoch: BigNumberish;
        fee: BigNumberish;
        crossMsgs: {
          message: {
            from: { subnetId: { route: string[] }; rawAddress: string };
            to: { subnetId: { route: string[] }; rawAddress: string };
            value: BigNumberish;
            nonce: BigNumberish;
            method: BytesLike;
            params: BytesLike;
          };
          wrapped: boolean;
        }[];
        children: { source: { route: string[] }; checks: BytesLike[] }[];
        prevHash: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    topDownCheckPeriod(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validatorAt(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
