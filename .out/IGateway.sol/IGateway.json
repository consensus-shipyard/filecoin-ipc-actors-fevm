{"abi":[{"type":"function","name":"addStake","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"commitCheckpoint","inputs":[{"name":"bottomUpCheckpoint","type":"tuple","internalType":"struct BottomUpCheckpoint","components":[{"name":"subnetID","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"blockHeight","type":"uint256","internalType":"uint256"},{"name":"blockHash","type":"bytes32","internalType":"bytes32"},{"name":"nextConfigurationNumber","type":"uint64","internalType":"uint64"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"commitParentFinality","inputs":[{"name":"finality","type":"tuple","internalType":"struct ParentFinality","components":[{"name":"height","type":"uint256","internalType":"uint256"},{"name":"blockHash","type":"bytes32","internalType":"bytes32"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createBottomUpCheckpoint","inputs":[{"name":"checkpoint","type":"tuple","internalType":"struct BottomUpCheckpoint","components":[{"name":"subnetID","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"blockHeight","type":"uint256","internalType":"uint256"},{"name":"blockHash","type":"bytes32","internalType":"bytes32"},{"name":"nextConfigurationNumber","type":"uint64","internalType":"uint64"}]},{"name":"membershipRootHash","type":"bytes32","internalType":"bytes32"},{"name":"membershipWeight","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"execBottomUpMsgBatch","inputs":[{"name":"batch","type":"tuple","internalType":"struct BottomUpMsgBatch","components":[{"name":"subnetID","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"blockHeight","type":"uint256","internalType":"uint256"},{"name":"msgs","type":"tuple[]","internalType":"struct CrossMsg[]","components":[{"name":"message","type":"tuple","internalType":"struct StorableMsg","components":[{"name":"from","type":"tuple","internalType":"struct IPCAddress","components":[{"name":"subnetId","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"rawAddress","type":"tuple","internalType":"struct FvmAddress","components":[{"name":"addrType","type":"uint8","internalType":"uint8"},{"name":"payload","type":"bytes","internalType":"bytes"}]}]},{"name":"to","type":"tuple","internalType":"struct IPCAddress","components":[{"name":"subnetId","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"rawAddress","type":"tuple","internalType":"struct FvmAddress","components":[{"name":"addrType","type":"uint8","internalType":"uint8"},{"name":"payload","type":"bytes","internalType":"bytes"}]}]},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"nonce","type":"uint64","internalType":"uint64"},{"name":"method","type":"bytes4","internalType":"bytes4"},{"name":"params","type":"bytes","internalType":"bytes"},{"name":"fee","type":"uint256","internalType":"uint256"}]},{"name":"wrapped","type":"bool","internalType":"bool"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"fund","inputs":[{"name":"subnetId","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"to","type":"tuple","internalType":"struct FvmAddress","components":[{"name":"addrType","type":"uint8","internalType":"uint8"},{"name":"payload","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"fundWithToken","inputs":[{"name":"subnetId","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"to","type":"tuple","internalType":"struct FvmAddress","components":[{"name":"addrType","type":"uint8","internalType":"uint8"},{"name":"payload","type":"bytes","internalType":"bytes"}]},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"kill","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"propagate","inputs":[{"name":"msgCid","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"register","inputs":[{"name":"genesisCircSupply","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"release","inputs":[{"name":"to","type":"tuple","internalType":"struct FvmAddress","components":[{"name":"addrType","type":"uint8","internalType":"uint8"},{"name":"payload","type":"bytes","internalType":"bytes"}]}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"releaseRewardForRelayer","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"releaseStake","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"sendUserXnetMessage","inputs":[{"name":"crossMsg","type":"tuple","internalType":"struct CrossMsg","components":[{"name":"message","type":"tuple","internalType":"struct StorableMsg","components":[{"name":"from","type":"tuple","internalType":"struct IPCAddress","components":[{"name":"subnetId","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"rawAddress","type":"tuple","internalType":"struct FvmAddress","components":[{"name":"addrType","type":"uint8","internalType":"uint8"},{"name":"payload","type":"bytes","internalType":"bytes"}]}]},{"name":"to","type":"tuple","internalType":"struct IPCAddress","components":[{"name":"subnetId","type":"tuple","internalType":"struct SubnetID","components":[{"name":"root","type":"uint64","internalType":"uint64"},{"name":"route","type":"address[]","internalType":"address[]"}]},{"name":"rawAddress","type":"tuple","internalType":"struct FvmAddress","components":[{"name":"addrType","type":"uint8","internalType":"uint8"},{"name":"payload","type":"bytes","internalType":"bytes"}]}]},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"nonce","type":"uint64","internalType":"uint64"},{"name":"method","type":"bytes4","internalType":"bytes4"},{"name":"params","type":"bytes","internalType":"bytes"},{"name":"fee","type":"uint256","internalType":"uint256"}]},{"name":"wrapped","type":"bool","internalType":"bool"}]}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addStake()":"5a627dbc","commitCheckpoint(((uint64,address[]),uint256,bytes32,uint64))":"47dc9b4f","commitParentFinality((uint256,bytes32))":"11196974","createBottomUpCheckpoint(((uint64,address[]),uint256,bytes32,uint64),bytes32,uint256)":"74303771","execBottomUpMsgBatch(((uint64,address[]),uint256,((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[]))":"0bed7615","fund((uint64,address[]),(uint8,bytes))":"18f44b70","fundWithToken((uint64,address[]),(uint8,bytes),uint256)":"0517e1aa","kill()":"41c0e1b5","propagate(bytes32)":"25bf0db6","register(uint256)":"f207564e","release((uint8,bytes))":"6b2c1eef","releaseRewardForRelayer(uint256)":"d8e25572","releaseStake(uint256)":"45f54485","sendUserXnetMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))":"210b944e"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetID\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextConfigurationNumber\",\"type\":\"uint64\"}],\"internalType\":\"struct BottomUpCheckpoint\",\"name\":\"bottomUpCheckpoint\",\"type\":\"tuple\"}],\"name\":\"commitCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ParentFinality\",\"name\":\"finality\",\"type\":\"tuple\"}],\"name\":\"commitParentFinality\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetID\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextConfigurationNumber\",\"type\":\"uint64\"}],\"internalType\":\"struct BottomUpCheckpoint\",\"name\":\"checkpoint\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"membershipRootHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"membershipWeight\",\"type\":\"uint256\"}],\"name\":\"createBottomUpCheckpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetID\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"blockHeight\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct StorableMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"}],\"internalType\":\"struct CrossMsg[]\",\"name\":\"msgs\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BottomUpMsgBatch\",\"name\":\"batch\",\"type\":\"tuple\"}],\"name\":\"execBottomUpMsgBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"fundWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgCid\",\"type\":\"bytes32\"}],\"name\":\"propagate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"genesisCircSupply\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"to\",\"type\":\"tuple\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseRewardForRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"root\",\"type\":\"uint64\"},{\"internalType\":\"address[]\",\"name\":\"route\",\"type\":\"address[]\"}],\"internalType\":\"struct SubnetID\",\"name\":\"subnetId\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"addrType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"internalType\":\"struct FvmAddress\",\"name\":\"rawAddress\",\"type\":\"tuple\"}],\"internalType\":\"struct IPCAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes4\",\"name\":\"method\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct StorableMsg\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"wrapped\",\"type\":\"bool\"}],\"internalType\":\"struct CrossMsg\",\"name\":\"crossMsg\",\"type\":\"tuple\"}],\"name\":\"sendUserXnetMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"LimeChain team\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Gateway interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake()\":{\"notice\":\"AddStake adds stake to the collateral of a subnet.\"},\"commitCheckpoint(((uint64,address[]),uint256,bytes32,uint64))\":{\"notice\":\"commitCheckpoint propagates the commitment of a checkpoint from a child\"},\"commitParentFinality((uint256,bytes32))\":{\"notice\":\"commit the ipc parent finality into storage\"},\"createBottomUpCheckpoint(((uint64,address[]),uint256,bytes32,uint64),bytes32,uint256)\":{\"notice\":\"creates a new bottom-up checkpoint\"},\"execBottomUpMsgBatch(((uint64,address[]),uint256,((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[]))\":{\"notice\":\"execBottomUpMsgBatch submits a batch of cross-net messages from a subnet actor for their execution.\"},\"fund((uint64,address[]),(uint8,bytes))\":{\"notice\":\"fund locks the received funds \\u2014denominated in the native coin\\u2014 and moves the value down the hierarchy, crediting the funds to the specified address in the destination network. This functions ends up minting supply in the subnet equal to the value of the transaction. It does so by committing the relevant top-down message, updating the top-down nonce along the way. Calling this method on a subnet whose supply source is not 'native' will revert with UnexpectedSupplySource().\"},\"fundWithToken((uint64,address[]),(uint8,bytes),uint256)\":{\"notice\":\"fundWithToken locks the specified amount of tokens in the ERC20 contract linked to the subnet, and moves the value down the hierarchy, crediting the funds as native coins to the specified address in the destination network. This method expects the caller to have approved the gateway to spend `amount` tokens on their behalf (usually done through IERC20#approve). Tokens are locked by calling IERC20#transferFrom(caller, address(this), amount). A failure in transferring tokens to the gateway will revert the call. It's possible to call this method from an EOA or a contract. Regardless, it's recommended to approve strictly the amount that will subsequently be deposited into the subnet. Keeping outstanding approvals is not recommended. Calling this method on a subnet whose supply source is not 'ERC20' will revert with UnexpectedSupplySource().\"},\"kill()\":{\"notice\":\"Kill propagates the kill signal from a subnet actor to unregister it from th hierarchy.\"},\"propagate(bytes32)\":{\"notice\":\"Propagates the stored postbox item for the given cid\"},\"register(uint256)\":{\"notice\":\"Register is called by subnet actors to put the required collateral and register the subnet to the hierarchy.\"},\"release((uint8,bytes))\":{\"notice\":\"Release creates a new check message to release funds in parent chain This function burns the funds that will be released in the current subnet and propagates a new checkpoint message to the parent chain to signal the amount of funds that can be released for a specific address.\"},\"releaseRewardForRelayer(uint256)\":{\"notice\":\"Release reward for relayer\"},\"releaseStake(uint256)\":{\"notice\":\"Release stake recovers some collateral of the subnet\"},\"sendUserXnetMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))\":{\"notice\":\"SendUserXnetMessage sends an arbitrary cross-message to other subnet in the hierarchy. If the message includes any funds they need to be burnt (like in Release) before being propagated to the corresponding subnet. The circulating supply in each subnet needs to be updated as the message passes through them. Params expect a raw message without any subnet context (the IPC address is included in the message by the actor). Only actors are allowed to send arbitrary cross-messages as a side-effect of their execution. For plain token exchanges fund and release have to be used.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IGateway.sol\":\"IGateway\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":\\\"ds-test/=lib/forge-std/lib/ds-test/src/,forge-std/=lib/forge-std/src/,openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/,fevmate=lib/fevmate/contracts,murky/=lib/murky/src,elliptic-curve-solidity/=lib/elliptic-curve-solidity\\\"/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":elliptic-curve-solidity/=lib/elliptic-curve-solidity/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":fevmate/=lib/fevmate/contracts/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Address.sol\":{\"keccak256\":\"0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13ff04f87357176e2b267730f288013269eefce0862ea8f4bf3f420948eb7d5\",\"dweb:/ipfs/QmQZRjF3CdCdoUvqhrT9KXYjrjmdmFQqENtuiHTMbyt6xo\"]},\"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\":{\"keccak256\":\"0xeefcbb8cb69f04a18f6dc61d4811133ce9aeff96ce60820f758abc52ef55b892\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://81c61c0dd40890f6a4b1fb792bc5b5b61e821fcafa2aae6c7eda6d4f1ece2593\",\"dweb:/ipfs/QmRLMrq6BiPS9wGu7ZC174SFYWCu6cxbU3agDw2XgJeDpT\"]},\"src/enums/ConsensusType.sol\":{\"keccak256\":\"0xc5efd8c66b57dadaba4178c4b4d087b30cb84cbac38fb288a8c3b65075a9f59d\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://6fcffaa8e40322ae27958603884cc07d06e9efd59cf12764f28945b7a47e11d0\",\"dweb:/ipfs/Qmc3PBovpcvj7jgVq5GwR5SkiUXBymT1tw74mvu5ccNqoZ\"]},\"src/errors/IPCErrors.sol\":{\"keccak256\":\"0xc6f2cd7c30bf8060791d0ae4d9ff51db970462e53952cd9572bd9888d8d5d0dd\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://23dc0d8932afd62a606d79ff4a7e6629b099999c5507ead80c2ae704174acb71\",\"dweb:/ipfs/QmdS9uEG6PNYaGECMaCbEqWgyEnW9dq8gT83abZVJGAzpe\"]},\"src/interfaces/IGateway.sol\":{\"keccak256\":\"0xc8fd2acf790a348d9b1a230c6fb4756286cb816d3fde668030a632ff9dc4fa74\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://f42023a8d891b6cf51802ea25f79a90c246f3aa1f1937da063ecd65350365597\",\"dweb:/ipfs/QmacYPmXewCSZZMzuqhdxw22iCjizj6NC6Uz19yxC9ivZ9\"]},\"src/lib/LibStaking.sol\":{\"keccak256\":\"0x2ca90d9213b49033ff11524ca8f69d5ea4b6adf455dfc061be61da34c71ff1f9\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://d1c93278180ef7a8c64dfb41c8246a2861c1ee0e8b254484d1359ef53f4211ce\",\"dweb:/ipfs/QmTg21GffvzgY93kk6JFCDXQhQyCQcUo2BrL18AuNznqw9\"]},\"src/lib/LibStakingChangeLog.sol\":{\"keccak256\":\"0xa4273910f3ad3377843e6bf386b6a6752aa635e2962effdb50657bcbb1f53583\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://bfc0de35c4dc0ce86b7dc360a48b4ec39d68dc1f384736df2eb5181fda7e7006\",\"dweb:/ipfs/QmW7Gm2DnmpVZdJ7gMx4vcumkG6pP7UJgBskdLtuJrSrq9\"]},\"src/lib/LibSubnetActorStorage.sol\":{\"keccak256\":\"0x96c45f1d488da0ca7e9ef51aa717528516e1e6dac9294c1c14190ce345bee80f\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://700ace2b8d7f7f9ad215f05518e279ca9197ddb0cbea64d7e0fb480909de8f24\",\"dweb:/ipfs/QmfNUdSJ24aypQ8vCgiCQfT3C6c3qGwVCXsw7pcU98UY1m\"]},\"src/lib/priority/LibMaxPQ.sol\":{\"keccak256\":\"0x4a975f61e5dc814ffceb6cedf56ee69a090d28a688f3c1ffcf25b394a6d40cdc\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://31f713c852ab92e6d1447fac4d70202f5b74049490be35d79ac7b081dd49e747\",\"dweb:/ipfs/QmaM99kHzHMuYoYtMdWmUbeqmpUNqmBZtRz72dpNyFhYyx\"]},\"src/lib/priority/LibMinPQ.sol\":{\"keccak256\":\"0x532b4dc7c4b3c9bfc37258dad0a36d141a9cd4621d0382f2f1a84e7f9fb6224d\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://22f582177c7c48c3493d06be3d2122f87278b54d7d94817c37e6e2a39035d5be\",\"dweb:/ipfs/QmRbViZs6jLNDtKKGP3W79o7vncY58eiC7q2m7qiuruGkd\"]},\"src/lib/priority/LibPQ.sol\":{\"keccak256\":\"0xc580f2c0bcdb3e38d5a7cc6e44e14c970b98385306594b37aa7689af8c7b4d09\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://e2d85012263be8c7fe1c692405772cd9082422deb95d558ce02d8153b73281f0\",\"dweb:/ipfs/QmdK8Ewm7SvBUhirDPuKx6xJjUmpAohazMMsjTgqWNLm8t\"]},\"src/structs/CrossNet.sol\":{\"keccak256\":\"0x1e85d98f0d9ab061b6874c0ba0c89235a785a533fe10c9a1518e20d0a027c48c\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://9fd2c2cef4a723750958228a03d1d5daff09f27e9b19278e90a6b5569acd2f1e\",\"dweb:/ipfs/QmS2JJJwyzjgWdrQvwiujeuuoQjc1LntptYKhAzMnWTVwQ\"]},\"src/structs/FvmAddress.sol\":{\"keccak256\":\"0xfc8c16b96bd5b7d4a163f586bd36936f7170304de70aa487a0b11c60e5ac9069\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://6b6572d5f28a9fa12ff91d45601c063cdaf68a12b9f8e46131c6dc4cd28255ac\",\"dweb:/ipfs/QmSC8gRWVuPKjobgDDyHbm2cmcPN8pWzbEmXKmdMZR8YKu\"]},\"src/structs/Subnet.sol\":{\"keccak256\":\"0x0a2b7b7490585019e6aecd89e3d1ca0713e92eec10c3fc0c76d87ad2cb8a86d5\",\"license\":\"MIT OR Apache-2.0\",\"urls\":[\"bzz-raw://35b1a7f849f045b3644e8048bb694ad3ac1c60b8308b3ee1cf6480ba97bd7f1f\",\"dweb:/ipfs/Qmae9Hie6zd26A6rW2e1J7MySVhtgazUvweHE97YLazwD1\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.19+commit.7dd6d404"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"payable","type":"function","name":"addStake"},{"inputs":[{"internalType":"struct BottomUpCheckpoint","name":"bottomUpCheckpoint","type":"tuple","components":[{"internalType":"struct SubnetID","name":"subnetID","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"uint256","name":"blockHeight","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"uint64","name":"nextConfigurationNumber","type":"uint64"}]}],"stateMutability":"nonpayable","type":"function","name":"commitCheckpoint"},{"inputs":[{"internalType":"struct ParentFinality","name":"finality","type":"tuple","components":[{"internalType":"uint256","name":"height","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"}]}],"stateMutability":"nonpayable","type":"function","name":"commitParentFinality"},{"inputs":[{"internalType":"struct BottomUpCheckpoint","name":"checkpoint","type":"tuple","components":[{"internalType":"struct SubnetID","name":"subnetID","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"uint256","name":"blockHeight","type":"uint256"},{"internalType":"bytes32","name":"blockHash","type":"bytes32"},{"internalType":"uint64","name":"nextConfigurationNumber","type":"uint64"}]},{"internalType":"bytes32","name":"membershipRootHash","type":"bytes32"},{"internalType":"uint256","name":"membershipWeight","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"createBottomUpCheckpoint"},{"inputs":[{"internalType":"struct BottomUpMsgBatch","name":"batch","type":"tuple","components":[{"internalType":"struct SubnetID","name":"subnetID","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"uint256","name":"blockHeight","type":"uint256"},{"internalType":"struct CrossMsg[]","name":"msgs","type":"tuple[]","components":[{"internalType":"struct StorableMsg","name":"message","type":"tuple","components":[{"internalType":"struct IPCAddress","name":"from","type":"tuple","components":[{"internalType":"struct SubnetID","name":"subnetId","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"struct FvmAddress","name":"rawAddress","type":"tuple","components":[{"internalType":"uint8","name":"addrType","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}]}]},{"internalType":"struct IPCAddress","name":"to","type":"tuple","components":[{"internalType":"struct SubnetID","name":"subnetId","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"struct FvmAddress","name":"rawAddress","type":"tuple","components":[{"internalType":"uint8","name":"addrType","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}]}]},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"bytes4","name":"method","type":"bytes4"},{"internalType":"bytes","name":"params","type":"bytes"},{"internalType":"uint256","name":"fee","type":"uint256"}]},{"internalType":"bool","name":"wrapped","type":"bool"}]}]}],"stateMutability":"nonpayable","type":"function","name":"execBottomUpMsgBatch"},{"inputs":[{"internalType":"struct SubnetID","name":"subnetId","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"struct FvmAddress","name":"to","type":"tuple","components":[{"internalType":"uint8","name":"addrType","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"fund"},{"inputs":[{"internalType":"struct SubnetID","name":"subnetId","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"struct FvmAddress","name":"to","type":"tuple","components":[{"internalType":"uint8","name":"addrType","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}]},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"fundWithToken"},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"kill"},{"inputs":[{"internalType":"bytes32","name":"msgCid","type":"bytes32"}],"stateMutability":"payable","type":"function","name":"propagate"},{"inputs":[{"internalType":"uint256","name":"genesisCircSupply","type":"uint256"}],"stateMutability":"payable","type":"function","name":"register"},{"inputs":[{"internalType":"struct FvmAddress","name":"to","type":"tuple","components":[{"internalType":"uint8","name":"addrType","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}]}],"stateMutability":"payable","type":"function","name":"release"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"releaseRewardForRelayer"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"releaseStake"},{"inputs":[{"internalType":"struct CrossMsg","name":"crossMsg","type":"tuple","components":[{"internalType":"struct StorableMsg","name":"message","type":"tuple","components":[{"internalType":"struct IPCAddress","name":"from","type":"tuple","components":[{"internalType":"struct SubnetID","name":"subnetId","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"struct FvmAddress","name":"rawAddress","type":"tuple","components":[{"internalType":"uint8","name":"addrType","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}]}]},{"internalType":"struct IPCAddress","name":"to","type":"tuple","components":[{"internalType":"struct SubnetID","name":"subnetId","type":"tuple","components":[{"internalType":"uint64","name":"root","type":"uint64"},{"internalType":"address[]","name":"route","type":"address[]"}]},{"internalType":"struct FvmAddress","name":"rawAddress","type":"tuple","components":[{"internalType":"uint8","name":"addrType","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}]}]},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint64","name":"nonce","type":"uint64"},{"internalType":"bytes4","name":"method","type":"bytes4"},{"internalType":"bytes","name":"params","type":"bytes"},{"internalType":"uint256","name":"fee","type":"uint256"}]},{"internalType":"bool","name":"wrapped","type":"bool"}]}],"stateMutability":"payable","type":"function","name":"sendUserXnetMessage"}],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{"addStake()":{"notice":"AddStake adds stake to the collateral of a subnet."},"commitCheckpoint(((uint64,address[]),uint256,bytes32,uint64))":{"notice":"commitCheckpoint propagates the commitment of a checkpoint from a child"},"commitParentFinality((uint256,bytes32))":{"notice":"commit the ipc parent finality into storage"},"createBottomUpCheckpoint(((uint64,address[]),uint256,bytes32,uint64),bytes32,uint256)":{"notice":"creates a new bottom-up checkpoint"},"execBottomUpMsgBatch(((uint64,address[]),uint256,((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool)[]))":{"notice":"execBottomUpMsgBatch submits a batch of cross-net messages from a subnet actor for their execution."},"fund((uint64,address[]),(uint8,bytes))":{"notice":"fund locks the received funds —denominated in the native coin— and moves the value down the hierarchy, crediting the funds to the specified address in the destination network. This functions ends up minting supply in the subnet equal to the value of the transaction. It does so by committing the relevant top-down message, updating the top-down nonce along the way. Calling this method on a subnet whose supply source is not 'native' will revert with UnexpectedSupplySource()."},"fundWithToken((uint64,address[]),(uint8,bytes),uint256)":{"notice":"fundWithToken locks the specified amount of tokens in the ERC20 contract linked to the subnet, and moves the value down the hierarchy, crediting the funds as native coins to the specified address in the destination network. This method expects the caller to have approved the gateway to spend `amount` tokens on their behalf (usually done through IERC20#approve). Tokens are locked by calling IERC20#transferFrom(caller, address(this), amount). A failure in transferring tokens to the gateway will revert the call. It's possible to call this method from an EOA or a contract. Regardless, it's recommended to approve strictly the amount that will subsequently be deposited into the subnet. Keeping outstanding approvals is not recommended. Calling this method on a subnet whose supply source is not 'ERC20' will revert with UnexpectedSupplySource()."},"kill()":{"notice":"Kill propagates the kill signal from a subnet actor to unregister it from th hierarchy."},"propagate(bytes32)":{"notice":"Propagates the stored postbox item for the given cid"},"register(uint256)":{"notice":"Register is called by subnet actors to put the required collateral and register the subnet to the hierarchy."},"release((uint8,bytes))":{"notice":"Release creates a new check message to release funds in parent chain This function burns the funds that will be released in the current subnet and propagates a new checkpoint message to the parent chain to signal the amount of funds that can be released for a specific address."},"releaseRewardForRelayer(uint256)":{"notice":"Release reward for relayer"},"releaseStake(uint256)":{"notice":"Release stake recovers some collateral of the subnet"},"sendUserXnetMessage(((((uint64,address[]),(uint8,bytes)),((uint64,address[]),(uint8,bytes)),uint256,uint64,bytes4,bytes,uint256),bool))":{"notice":"SendUserXnetMessage sends an arbitrary cross-message to other subnet in the hierarchy. If the message includes any funds they need to be burnt (like in Release) before being propagated to the corresponding subnet. The circulating supply in each subnet needs to be updated as the message passes through them. Params expect a raw message without any subnet context (the IPC address is included in the message by the actor). Only actors are allowed to send arbitrary cross-messages as a side-effect of their execution. For plain token exchanges fund and release have to be used."}},"version":1}},"settings":{"remappings":["\"ds-test/=lib/forge-std/lib/ds-test/src/,forge-std/=lib/forge-std/src/,openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/,fevmate=lib/fevmate/contracts,murky/=lib/murky/src,elliptic-curve-solidity/=lib/elliptic-curve-solidity\"/","ds-test/=lib/forge-std/lib/ds-test/src/","elliptic-curve-solidity/=lib/elliptic-curve-solidity/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","fevmate/=lib/fevmate/contracts/","forge-std/=lib/forge-std/src/","murky/=lib/murky/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IGateway.sol":"IGateway"},"libraries":{},"viaIR":true},"sources":{"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"keccak256":"0x67ca7745e6032aeda339ba3f5813abf9eeb4ec683520944fa878c2867aea58f1","urls":["bzz-raw://c13ff04f87357176e2b267730f288013269eefce0862ea8f4bf3f420948eb7d5","dweb:/ipfs/QmQZRjF3CdCdoUvqhrT9KXYjrjmdmFQqENtuiHTMbyt6xo"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol":{"keccak256":"0xeefcbb8cb69f04a18f6dc61d4811133ce9aeff96ce60820f758abc52ef55b892","urls":["bzz-raw://81c61c0dd40890f6a4b1fb792bc5b5b61e821fcafa2aae6c7eda6d4f1ece2593","dweb:/ipfs/QmRLMrq6BiPS9wGu7ZC174SFYWCu6cxbU3agDw2XgJeDpT"],"license":"MIT"},"src/enums/ConsensusType.sol":{"keccak256":"0xc5efd8c66b57dadaba4178c4b4d087b30cb84cbac38fb288a8c3b65075a9f59d","urls":["bzz-raw://6fcffaa8e40322ae27958603884cc07d06e9efd59cf12764f28945b7a47e11d0","dweb:/ipfs/Qmc3PBovpcvj7jgVq5GwR5SkiUXBymT1tw74mvu5ccNqoZ"],"license":"MIT OR Apache-2.0"},"src/errors/IPCErrors.sol":{"keccak256":"0xc6f2cd7c30bf8060791d0ae4d9ff51db970462e53952cd9572bd9888d8d5d0dd","urls":["bzz-raw://23dc0d8932afd62a606d79ff4a7e6629b099999c5507ead80c2ae704174acb71","dweb:/ipfs/QmdS9uEG6PNYaGECMaCbEqWgyEnW9dq8gT83abZVJGAzpe"],"license":"MIT OR Apache-2.0"},"src/interfaces/IGateway.sol":{"keccak256":"0xc8fd2acf790a348d9b1a230c6fb4756286cb816d3fde668030a632ff9dc4fa74","urls":["bzz-raw://f42023a8d891b6cf51802ea25f79a90c246f3aa1f1937da063ecd65350365597","dweb:/ipfs/QmacYPmXewCSZZMzuqhdxw22iCjizj6NC6Uz19yxC9ivZ9"],"license":"MIT OR Apache-2.0"},"src/lib/LibStaking.sol":{"keccak256":"0x2ca90d9213b49033ff11524ca8f69d5ea4b6adf455dfc061be61da34c71ff1f9","urls":["bzz-raw://d1c93278180ef7a8c64dfb41c8246a2861c1ee0e8b254484d1359ef53f4211ce","dweb:/ipfs/QmTg21GffvzgY93kk6JFCDXQhQyCQcUo2BrL18AuNznqw9"],"license":"MIT OR Apache-2.0"},"src/lib/LibStakingChangeLog.sol":{"keccak256":"0xa4273910f3ad3377843e6bf386b6a6752aa635e2962effdb50657bcbb1f53583","urls":["bzz-raw://bfc0de35c4dc0ce86b7dc360a48b4ec39d68dc1f384736df2eb5181fda7e7006","dweb:/ipfs/QmW7Gm2DnmpVZdJ7gMx4vcumkG6pP7UJgBskdLtuJrSrq9"],"license":"MIT OR Apache-2.0"},"src/lib/LibSubnetActorStorage.sol":{"keccak256":"0x96c45f1d488da0ca7e9ef51aa717528516e1e6dac9294c1c14190ce345bee80f","urls":["bzz-raw://700ace2b8d7f7f9ad215f05518e279ca9197ddb0cbea64d7e0fb480909de8f24","dweb:/ipfs/QmfNUdSJ24aypQ8vCgiCQfT3C6c3qGwVCXsw7pcU98UY1m"],"license":"MIT OR Apache-2.0"},"src/lib/priority/LibMaxPQ.sol":{"keccak256":"0x4a975f61e5dc814ffceb6cedf56ee69a090d28a688f3c1ffcf25b394a6d40cdc","urls":["bzz-raw://31f713c852ab92e6d1447fac4d70202f5b74049490be35d79ac7b081dd49e747","dweb:/ipfs/QmaM99kHzHMuYoYtMdWmUbeqmpUNqmBZtRz72dpNyFhYyx"],"license":"MIT OR Apache-2.0"},"src/lib/priority/LibMinPQ.sol":{"keccak256":"0x532b4dc7c4b3c9bfc37258dad0a36d141a9cd4621d0382f2f1a84e7f9fb6224d","urls":["bzz-raw://22f582177c7c48c3493d06be3d2122f87278b54d7d94817c37e6e2a39035d5be","dweb:/ipfs/QmRbViZs6jLNDtKKGP3W79o7vncY58eiC7q2m7qiuruGkd"],"license":"MIT OR Apache-2.0"},"src/lib/priority/LibPQ.sol":{"keccak256":"0xc580f2c0bcdb3e38d5a7cc6e44e14c970b98385306594b37aa7689af8c7b4d09","urls":["bzz-raw://e2d85012263be8c7fe1c692405772cd9082422deb95d558ce02d8153b73281f0","dweb:/ipfs/QmdK8Ewm7SvBUhirDPuKx6xJjUmpAohazMMsjTgqWNLm8t"],"license":"MIT OR Apache-2.0"},"src/structs/CrossNet.sol":{"keccak256":"0x1e85d98f0d9ab061b6874c0ba0c89235a785a533fe10c9a1518e20d0a027c48c","urls":["bzz-raw://9fd2c2cef4a723750958228a03d1d5daff09f27e9b19278e90a6b5569acd2f1e","dweb:/ipfs/QmS2JJJwyzjgWdrQvwiujeuuoQjc1LntptYKhAzMnWTVwQ"],"license":"MIT OR Apache-2.0"},"src/structs/FvmAddress.sol":{"keccak256":"0xfc8c16b96bd5b7d4a163f586bd36936f7170304de70aa487a0b11c60e5ac9069","urls":["bzz-raw://6b6572d5f28a9fa12ff91d45601c063cdaf68a12b9f8e46131c6dc4cd28255ac","dweb:/ipfs/QmSC8gRWVuPKjobgDDyHbm2cmcPN8pWzbEmXKmdMZR8YKu"],"license":"MIT OR Apache-2.0"},"src/structs/Subnet.sol":{"keccak256":"0x0a2b7b7490585019e6aecd89e3d1ca0713e92eec10c3fc0c76d87ad2cb8a86d5","urls":["bzz-raw://35b1a7f849f045b3644e8048bb694ad3ac1c60b8308b3ee1cf6480ba97bd7f1f","dweb:/ipfs/Qmae9Hie6zd26A6rW2e1J7MySVhtgazUvweHE97YLazwD1"],"license":"MIT OR Apache-2.0"}},"version":1},"ast":{"absolutePath":"src/interfaces/IGateway.sol","id":40355,"exportedSymbols":{"BottomUpCheckpoint":[49932],"BottomUpMsgBatch":[49945],"CrossMsg":[49974],"FvmAddress":[49998],"IGateway":[40354],"ParentFinality":[49918],"SubnetID":[50077]},"nodeType":"SourceUnit","src":"46:4687:57","nodes":[{"id":40243,"nodeType":"PragmaDirective","src":"46:23:57","nodes":[],"literals":["solidity","0.8",".19"]},{"id":40248,"nodeType":"ImportDirective","src":"71:103:57","nodes":[],"absolutePath":"src/structs/CrossNet.sol","file":"../structs/CrossNet.sol","nameLocation":"-1:-1:-1","scope":40355,"sourceUnit":49992,"symbolAliases":[{"foreign":{"id":40244,"name":"BottomUpCheckpoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49932,"src":"79:18:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":40245,"name":"BottomUpMsgBatch","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49945,"src":"99:16:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":40246,"name":"CrossMsg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49974,"src":"117:8:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":40247,"name":"ParentFinality","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49918,"src":"127:14:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":40250,"nodeType":"ImportDirective","src":"175:47:57","nodes":[],"absolutePath":"src/structs/Subnet.sol","file":"../structs/Subnet.sol","nameLocation":"-1:-1:-1","scope":40355,"sourceUnit":50230,"symbolAliases":[{"foreign":{"id":40249,"name":"SubnetID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":50077,"src":"183:8:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":40252,"nodeType":"ImportDirective","src":"223:53:57","nodes":[],"absolutePath":"src/structs/FvmAddress.sol","file":"../structs/FvmAddress.sol","nameLocation":"-1:-1:-1","scope":40355,"sourceUnit":50006,"symbolAliases":[{"foreign":{"id":40251,"name":"FvmAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":49998,"src":"231:10:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":40354,"nodeType":"ContractDefinition","src":"334:4398:57","nodes":[{"id":40259,"nodeType":"FunctionDefinition","src":"492:62:57","nodes":[],"documentation":{"id":40254,"nodeType":"StructuredDocumentation","src":"359:128:57","text":"@notice Register is called by subnet actors to put the required collateral\n and register the subnet to the hierarchy."},"functionSelector":"f207564e","implemented":false,"kind":"function","modifiers":[],"name":"register","nameLocation":"501:8:57","parameters":{"id":40257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40256,"mutability":"mutable","name":"genesisCircSupply","nameLocation":"518:17:57","nodeType":"VariableDeclaration","scope":40259,"src":"510:25:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40255,"name":"uint256","nodeType":"ElementaryTypeName","src":"510:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"509:27:57"},"returnParameters":{"id":40258,"nodeType":"ParameterList","parameters":[],"src":"553:0:57"},"scope":40354,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":40263,"nodeType":"FunctionDefinition","src":"627:37:57","nodes":[],"documentation":{"id":40260,"nodeType":"StructuredDocumentation","src":"560:62:57","text":"@notice AddStake adds stake to the collateral of a subnet."},"functionSelector":"5a627dbc","implemented":false,"kind":"function","modifiers":[],"name":"addStake","nameLocation":"636:8:57","parameters":{"id":40261,"nodeType":"ParameterList","parameters":[],"src":"644:2:57"},"returnParameters":{"id":40262,"nodeType":"ParameterList","parameters":[],"src":"663:0:57"},"scope":40354,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":40269,"nodeType":"FunctionDefinition","src":"739:47:57","nodes":[],"documentation":{"id":40264,"nodeType":"StructuredDocumentation","src":"670:64:57","text":"@notice Release stake recovers some collateral of the subnet"},"functionSelector":"45f54485","implemented":false,"kind":"function","modifiers":[],"name":"releaseStake","nameLocation":"748:12:57","parameters":{"id":40267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40266,"mutability":"mutable","name":"amount","nameLocation":"769:6:57","nodeType":"VariableDeclaration","scope":40269,"src":"761:14:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40265,"name":"uint256","nodeType":"ElementaryTypeName","src":"761:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"760:16:57"},"returnParameters":{"id":40268,"nodeType":"ParameterList","parameters":[],"src":"785:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":40275,"nodeType":"FunctionDefinition","src":"835:58:57","nodes":[],"documentation":{"id":40270,"nodeType":"StructuredDocumentation","src":"792:38:57","text":"@notice Release reward for relayer"},"functionSelector":"d8e25572","implemented":false,"kind":"function","modifiers":[],"name":"releaseRewardForRelayer","nameLocation":"844:23:57","parameters":{"id":40273,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40272,"mutability":"mutable","name":"amount","nameLocation":"876:6:57","nodeType":"VariableDeclaration","scope":40275,"src":"868:14:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40271,"name":"uint256","nodeType":"ElementaryTypeName","src":"868:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"867:16:57"},"returnParameters":{"id":40274,"nodeType":"ParameterList","parameters":[],"src":"892:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":40279,"nodeType":"FunctionDefinition","src":"1011:25:57","nodes":[],"documentation":{"id":40276,"nodeType":"StructuredDocumentation","src":"899:107:57","text":"@notice Kill propagates the kill signal from a subnet actor to unregister it from th\n hierarchy."},"functionSelector":"41c0e1b5","implemented":false,"kind":"function","modifiers":[],"name":"kill","nameLocation":"1020:4:57","parameters":{"id":40277,"nodeType":"ParameterList","parameters":[],"src":"1024:2:57"},"returnParameters":{"id":40278,"nodeType":"ParameterList","parameters":[],"src":"1035:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":40286,"nodeType":"FunctionDefinition","src":"1130:83:57","nodes":[],"documentation":{"id":40280,"nodeType":"StructuredDocumentation","src":"1042:83:57","text":"@notice commitCheckpoint propagates the commitment of a checkpoint from a child"},"functionSelector":"47dc9b4f","implemented":false,"kind":"function","modifiers":[],"name":"commitCheckpoint","nameLocation":"1139:16:57","parameters":{"id":40284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40283,"mutability":"mutable","name":"bottomUpCheckpoint","nameLocation":"1184:18:57","nodeType":"VariableDeclaration","scope":40286,"src":"1156:46:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_BottomUpCheckpoint_$49932_calldata_ptr","typeString":"struct BottomUpCheckpoint"},"typeName":{"id":40282,"nodeType":"UserDefinedTypeName","pathNode":{"id":40281,"name":"BottomUpCheckpoint","nameLocations":["1156:18:57"],"nodeType":"IdentifierPath","referencedDeclaration":49932,"src":"1156:18:57"},"referencedDeclaration":49932,"src":"1156:18:57","typeDescriptions":{"typeIdentifier":"t_struct$_BottomUpCheckpoint_$49932_storage_ptr","typeString":"struct BottomUpCheckpoint"}},"visibility":"internal"}],"src":"1155:48:57"},"returnParameters":{"id":40285,"nodeType":"ParameterList","parameters":[],"src":"1212:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":40296,"nodeType":"FunctionDefinition","src":"1764:83:57","nodes":[],"documentation":{"id":40287,"nodeType":"StructuredDocumentation","src":"1219:540:57","text":"@notice fund locks the received funds —denominated in the native coin— and moves the value down the hierarchy,\n crediting the funds to the specified address in the destination network.\n This functions ends up minting supply in the subnet equal to the value of the transaction. It does so by\n committing the relevant top-down message, updating the top-down nonce along the way.\n Calling this method on a subnet whose supply source is not 'native' will revert with UnexpectedSupplySource()."},"functionSelector":"18f44b70","implemented":false,"kind":"function","modifiers":[],"name":"fund","nameLocation":"1773:4:57","parameters":{"id":40294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40290,"mutability":"mutable","name":"subnetId","nameLocation":"1796:8:57","nodeType":"VariableDeclaration","scope":40296,"src":"1778:26:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SubnetID_$50077_calldata_ptr","typeString":"struct SubnetID"},"typeName":{"id":40289,"nodeType":"UserDefinedTypeName","pathNode":{"id":40288,"name":"SubnetID","nameLocations":["1778:8:57"],"nodeType":"IdentifierPath","referencedDeclaration":50077,"src":"1778:8:57"},"referencedDeclaration":50077,"src":"1778:8:57","typeDescriptions":{"typeIdentifier":"t_struct$_SubnetID_$50077_storage_ptr","typeString":"struct SubnetID"}},"visibility":"internal"},{"constant":false,"id":40293,"mutability":"mutable","name":"to","nameLocation":"1826:2:57","nodeType":"VariableDeclaration","scope":40296,"src":"1806:22:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_FvmAddress_$49998_calldata_ptr","typeString":"struct FvmAddress"},"typeName":{"id":40292,"nodeType":"UserDefinedTypeName","pathNode":{"id":40291,"name":"FvmAddress","nameLocations":["1806:10:57"],"nodeType":"IdentifierPath","referencedDeclaration":49998,"src":"1806:10:57"},"referencedDeclaration":49998,"src":"1806:10:57","typeDescriptions":{"typeIdentifier":"t_struct$_FvmAddress_$49998_storage_ptr","typeString":"struct FvmAddress"}},"visibility":"internal"}],"src":"1777:52:57"},"returnParameters":{"id":40295,"nodeType":"ParameterList","parameters":[],"src":"1846:0:57"},"scope":40354,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":40308,"nodeType":"FunctionDefinition","src":"2806:100:57","nodes":[],"documentation":{"id":40297,"nodeType":"StructuredDocumentation","src":"1853:948:57","text":"@notice fundWithToken locks the specified amount of tokens in the ERC20 contract linked to the subnet, and\n moves the value down the hierarchy, crediting the funds as native coins to the specified address\n in the destination network.\n This method expects the caller to have approved the gateway to spend `amount` tokens on their behalf\n (usually done through IERC20#approve). Tokens are locked by calling IERC20#transferFrom(caller, address(this), amount).\n A failure in transferring tokens to the gateway will revert the call.\n It's possible to call this method from an EOA or a contract. Regardless, it's recommended to approve strictly\n the amount that will subsequently be deposited into the subnet. Keeping outstanding approvals is not recommended.\n Calling this method on a subnet whose supply source is not 'ERC20' will revert with UnexpectedSupplySource()."},"functionSelector":"0517e1aa","implemented":false,"kind":"function","modifiers":[],"name":"fundWithToken","nameLocation":"2815:13:57","parameters":{"id":40306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40300,"mutability":"mutable","name":"subnetId","nameLocation":"2847:8:57","nodeType":"VariableDeclaration","scope":40308,"src":"2829:26:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SubnetID_$50077_calldata_ptr","typeString":"struct SubnetID"},"typeName":{"id":40299,"nodeType":"UserDefinedTypeName","pathNode":{"id":40298,"name":"SubnetID","nameLocations":["2829:8:57"],"nodeType":"IdentifierPath","referencedDeclaration":50077,"src":"2829:8:57"},"referencedDeclaration":50077,"src":"2829:8:57","typeDescriptions":{"typeIdentifier":"t_struct$_SubnetID_$50077_storage_ptr","typeString":"struct SubnetID"}},"visibility":"internal"},{"constant":false,"id":40303,"mutability":"mutable","name":"to","nameLocation":"2877:2:57","nodeType":"VariableDeclaration","scope":40308,"src":"2857:22:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_FvmAddress_$49998_calldata_ptr","typeString":"struct FvmAddress"},"typeName":{"id":40302,"nodeType":"UserDefinedTypeName","pathNode":{"id":40301,"name":"FvmAddress","nameLocations":["2857:10:57"],"nodeType":"IdentifierPath","referencedDeclaration":49998,"src":"2857:10:57"},"referencedDeclaration":49998,"src":"2857:10:57","typeDescriptions":{"typeIdentifier":"t_struct$_FvmAddress_$49998_storage_ptr","typeString":"struct FvmAddress"}},"visibility":"internal"},{"constant":false,"id":40305,"mutability":"mutable","name":"amount","nameLocation":"2889:6:57","nodeType":"VariableDeclaration","scope":40308,"src":"2881:14:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40304,"name":"uint256","nodeType":"ElementaryTypeName","src":"2881:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2828:68:57"},"returnParameters":{"id":40307,"nodeType":"ParameterList","parameters":[],"src":"2905:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":40315,"nodeType":"FunctionDefinition","src":"3238:58:57","nodes":[],"documentation":{"id":40309,"nodeType":"StructuredDocumentation","src":"2912:321:57","text":"@notice Release creates a new check message to release funds in parent chain\n This function burns the funds that will be released in the current subnet\n and propagates a new checkpoint message to the parent chain to signal\n the amount of funds that can be released for a specific address."},"functionSelector":"6b2c1eef","implemented":false,"kind":"function","modifiers":[],"name":"release","nameLocation":"3247:7:57","parameters":{"id":40313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40312,"mutability":"mutable","name":"to","nameLocation":"3275:2:57","nodeType":"VariableDeclaration","scope":40315,"src":"3255:22:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_FvmAddress_$49998_calldata_ptr","typeString":"struct FvmAddress"},"typeName":{"id":40311,"nodeType":"UserDefinedTypeName","pathNode":{"id":40310,"name":"FvmAddress","nameLocations":["3255:10:57"],"nodeType":"IdentifierPath","referencedDeclaration":49998,"src":"3255:10:57"},"referencedDeclaration":49998,"src":"3255:10:57","typeDescriptions":{"typeIdentifier":"t_struct$_FvmAddress_$49998_storage_ptr","typeString":"struct FvmAddress"}},"visibility":"internal"}],"src":"3254:24:57"},"returnParameters":{"id":40314,"nodeType":"ParameterList","parameters":[],"src":"3295:0:57"},"scope":40354,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":40322,"nodeType":"FunctionDefinition","src":"3966:72:57","nodes":[],"documentation":{"id":40316,"nodeType":"StructuredDocumentation","src":"3302:659:57","text":"@notice SendUserXnetMessage sends an arbitrary cross-message to other subnet in the hierarchy.\n If the message includes any funds they need to be burnt (like in Release)\n before being propagated to the corresponding subnet.\n The circulating supply in each subnet needs to be updated as the message passes through them.\n Params expect a raw message without any subnet context (the IPC address is\n included in the message by the actor). Only actors are allowed to send arbitrary\n cross-messages as a side-effect of their execution. For plain token exchanges\n fund and release have to be used."},"functionSelector":"210b944e","implemented":false,"kind":"function","modifiers":[],"name":"sendUserXnetMessage","nameLocation":"3975:19:57","parameters":{"id":40320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40319,"mutability":"mutable","name":"crossMsg","nameLocation":"4011:8:57","nodeType":"VariableDeclaration","scope":40322,"src":"3995:24:57","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_CrossMsg_$49974_memory_ptr","typeString":"struct CrossMsg"},"typeName":{"id":40318,"nodeType":"UserDefinedTypeName","pathNode":{"id":40317,"name":"CrossMsg","nameLocations":["3995:8:57"],"nodeType":"IdentifierPath","referencedDeclaration":49974,"src":"3995:8:57"},"referencedDeclaration":49974,"src":"3995:8:57","typeDescriptions":{"typeIdentifier":"t_struct$_CrossMsg_$49974_storage_ptr","typeString":"struct CrossMsg"}},"visibility":"internal"}],"src":"3994:26:57"},"returnParameters":{"id":40321,"nodeType":"ParameterList","parameters":[],"src":"4037:0:57"},"scope":40354,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":40328,"nodeType":"FunctionDefinition","src":"4113:52:57","nodes":[],"documentation":{"id":40323,"nodeType":"StructuredDocumentation","src":"4044:64:57","text":"@notice Propagates the stored postbox item for the given cid"},"functionSelector":"25bf0db6","implemented":false,"kind":"function","modifiers":[],"name":"propagate","nameLocation":"4122:9:57","parameters":{"id":40326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40325,"mutability":"mutable","name":"msgCid","nameLocation":"4140:6:57","nodeType":"VariableDeclaration","scope":40328,"src":"4132:14:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4132:7:57","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4131:16:57"},"returnParameters":{"id":40327,"nodeType":"ParameterList","parameters":[],"src":"4164:0:57"},"scope":40354,"stateMutability":"payable","virtual":false,"visibility":"external"},{"id":40335,"nodeType":"FunctionDefinition","src":"4231:73:57","nodes":[],"documentation":{"id":40329,"nodeType":"StructuredDocumentation","src":"4171:55:57","text":"@notice commit the ipc parent finality into storage"},"functionSelector":"11196974","implemented":false,"kind":"function","modifiers":[],"name":"commitParentFinality","nameLocation":"4240:20:57","parameters":{"id":40333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40332,"mutability":"mutable","name":"finality","nameLocation":"4285:8:57","nodeType":"VariableDeclaration","scope":40335,"src":"4261:32:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_ParentFinality_$49918_calldata_ptr","typeString":"struct ParentFinality"},"typeName":{"id":40331,"nodeType":"UserDefinedTypeName","pathNode":{"id":40330,"name":"ParentFinality","nameLocations":["4261:14:57"],"nodeType":"IdentifierPath","referencedDeclaration":49918,"src":"4261:14:57"},"referencedDeclaration":49918,"src":"4261:14:57","typeDescriptions":{"typeIdentifier":"t_struct$_ParentFinality_$49918_storage_ptr","typeString":"struct ParentFinality"}},"visibility":"internal"}],"src":"4260:34:57"},"returnParameters":{"id":40334,"nodeType":"ParameterList","parameters":[],"src":"4303:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":40346,"nodeType":"FunctionDefinition","src":"4361:167:57","nodes":[],"documentation":{"id":40336,"nodeType":"StructuredDocumentation","src":"4310:46:57","text":"@notice creates a new bottom-up checkpoint"},"functionSelector":"74303771","implemented":false,"kind":"function","modifiers":[],"name":"createBottomUpCheckpoint","nameLocation":"4370:24:57","parameters":{"id":40344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40339,"mutability":"mutable","name":"checkpoint","nameLocation":"4432:10:57","nodeType":"VariableDeclaration","scope":40346,"src":"4404:38:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_BottomUpCheckpoint_$49932_calldata_ptr","typeString":"struct BottomUpCheckpoint"},"typeName":{"id":40338,"nodeType":"UserDefinedTypeName","pathNode":{"id":40337,"name":"BottomUpCheckpoint","nameLocations":["4404:18:57"],"nodeType":"IdentifierPath","referencedDeclaration":49932,"src":"4404:18:57"},"referencedDeclaration":49932,"src":"4404:18:57","typeDescriptions":{"typeIdentifier":"t_struct$_BottomUpCheckpoint_$49932_storage_ptr","typeString":"struct BottomUpCheckpoint"}},"visibility":"internal"},{"constant":false,"id":40341,"mutability":"mutable","name":"membershipRootHash","nameLocation":"4460:18:57","nodeType":"VariableDeclaration","scope":40346,"src":"4452:26:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":40340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4452:7:57","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":40343,"mutability":"mutable","name":"membershipWeight","nameLocation":"4496:16:57","nodeType":"VariableDeclaration","scope":40346,"src":"4488:24:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40342,"name":"uint256","nodeType":"ElementaryTypeName","src":"4488:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4394:124:57"},"returnParameters":{"id":40345,"nodeType":"ParameterList","parameters":[],"src":"4527:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":40353,"nodeType":"FunctionDefinition","src":"4658:72:57","nodes":[],"documentation":{"id":40347,"nodeType":"StructuredDocumentation","src":"4534:119:57","text":"@notice execBottomUpMsgBatch submits a batch of cross-net messages\n from a subnet actor for their execution."},"functionSelector":"0bed7615","implemented":false,"kind":"function","modifiers":[],"name":"execBottomUpMsgBatch","nameLocation":"4667:20:57","parameters":{"id":40351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40350,"mutability":"mutable","name":"batch","nameLocation":"4714:5:57","nodeType":"VariableDeclaration","scope":40353,"src":"4688:31:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_BottomUpMsgBatch_$49945_calldata_ptr","typeString":"struct BottomUpMsgBatch"},"typeName":{"id":40349,"nodeType":"UserDefinedTypeName","pathNode":{"id":40348,"name":"BottomUpMsgBatch","nameLocations":["4688:16:57"],"nodeType":"IdentifierPath","referencedDeclaration":49945,"src":"4688:16:57"},"referencedDeclaration":49945,"src":"4688:16:57","typeDescriptions":{"typeIdentifier":"t_struct$_BottomUpMsgBatch_$49945_storage_ptr","typeString":"struct BottomUpMsgBatch"}},"visibility":"internal"}],"src":"4687:33:57"},"returnParameters":{"id":40352,"nodeType":"ParameterList","parameters":[],"src":"4729:0:57"},"scope":40354,"stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"abstract":false,"baseContracts":[],"canonicalName":"IGateway","contractDependencies":[],"contractKind":"interface","documentation":{"id":40253,"nodeType":"StructuredDocumentation","src":"278:56:57","text":"@title Gateway interface\n @author LimeChain team"},"fullyImplemented":false,"linearizedBaseContracts":[40354],"name":"IGateway","nameLocation":"344:8:57","scope":40355,"usedErrors":[]}],"license":"MIT OR Apache-2.0"},"id":57}